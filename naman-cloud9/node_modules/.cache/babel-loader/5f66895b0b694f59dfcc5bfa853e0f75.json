{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar BaggageImpl =\n/** @class */\nfunction () {\n  function BaggageImpl(entries) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n\n  BaggageImpl.prototype.getEntry = function (key) {\n    var entry = this._entries.get(key);\n\n    if (!entry) {\n      return undefined;\n    }\n\n    return Object.assign({}, entry);\n  };\n\n  BaggageImpl.prototype.getAllEntries = function () {\n    return Array.from(this._entries.entries()).map(function (_a) {\n      var _b = __read(_a, 2),\n          k = _b[0],\n          v = _b[1];\n\n      return [k, v];\n    });\n  };\n\n  BaggageImpl.prototype.setEntry = function (key, entry) {\n    var newBaggage = new BaggageImpl(this._entries);\n\n    newBaggage._entries.set(key, entry);\n\n    return newBaggage;\n  };\n\n  BaggageImpl.prototype.removeEntry = function (key) {\n    var newBaggage = new BaggageImpl(this._entries);\n\n    newBaggage._entries.delete(key);\n\n    return newBaggage;\n  };\n\n  BaggageImpl.prototype.removeEntries = function () {\n    var e_1, _a;\n\n    var keys = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      keys[_i] = arguments[_i];\n    }\n\n    var newBaggage = new BaggageImpl(this._entries);\n\n    try {\n      for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n        var key = keys_1_1.value;\n\n        newBaggage._entries.delete(key);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return newBaggage;\n  };\n\n  BaggageImpl.prototype.clear = function () {\n    return new BaggageImpl();\n  };\n\n  return BaggageImpl;\n}();\n\nexport { BaggageImpl };","map":{"version":3,"sources":["../../../../src/baggage/internal/baggage-impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIH,IAAA,WAAA;AAAA;AAAA,YAAA;AAGE,WAAA,WAAA,CAAY,OAAZ,EAA+C;AAC7C,SAAK,QAAL,GAAgB,OAAO,GAAG,IAAI,GAAJ,CAAQ,OAAR,CAAH,GAAsB,IAAI,GAAJ,EAA7C;AACD;;AAED,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,GAAT,EAAoB;AAClB,QAAM,KAAK,GAAG,KAAK,QAAL,CAAc,GAAd,CAAkB,GAAlB,CAAd;;AACA,QAAI,CAAC,KAAL,EAAY;AACV,aAAO,SAAP;AACD;;AAED,WAAO,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAlB,CAAP;AACD,GAPD;;AASA,EAAA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,WAAO,KAAK,CAAC,IAAN,CAAW,KAAK,QAAL,CAAc,OAAd,EAAX,EAAoC,GAApC,CAAwC,UAAC,EAAD,EAAO;UAAN,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,C;UAAC,CAAC,GAAA,EAAA,CAAA,CAAA,C;UAAE,CAAC,GAAA,EAAA,CAAA,CAAA,C;;AAAM,aAAA,CAAC,CAAD,EAAI,CAAJ,CAAA;AAAM,KAA1D,CAAP;AACD,GAFD;;AAIA,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,GAAT,EAAsB,KAAtB,EAAyC;AACvC,QAAM,UAAU,GAAG,IAAI,WAAJ,CAAgB,KAAK,QAArB,CAAnB;;AACA,IAAA,UAAU,CAAC,QAAX,CAAoB,GAApB,CAAwB,GAAxB,EAA6B,KAA7B;;AACA,WAAO,UAAP;AACD,GAJD;;AAMA,EAAA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,GAAZ,EAAuB;AACrB,QAAM,UAAU,GAAG,IAAI,WAAJ,CAAgB,KAAK,QAArB,CAAnB;;AACA,IAAA,UAAU,CAAC,QAAX,CAAoB,MAApB,CAA2B,GAA3B;;AACA,WAAO,UAAP;AACD,GAJD;;AAMA,EAAA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;;;AAAc,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAiB;AAAjB,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACZ,QAAM,UAAU,GAAG,IAAI,WAAJ,CAAgB,KAAK,QAArB,CAAnB;;;AACA,WAAkB,IAAA,MAAA,GAAA,QAAA,CAAA,IAAA,CAAA,EAAI,QAAA,GAAA,MAAA,CAAA,IAAA,EAAtB,EAAsB,CAAA,QAAA,CAAA,IAAtB,EAAsB,QAAA,GAAA,MAAA,CAAA,IAAA,EAAtB,EAAwB;AAAnB,YAAM,GAAG,GAAA,QAAA,CAAA,KAAT;;AACH,QAAA,UAAU,CAAC,QAAX,CAAoB,MAApB,CAA2B,GAA3B;AACD;;;;;;;;;;;;;AACD,WAAO,UAAP;AACD,GAND;;AAQA,EAAA,WAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,WAAO,IAAI,WAAJ,EAAP;AACD,GAFD;;AAGF,SAAA,WAAA;AAAC,CA3CD,EAAA","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Baggage, BaggageEntry } from '../types';\n\nexport class BaggageImpl implements Baggage {\n  private _entries: Map<string, BaggageEntry>;\n\n  constructor(entries?: Map<string, BaggageEntry>) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n\n  getEntry(key: string): BaggageEntry | undefined {\n    const entry = this._entries.get(key);\n    if (!entry) {\n      return undefined;\n    }\n\n    return Object.assign({}, entry);\n  }\n\n  getAllEntries(): [string, BaggageEntry][] {\n    return Array.from(this._entries.entries()).map(([k, v]) => [k, v]);\n  }\n\n  setEntry(key: string, entry: BaggageEntry): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.set(key, entry);\n    return newBaggage;\n  }\n\n  removeEntry(key: string): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.delete(key);\n    return newBaggage;\n  }\n\n  removeEntries(...keys: string[]): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    for (const key of keys) {\n      newBaggage._entries.delete(key);\n    }\n    return newBaggage;\n  }\n\n  clear(): BaggageImpl {\n    return new BaggageImpl();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}