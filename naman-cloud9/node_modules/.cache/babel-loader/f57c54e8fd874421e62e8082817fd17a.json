{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy, deserializationPolicy, generateUuid, HttpHeaders, WebResource, isTokenCredential, bearerTokenAuthenticationPolicy, isNode } from \"@azure/core-http\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { BlobClient } from \"./Clients\";\nimport { Mutex } from \"./utils/Mutex\";\nimport { Pipeline } from \"./Pipeline\";\nimport { attachCredential, getURLPath, getURLPathAndQuery, iEqual } from \"./utils/utils.common\";\nimport { HeaderConstants, BATCH_MAX_REQUEST, HTTP_VERSION_1_1, HTTP_LINE_ENDING, StorageOAuthScopes } from \"./utils/constants\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { createSpan } from \"./utils/tracing\";\n/**\n * A BlobBatch represents an aggregated set of operations on blobs.\n * Currently, only `delete` and `setAccessTier` are supported.\n */\n\nexport class BlobBatch {\n  constructor() {\n    this.batch = \"batch\";\n    this.batchRequest = new InnerBatchRequest();\n  }\n  /**\n   * Get the value of Content-Type for a batch request.\n   * The value must be multipart/mixed with a batch boundary.\n   * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252\n   */\n\n\n  getMultiPartContentType() {\n    return this.batchRequest.getMultipartContentType();\n  }\n  /**\n   * Get assembled HTTP request body for sub requests.\n   */\n\n\n  getHttpRequestBody() {\n    return this.batchRequest.getHttpRequestBody();\n  }\n  /**\n   * Get sub requests that are added into the batch request.\n   */\n\n\n  getSubRequests() {\n    return this.batchRequest.getSubRequests();\n  }\n\n  async addSubRequestInternal(subRequest, assembleSubRequestFunc) {\n    await Mutex.lock(this.batch);\n\n    try {\n      this.batchRequest.preAddSubRequest(subRequest);\n      await assembleSubRequestFunc();\n      this.batchRequest.postAddSubRequest(subRequest);\n    } finally {\n      await Mutex.unlock(this.batch);\n    }\n  }\n\n  setBatchType(batchType) {\n    if (!this.batchType) {\n      this.batchType = batchType;\n    }\n\n    if (this.batchType !== batchType) {\n      throw new RangeError(`BlobBatch only supports one operation type per batch and it already is being used for ${this.batchType} operations.`);\n    }\n  }\n\n  async deleteBlob(urlOrBlobClient, credentialOrOptions, options) {\n    let url;\n    let credential;\n\n    if (typeof urlOrBlobClient === \"string\" && (isNode && credentialOrOptions instanceof StorageSharedKeyCredential || credentialOrOptions instanceof AnonymousCredential || isTokenCredential(credentialOrOptions))) {\n      // First overload\n      url = urlOrBlobClient;\n      credential = credentialOrOptions;\n    } else if (urlOrBlobClient instanceof BlobClient) {\n      // Second overload\n      url = urlOrBlobClient.url;\n      credential = urlOrBlobClient.credential;\n      options = credentialOrOptions;\n    } else {\n      throw new RangeError(\"Invalid arguments. Either url and credential, or BlobClient need be provided.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BatchDeleteRequest-addSubRequest\", options);\n\n    try {\n      this.setBatchType(\"delete\");\n      await this.addSubRequestInternal({\n        url: url,\n        credential: credential\n      }, async () => {\n        await new BlobClient(url, this.batchRequest.createPipeline(credential)).delete(updatedOptions);\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  async setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options) {\n    let url;\n    let credential;\n    let tier;\n\n    if (typeof urlOrBlobClient === \"string\" && (isNode && credentialOrTier instanceof StorageSharedKeyCredential || credentialOrTier instanceof AnonymousCredential || isTokenCredential(credentialOrTier))) {\n      // First overload\n      url = urlOrBlobClient;\n      credential = credentialOrTier;\n      tier = tierOrOptions;\n    } else if (urlOrBlobClient instanceof BlobClient) {\n      // Second overload\n      url = urlOrBlobClient.url;\n      credential = urlOrBlobClient.credential;\n      tier = credentialOrTier;\n      options = tierOrOptions;\n    } else {\n      throw new RangeError(\"Invalid arguments. Either url and credential, or BlobClient need be provided.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BatchSetTierRequest-addSubRequest\", options);\n\n    try {\n      this.setBatchType(\"setAccessTier\");\n      await this.addSubRequestInternal({\n        url: url,\n        credential: credential\n      }, async () => {\n        await new BlobClient(url, this.batchRequest.createPipeline(credential)).setAccessTier(tier, updatedOptions);\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n}\n/**\n * Inner batch request class which is responsible for assembling and serializing sub requests.\n * See https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#request-body for how requests are assembled.\n */\n\nclass InnerBatchRequest {\n  constructor() {\n    this.operationCount = 0;\n    this.body = \"\";\n    const tempGuid = generateUuid(); // batch_{batchid}\n\n    this.boundary = `batch_${tempGuid}`; // --batch_{batchid}\n    // Content-Type: application/http\n    // Content-Transfer-Encoding: binary\n\n    this.subRequestPrefix = `--${this.boundary}${HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TYPE}: application/http${HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TRANSFER_ENCODING}: binary`; // multipart/mixed; boundary=batch_{batchid}\n\n    this.multipartContentType = `multipart/mixed; boundary=${this.boundary}`; // --batch_{batchid}--\n\n    this.batchRequestEnding = `--${this.boundary}--`;\n    this.subRequests = new Map();\n  }\n  /**\n   * Create pipeline to assemble sub requests. The idea here is to use existing\n   * credential and serialization/deserialization components, with additional policies to\n   * filter unnecessary headers, assemble sub requests into request's body\n   * and intercept request from going to wire.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   */\n\n\n  createPipeline(credential) {\n    const isAnonymousCreds = credential instanceof AnonymousCredential;\n    const policyFactoryLength = 3 + (isAnonymousCreds ? 0 : 1); // [deserializationPolicy, BatchHeaderFilterPolicyFactory, (Optional)Credential, BatchRequestAssemblePolicyFactory]\n\n    const factories = new Array(policyFactoryLength);\n    factories[0] = deserializationPolicy(); // Default deserializationPolicy is provided by protocol layer\n\n    factories[1] = new BatchHeaderFilterPolicyFactory(); // Use batch header filter policy to exclude unnecessary headers\n\n    if (!isAnonymousCreds) {\n      factories[2] = isTokenCredential(credential) ? attachCredential(bearerTokenAuthenticationPolicy(credential, StorageOAuthScopes), credential) : credential;\n    }\n\n    factories[policyFactoryLength - 1] = new BatchRequestAssemblePolicyFactory(this); // Use batch assemble policy to assemble request and intercept request from going to wire\n\n    return new Pipeline(factories, {});\n  }\n\n  appendSubRequestToBody(request) {\n    // Start to assemble sub request\n    this.body += [this.subRequestPrefix, `${HeaderConstants.CONTENT_ID}: ${this.operationCount}`, \"\", `${request.method.toString()} ${getURLPathAndQuery(request.url)} ${HTTP_VERSION_1_1}${HTTP_LINE_ENDING}` // sub request start line with method\n    ].join(HTTP_LINE_ENDING);\n\n    for (const header of request.headers.headersArray()) {\n      this.body += `${header.name}: ${header.value}${HTTP_LINE_ENDING}`;\n    }\n\n    this.body += HTTP_LINE_ENDING; // sub request's headers need be ending with an empty line\n    // No body to assemble for current batch request support\n    // End to assemble sub request\n  }\n\n  preAddSubRequest(subRequest) {\n    if (this.operationCount >= BATCH_MAX_REQUEST) {\n      throw new RangeError(`Cannot exceed ${BATCH_MAX_REQUEST} sub requests in a single batch`);\n    } // Fast fail if url for sub request is invalid\n\n\n    const path = getURLPath(subRequest.url);\n\n    if (!path || path === \"\") {\n      throw new RangeError(`Invalid url for sub request: '${subRequest.url}'`);\n    }\n  }\n\n  postAddSubRequest(subRequest) {\n    this.subRequests.set(this.operationCount, subRequest);\n    this.operationCount++;\n  } // Return the http request body with assembling the ending line to the sub request body.\n\n\n  getHttpRequestBody() {\n    return `${this.body}${this.batchRequestEnding}${HTTP_LINE_ENDING}`;\n  }\n\n  getMultipartContentType() {\n    return this.multipartContentType;\n  }\n\n  getSubRequests() {\n    return this.subRequests;\n  }\n\n}\n\nclass BatchRequestAssemblePolicy extends BaseRequestPolicy {\n  constructor(batchRequest, nextPolicy, options) {\n    super(nextPolicy, options);\n    this.dummyResponse = {\n      request: new WebResource(),\n      status: 200,\n      headers: new HttpHeaders()\n    };\n    this.batchRequest = batchRequest;\n  }\n\n  async sendRequest(request) {\n    await this.batchRequest.appendSubRequestToBody(request);\n    return this.dummyResponse; // Intercept request from going to wire\n  }\n\n}\n\nclass BatchRequestAssemblePolicyFactory {\n  constructor(batchRequest) {\n    this.batchRequest = batchRequest;\n  }\n\n  create(nextPolicy, options) {\n    return new BatchRequestAssemblePolicy(this.batchRequest, nextPolicy, options);\n  }\n\n}\n\nclass BatchHeaderFilterPolicy extends BaseRequestPolicy {\n  // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n\n  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n  constructor(nextPolicy, options) {\n    super(nextPolicy, options);\n  }\n\n  async sendRequest(request) {\n    let xMsHeaderName = \"\";\n\n    for (const header of request.headers.headersArray()) {\n      if (iEqual(header.name, HeaderConstants.X_MS_VERSION)) {\n        xMsHeaderName = header.name;\n      }\n    }\n\n    if (xMsHeaderName !== \"\") {\n      request.headers.remove(xMsHeaderName); // The subrequests should not have the x-ms-version header.\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n\n}\n\nclass BatchHeaderFilterPolicyFactory {\n  create(nextPolicy, options) {\n    return new BatchHeaderFilterPolicy(nextPolicy, options);\n  }\n\n}","map":{"version":3,"sources":["../../../src/BlobBatch.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  deserializationPolicy,\n  generateUuid,\n  HttpHeaders,\n  HttpOperationResponse,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  WebResource,\n  TokenCredential,\n  isTokenCredential,\n  bearerTokenAuthenticationPolicy,\n  isNode,\n} from \"@azure/core-http\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { BlobClient, BlobDeleteOptions, BlobSetTierOptions } from \"./Clients\";\nimport { AccessTier } from \"./generatedModels\";\nimport { Mutex } from \"./utils/Mutex\";\nimport { Pipeline } from \"./Pipeline\";\nimport { attachCredential, getURLPath, getURLPathAndQuery, iEqual } from \"./utils/utils.common\";\nimport {\n  HeaderConstants,\n  BATCH_MAX_REQUEST,\n  HTTP_VERSION_1_1,\n  HTTP_LINE_ENDING,\n  StorageOAuthScopes,\n} from \"./utils/constants\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { createSpan } from \"./utils/tracing\";\n\n/**\n * A request associated with a batch operation.\n */\nexport interface BatchSubRequest {\n  /**\n   * The URL of the resource to request operation.\n   */\n  url: string;\n\n  /**\n   * The credential used for sub request.\n   * Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service.\n   * You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   */\n  credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n}\n\n/**\n * A BlobBatch represents an aggregated set of operations on blobs.\n * Currently, only `delete` and `setAccessTier` are supported.\n */\nexport class BlobBatch {\n  private batchRequest: InnerBatchRequest;\n  private readonly batch: string = \"batch\";\n  private batchType: \"delete\" | \"setAccessTier\" | undefined;\n\n  constructor() {\n    this.batchRequest = new InnerBatchRequest();\n  }\n\n  /**\n   * Get the value of Content-Type for a batch request.\n   * The value must be multipart/mixed with a batch boundary.\n   * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252\n   */\n  public getMultiPartContentType(): string {\n    return this.batchRequest.getMultipartContentType();\n  }\n\n  /**\n   * Get assembled HTTP request body for sub requests.\n   */\n  public getHttpRequestBody(): string {\n    return this.batchRequest.getHttpRequestBody();\n  }\n\n  /**\n   * Get sub requests that are added into the batch request.\n   */\n  public getSubRequests(): Map<number, BatchSubRequest> {\n    return this.batchRequest.getSubRequests();\n  }\n\n  private async addSubRequestInternal(\n    subRequest: BatchSubRequest,\n    assembleSubRequestFunc: () => Promise<void>\n  ): Promise<void> {\n    await Mutex.lock(this.batch);\n\n    try {\n      this.batchRequest.preAddSubRequest(subRequest);\n      await assembleSubRequestFunc();\n      this.batchRequest.postAddSubRequest(subRequest);\n    } finally {\n      await Mutex.unlock(this.batch);\n    }\n  }\n\n  private setBatchType(batchType: \"delete\" | \"setAccessTier\"): void {\n    if (!this.batchType) {\n      this.batchType = batchType;\n    }\n    if (this.batchType !== batchType) {\n      throw new RangeError(\n        `BlobBatch only supports one operation type per batch and it already is being used for ${this.batchType} operations.`\n      );\n    }\n  }\n\n  /**\n   * The deleteBlob operation marks the specified blob or snapshot for deletion.\n   * The blob is later deleted during garbage collection.\n   * Only one kind of operation is allowed per batch request.\n   *\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operation will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param url - The url of the blob resource to delete.\n   * @param credential - Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options -\n   */\n  public async deleteBlob(\n    url: string,\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    options?: BlobDeleteOptions\n  ): Promise<void>;\n\n  /**\n   * The deleteBlob operation marks the specified blob or snapshot for deletion.\n   * The blob is later deleted during garbage collection.\n   * Only one kind of operation is allowed per batch request.\n   *\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operation will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClient - The BlobClient.\n   * @param options -\n   */\n  public async deleteBlob(blobClient: BlobClient, options?: BlobDeleteOptions): Promise<void>;\n\n  public async deleteBlob(\n    urlOrBlobClient: string | BlobClient,\n    credentialOrOptions:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | BlobDeleteOptions\n      | undefined,\n    options?: BlobDeleteOptions\n  ): Promise<void> {\n    let url: string;\n    let credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n\n    if (\n      typeof urlOrBlobClient === \"string\" &&\n      ((isNode && credentialOrOptions instanceof StorageSharedKeyCredential) ||\n        credentialOrOptions instanceof AnonymousCredential ||\n        isTokenCredential(credentialOrOptions))\n    ) {\n      // First overload\n      url = urlOrBlobClient;\n      credential = credentialOrOptions;\n    } else if (urlOrBlobClient instanceof BlobClient) {\n      // Second overload\n      url = urlOrBlobClient.url;\n      credential = urlOrBlobClient.credential;\n      options = credentialOrOptions as BlobDeleteOptions;\n    } else {\n      throw new RangeError(\n        \"Invalid arguments. Either url and credential, or BlobClient need be provided.\"\n      );\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const { span, updatedOptions } = createSpan(\"BatchDeleteRequest-addSubRequest\", options);\n\n    try {\n      this.setBatchType(\"delete\");\n      await this.addSubRequestInternal(\n        {\n          url: url,\n          credential: credential,\n        },\n        async () => {\n          await new BlobClient(url, this.batchRequest.createPipeline(credential)).delete(\n            updatedOptions\n          );\n        }\n      );\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * The setBlobAccessTier operation sets the tier on a blob.\n   * The operation is allowed on block blobs in a blob storage or general purpose v2 account.\n   * Only one kind of operation is allowed per batch request.\n   *\n   * A block blob's tier determines Hot/Cool/Archive storage type.\n   * This operation does not update the blob's ETag.\n   * For detailed information about block blob level tiering\n   * see [hot, cool, and archive access tiers](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers).\n   * The operation will be authenticated and authorized\n   * with specified credential. See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param url - The url of the blob resource to delete.\n   * @param credential - Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobAccessTier(\n    url: string,\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    tier: AccessTier,\n    options?: BlobSetTierOptions\n  ): Promise<void>;\n\n  /**\n   * The setBlobAccessTier operation sets the tier on a blob.\n   * The operation is allowed on block blobs in a blob storage or general purpose v2 account.\n   * Only one kind of operation is allowed per batch request.\n   *\n   * A block blob's tier determines Hot/Cool/Archive storage type.\n   * This operation does not update the blob's ETag.\n   * For detailed information about block blob level tiering\n   * see [hot, cool, and archive access tiers](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers).\n   * The operation will be authenticated and authorized\n   * with specified credential. See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClient - The BlobClient.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobAccessTier(\n    blobClient: BlobClient,\n    tier: AccessTier,\n    options?: BlobSetTierOptions\n  ): Promise<void>;\n\n  public async setBlobAccessTier(\n    urlOrBlobClient: string | BlobClient,\n    credentialOrTier:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | AccessTier,\n    tierOrOptions?: AccessTier | BlobSetTierOptions,\n    options?: BlobSetTierOptions\n  ): Promise<void> {\n    let url: string;\n    let credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n    let tier: AccessTier;\n\n    if (\n      typeof urlOrBlobClient === \"string\" &&\n      ((isNode && credentialOrTier instanceof StorageSharedKeyCredential) ||\n        credentialOrTier instanceof AnonymousCredential ||\n        isTokenCredential(credentialOrTier))\n    ) {\n      // First overload\n      url = urlOrBlobClient;\n      credential = credentialOrTier as\n        | StorageSharedKeyCredential\n        | AnonymousCredential\n        | TokenCredential;\n      tier = tierOrOptions as AccessTier;\n    } else if (urlOrBlobClient instanceof BlobClient) {\n      // Second overload\n      url = urlOrBlobClient.url;\n      credential = urlOrBlobClient.credential;\n      tier = credentialOrTier as AccessTier;\n      options = tierOrOptions as BlobSetTierOptions;\n    } else {\n      throw new RangeError(\n        \"Invalid arguments. Either url and credential, or BlobClient need be provided.\"\n      );\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const { span, updatedOptions } = createSpan(\"BatchSetTierRequest-addSubRequest\", options);\n\n    try {\n      this.setBatchType(\"setAccessTier\");\n      await this.addSubRequestInternal(\n        {\n          url: url,\n          credential: credential,\n        },\n        async () => {\n          await new BlobClient(url, this.batchRequest.createPipeline(credential)).setAccessTier(\n            tier,\n            updatedOptions\n          );\n        }\n      );\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n\n/**\n * Inner batch request class which is responsible for assembling and serializing sub requests.\n * See https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#request-body for how requests are assembled.\n */\nclass InnerBatchRequest {\n  private operationCount: number;\n  private body: string;\n  private subRequests: Map<number, BatchSubRequest>;\n  private readonly boundary: string;\n  private readonly subRequestPrefix: string;\n  private readonly multipartContentType: string;\n  private readonly batchRequestEnding: string;\n\n  constructor() {\n    this.operationCount = 0;\n    this.body = \"\";\n\n    const tempGuid = generateUuid();\n\n    // batch_{batchid}\n    this.boundary = `batch_${tempGuid}`;\n    // --batch_{batchid}\n    // Content-Type: application/http\n    // Content-Transfer-Encoding: binary\n    this.subRequestPrefix = `--${this.boundary}${HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TYPE}: application/http${HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TRANSFER_ENCODING}: binary`;\n    // multipart/mixed; boundary=batch_{batchid}\n    this.multipartContentType = `multipart/mixed; boundary=${this.boundary}`;\n    // --batch_{batchid}--\n    this.batchRequestEnding = `--${this.boundary}--`;\n\n    this.subRequests = new Map();\n  }\n\n  /**\n   * Create pipeline to assemble sub requests. The idea here is to use existing\n   * credential and serialization/deserialization components, with additional policies to\n   * filter unnecessary headers, assemble sub requests into request's body\n   * and intercept request from going to wire.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   */\n  public createPipeline(\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential\n  ): Pipeline {\n    const isAnonymousCreds = credential instanceof AnonymousCredential;\n    const policyFactoryLength = 3 + (isAnonymousCreds ? 0 : 1); // [deserializationPolicy, BatchHeaderFilterPolicyFactory, (Optional)Credential, BatchRequestAssemblePolicyFactory]\n    const factories: RequestPolicyFactory[] = new Array(policyFactoryLength);\n\n    factories[0] = deserializationPolicy(); // Default deserializationPolicy is provided by protocol layer\n    factories[1] = new BatchHeaderFilterPolicyFactory(); // Use batch header filter policy to exclude unnecessary headers\n    if (!isAnonymousCreds) {\n      factories[2] = isTokenCredential(credential)\n        ? attachCredential(\n            bearerTokenAuthenticationPolicy(credential, StorageOAuthScopes),\n            credential\n          )\n        : credential;\n    }\n    factories[policyFactoryLength - 1] = new BatchRequestAssemblePolicyFactory(this); // Use batch assemble policy to assemble request and intercept request from going to wire\n\n    return new Pipeline(factories, {});\n  }\n\n  public appendSubRequestToBody(request: WebResource) {\n    // Start to assemble sub request\n    this.body += [\n      this.subRequestPrefix, // sub request constant prefix\n      `${HeaderConstants.CONTENT_ID}: ${this.operationCount}`, // sub request's content ID\n      \"\", // empty line after sub request's content ID\n      `${request.method.toString()} ${getURLPathAndQuery(\n        request.url\n      )} ${HTTP_VERSION_1_1}${HTTP_LINE_ENDING}`, // sub request start line with method\n    ].join(HTTP_LINE_ENDING);\n\n    for (const header of request.headers.headersArray()) {\n      this.body += `${header.name}: ${header.value}${HTTP_LINE_ENDING}`;\n    }\n\n    this.body += HTTP_LINE_ENDING; // sub request's headers need be ending with an empty line\n    // No body to assemble for current batch request support\n    // End to assemble sub request\n  }\n\n  public preAddSubRequest(subRequest: BatchSubRequest) {\n    if (this.operationCount >= BATCH_MAX_REQUEST) {\n      throw new RangeError(`Cannot exceed ${BATCH_MAX_REQUEST} sub requests in a single batch`);\n    }\n\n    // Fast fail if url for sub request is invalid\n    const path = getURLPath(subRequest.url);\n    if (!path || path === \"\") {\n      throw new RangeError(`Invalid url for sub request: '${subRequest.url}'`);\n    }\n  }\n\n  public postAddSubRequest(subRequest: BatchSubRequest) {\n    this.subRequests.set(this.operationCount, subRequest);\n    this.operationCount++;\n  }\n\n  // Return the http request body with assembling the ending line to the sub request body.\n  public getHttpRequestBody(): string {\n    return `${this.body}${this.batchRequestEnding}${HTTP_LINE_ENDING}`;\n  }\n\n  public getMultipartContentType(): string {\n    return this.multipartContentType;\n  }\n\n  public getSubRequests(): Map<number, BatchSubRequest> {\n    return this.subRequests;\n  }\n}\n\nclass BatchRequestAssemblePolicy extends BaseRequestPolicy {\n  private batchRequest: InnerBatchRequest;\n  private readonly dummyResponse: HttpOperationResponse = {\n    request: new WebResource(),\n    status: 200,\n    headers: new HttpHeaders(),\n  };\n\n  constructor(\n    batchRequest: InnerBatchRequest,\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions\n  ) {\n    super(nextPolicy, options);\n\n    this.batchRequest = batchRequest;\n  }\n\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    await this.batchRequest.appendSubRequestToBody(request);\n\n    return this.dummyResponse; // Intercept request from going to wire\n  }\n}\n\nclass BatchRequestAssemblePolicyFactory implements RequestPolicyFactory {\n  private batchRequest: InnerBatchRequest;\n\n  constructor(batchRequest: InnerBatchRequest) {\n    this.batchRequest = batchRequest;\n  }\n\n  public create(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions\n  ): BatchRequestAssemblePolicy {\n    return new BatchRequestAssemblePolicy(this.batchRequest, nextPolicy, options);\n  }\n}\n\nclass BatchHeaderFilterPolicy extends BaseRequestPolicy {\n  // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    let xMsHeaderName = \"\";\n\n    for (const header of request.headers.headersArray()) {\n      if (iEqual(header.name, HeaderConstants.X_MS_VERSION)) {\n        xMsHeaderName = header.name;\n      }\n    }\n\n    if (xMsHeaderName !== \"\") {\n      request.headers.remove(xMsHeaderName); // The subrequests should not have the x-ms-version header.\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n\nclass BatchHeaderFilterPolicyFactory implements RequestPolicyFactory {\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): BatchHeaderFilterPolicy {\n    return new BatchHeaderFilterPolicy(nextPolicy, options);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}