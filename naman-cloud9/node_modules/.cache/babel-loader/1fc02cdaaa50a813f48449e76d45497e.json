{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BatchResponseParser } from \"./BatchResponseParser\";\nimport { utf8ByteLength } from \"./BatchUtils\";\nimport { BlobBatch } from \"./BlobBatch\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { Service, Container } from \"./generated/src/operations\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { getURLPath } from \"./utils/utils.common\";\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\n\nexport class BlobBatchClient {\n  constructor(url, credentialOrPipeline, // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    let pipeline;\n\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (!credentialOrPipeline) {\n      // no credential provided\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    }\n\n    const storageClientContext = new StorageClientContext(url, pipeline.toServiceClientOptions());\n    const path = getURLPath(url);\n\n    if (path && path !== \"/\") {\n      // Container scoped.\n      this.serviceOrContainerContext = new Container(storageClientContext);\n    } else {\n      this.serviceOrContainerContext = new Service(storageClientContext);\n    }\n  }\n  /**\n   * Creates a {@link BlobBatch}.\n   * A BlobBatch represents an aggregated set of operations on blobs.\n   */\n\n\n  createBatch() {\n    return new BlobBatch();\n  }\n\n  async deleteBlobs(urlsOrBlobClients, credentialOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    const batch = new BlobBatch();\n\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);\n      } else {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions);\n      }\n    }\n\n    return this.submitBatch(batch);\n  }\n\n  async setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    const batch = new BlobBatch();\n\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);\n      } else {\n        await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);\n      }\n    }\n\n    return this.submitBatch(batch);\n  }\n  /**\n   * Submit batch request which consists of multiple subrequests.\n   *\n   * Get `blobBatchClient` and other details before running the snippets.\n   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n   *\n   * Example usage:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.deleteBlob(urlInString0, credential0);\n   * await batchRequest.deleteBlob(urlInString1, credential1, {\n   *  deleteSnapshots: \"include\"\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * Example using a lease:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n   * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n   *  conditions: { leaseId: leaseId }\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @param batchRequest - A set of Delete or SetTier operations.\n   * @param options -\n   */\n\n\n  async submitBatch(batchRequest) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n      throw new RangeError(\"Batch request should contain one or more sub requests.\");\n    }\n\n    const {\n      span,\n      updatedOptions\n    } = createSpan(\"BlobBatchClient-submitBatch\", options);\n\n    try {\n      const batchRequestBody = batchRequest.getHttpRequestBody(); // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n\n      const rawBatchResponse = await this.serviceOrContainerContext.submitBatch(utf8ByteLength(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign(Object.assign({}, options), convertTracingToRequestOptionsBase(updatedOptions))); // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n\n      const batchResponseParser = new BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());\n      const responseSummary = await batchResponseParser.parseBatchResponse();\n      const res = {\n        _response: rawBatchResponse._response,\n        contentType: rawBatchResponse.contentType,\n        errorCode: rawBatchResponse.errorCode,\n        requestId: rawBatchResponse.requestId,\n        clientRequestId: rawBatchResponse.clientRequestId,\n        version: rawBatchResponse.version,\n        subResponses: responseSummary.subResponses,\n        subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n        subResponsesFailedCount: responseSummary.subResponsesFailedCount\n      };\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/BlobBatchClient.ts"],"names":[],"mappings":"AAAA;AACA;AASA,SAAS,mBAAT,QAAoC,uBAApC;AACA,SAAS,cAAT,QAA+B,cAA/B;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,cAAT,QAA+B,qBAA/B;AACA,SAAS,kCAAT,EAA6C,UAA7C,QAA+D,iBAA/D;AAEA,SAAS,OAAT,EAAkB,SAAlB,QAAmC,4BAAnC;AAEA,SAAS,mBAAT,QAAoC,mCAApC;AAEA,SAAS,oBAAT,QAAqC,sCAArC;AACA,SAA+C,WAA/C,EAA4D,cAA5D,QAAkF,YAAlF;AACA,SAAS,UAAT,QAA2B,sBAA3B;AAiCA;;;;AAIG;;AACH,OAAM,MAAO,eAAP,CAAsB;AA8B1B,EAAA,WAAA,CACE,GADF,EAEE,oBAFF,EAOE;;AACA;AACA,EAAA,OATF,EASkC;AAEhC,QAAI,QAAJ;;AACA,QAAI,cAAc,CAAC,oBAAD,CAAlB,EAA0C;AACxC,MAAA,QAAQ,GAAG,oBAAX;AACD,KAFD,MAEO,IAAI,CAAC,oBAAL,EAA2B;AAChC;AACA,MAAA,QAAQ,GAAG,WAAW,CAAC,IAAI,mBAAJ,EAAD,EAA4B,OAA5B,CAAtB;AACD,KAHM,MAGA;AACL,MAAA,QAAQ,GAAG,WAAW,CAAC,oBAAD,EAAuB,OAAvB,CAAtB;AACD;;AAED,UAAM,oBAAoB,GAAG,IAAI,oBAAJ,CAAyB,GAAzB,EAA8B,QAAQ,CAAC,sBAAT,EAA9B,CAA7B;AAEA,UAAM,IAAI,GAAG,UAAU,CAAC,GAAD,CAAvB;;AACA,QAAI,IAAI,IAAI,IAAI,KAAK,GAArB,EAA0B;AACxB;AACA,WAAK,yBAAL,GAAiC,IAAI,SAAJ,CAAc,oBAAd,CAAjC;AACD,KAHD,MAGO;AACL,WAAK,yBAAL,GAAiC,IAAI,OAAJ,CAAY,oBAAZ,CAAjC;AACD;AACF;AAED;;;AAGG;;;AACI,EAAA,WAAW,GAAA;AAChB,WAAO,IAAI,SAAJ,EAAP;AACD;;AAsCuB,QAAX,WAAW,CACtB,iBADsB,EAEtB,mBAFsB,EAQtB;;AACA;AACA,EAAA,OAVsB,EAUK;AAE3B,UAAM,KAAK,GAAG,IAAI,SAAJ,EAAd;;AACA,SAAK,MAAM,eAAX,IAA8B,iBAA9B,EAAiD;AAC/C,UAAI,OAAO,eAAP,KAA2B,QAA/B,EAAyC;AACvC,cAAM,KAAK,CAAC,UAAN,CAAiB,eAAjB,EAAkC,mBAAlC,EAA0E,OAA1E,CAAN;AACD,OAFD,MAEO;AACL,cAAM,KAAK,CAAC,UAAN,CAAiB,eAAjB,EAAkC,mBAAlC,CAAN;AACD;AACF;;AACD,WAAO,KAAK,WAAL,CAAiB,KAAjB,CAAP;AACD;;AAkD8B,QAAlB,kBAAkB,CAC7B,iBAD6B,EAE7B,gBAF6B,EAO7B,aAP6B,EAQ7B;;AACA;AACA,EAAA,OAV6B,EAUD;AAE5B,UAAM,KAAK,GAAG,IAAI,SAAJ,EAAd;;AACA,SAAK,MAAM,eAAX,IAA8B,iBAA9B,EAAiD;AAC/C,UAAI,OAAO,eAAP,KAA2B,QAA/B,EAAyC;AACvC,cAAM,KAAK,CAAC,iBAAN,CACJ,eADI,EAEJ,gBAFI,EAGJ,aAHI,EAIJ,OAJI,CAAN;AAMD,OAPD,MAOO;AACL,cAAM,KAAK,CAAC,iBAAN,CACJ,eADI,EAEJ,gBAFI,EAGJ,aAHI,CAAN;AAKD;AACF;;AACD,WAAO,KAAK,WAAL,CAAiB,KAAjB,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCG;;;AACqB,QAAX,WAAW,CACtB,YADsB,EAE0B;AAAA,QAAhD,OAAgD,uEAAF,EAAE;;AAEhD,QAAI,CAAC,YAAD,IAAiB,YAAY,CAAC,cAAb,GAA8B,IAA9B,KAAuC,CAA5D,EAA+D;AAC7D,YAAM,IAAI,UAAJ,CAAe,wDAAf,CAAN;AACD;;AAED,UAAM;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,QAA2B,UAAU,CAAC,6BAAD,EAAgC,OAAhC,CAA3C;;AACA,QAAI;AACF,YAAM,gBAAgB,GAAG,YAAY,CAAC,kBAAb,EAAzB,CADE,CAGF;;AACA,YAAM,gBAAgB,GACpB,MAAM,KAAK,yBAAL,CAA+B,WAA/B,CACJ,cAAc,CAAC,gBAAD,CADV,EAEJ,YAAY,CAAC,uBAAb,EAFI,EAGJ,gBAHI,EAGY,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAEX,OAFW,CAAA,EAGX,kCAAkC,CAAC,cAAD,CAHvB,CAHZ,CADR,CAJE,CAeF;;AACA,YAAM,mBAAmB,GAAG,IAAI,mBAAJ,CAC1B,gBAD0B,EAE1B,YAAY,CAAC,cAAb,EAF0B,CAA5B;AAIA,YAAM,eAAe,GAAG,MAAM,mBAAmB,CAAC,kBAApB,EAA9B;AAEA,YAAM,GAAG,GAAiC;AACxC,QAAA,SAAS,EAAE,gBAAgB,CAAC,SADY;AAExC,QAAA,WAAW,EAAE,gBAAgB,CAAC,WAFU;AAGxC,QAAA,SAAS,EAAE,gBAAgB,CAAC,SAHY;AAIxC,QAAA,SAAS,EAAE,gBAAgB,CAAC,SAJY;AAKxC,QAAA,eAAe,EAAE,gBAAgB,CAAC,eALM;AAMxC,QAAA,OAAO,EAAE,gBAAgB,CAAC,OANc;AAOxC,QAAA,YAAY,EAAE,eAAe,CAAC,YAPU;AAQxC,QAAA,0BAA0B,EAAE,eAAe,CAAC,0BARJ;AASxC,QAAA,uBAAuB,EAAE,eAAe,CAAC;AATD,OAA1C;AAYA,aAAO,GAAP;AACD,KAnCD,CAmCE,OAAO,CAAP,EAAe;AACf,MAAA,IAAI,CAAC,SAAL,CAAe;AACb,QAAA,IAAI,EAAE,cAAc,CAAC,KADR;AAEb,QAAA,OAAO,EAAE,CAAC,CAAC;AAFE,OAAf;AAIA,YAAM,CAAN;AACD,KAzCD,SAyCU;AACR,MAAA,IAAI,CAAC,GAAL;AACD;AACF;;AAzSyB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AccessTier,\n  ServiceSubmitBatchHeaders,\n  ServiceSubmitBatchOptionalParamsModel,\n  ServiceSubmitBatchResponseModel,\n} from \"./generatedModels\";\nimport { ParsedBatchResponse } from \"./BatchResponse\";\nimport { BatchResponseParser } from \"./BatchResponseParser\";\nimport { utf8ByteLength } from \"./BatchUtils\";\nimport { BlobBatch } from \"./BlobBatch\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { HttpResponse, TokenCredential } from \"@azure/core-http\";\nimport { Service, Container } from \"./generated/src/operations\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { BlobDeleteOptions, BlobClient, BlobSetTierOptions } from \"./Clients\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { PipelineLike, StoragePipelineOptions, newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { getURLPath } from \"./utils/utils.common\";\n\n/**\n * Options to configure the Service - Submit Batch Optional Params.\n */\nexport interface BlobBatchSubmitBatchOptionalParams extends ServiceSubmitBatchOptionalParamsModel {}\n\n/**\n * Contains response data for blob batch operations.\n */\nexport declare type BlobBatchSubmitBatchResponse = ParsedBatchResponse &\n  ServiceSubmitBatchHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceSubmitBatchHeaders;\n    };\n  };\n\n/**\n * Contains response data for the {@link deleteBlobs} operation.\n */\nexport declare type BlobBatchDeleteBlobsResponse = BlobBatchSubmitBatchResponse;\n\n/**\n * Contains response data for the {@link setBlobsAccessTier} operation.\n */\nexport declare type BlobBatchSetBlobsAccessTierResponse = BlobBatchSubmitBatchResponse;\n\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nexport class BlobBatchClient {\n  private serviceOrContainerContext: Service | Container;\n\n  /**\n   * Creates an instance of BlobBatchClient.\n   *\n   * @param url - A url pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n\n  /**\n   * Creates an instance of BlobBatchClient.\n   *\n   * @param url - A url pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: PipelineLike;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (!credentialOrPipeline) {\n      // no credential provided\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    }\n\n    const storageClientContext = new StorageClientContext(url, pipeline.toServiceClientOptions());\n\n    const path = getURLPath(url);\n    if (path && path !== \"/\") {\n      // Container scoped.\n      this.serviceOrContainerContext = new Container(storageClientContext);\n    } else {\n      this.serviceOrContainerContext = new Service(storageClientContext);\n    }\n  }\n\n  /**\n   * Creates a {@link BlobBatch}.\n   * A BlobBatch represents an aggregated set of operations on blobs.\n   */\n  public createBatch(): BlobBatch {\n    return new BlobBatch();\n  }\n\n  /**\n   * Create multiple delete operations to mark the specified blobs or snapshots for deletion.\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operations will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param urls - The urls of the blob resources to delete.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options -\n   */\n  public async deleteBlobs(\n    urls: string[],\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse>;\n\n  /**\n   * Create multiple delete operations to mark the specified blobs or snapshots for deletion.\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operation(subrequest) will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClients - The BlobClients for the blobs to delete.\n   * @param options -\n   */\n  public async deleteBlobs(\n    blobClients: BlobClient[],\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse>;\n\n  public async deleteBlobs(\n    urlsOrBlobClients: string[] | BlobClient[],\n    credentialOrOptions:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | BlobDeleteOptions\n      | undefined,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse> {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions as TokenCredential, options);\n      } else {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions as BlobDeleteOptions);\n      }\n    }\n    return this.submitBatch(batch);\n  }\n\n  /**\n   * Create multiple set tier operations to set the tier on a blob.\n   * The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * See [set blob tier details](https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).\n   * The operation(subrequest) will be authenticated and authorized\n   * with specified credential.See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param urls - The urls of the blob resource to delete.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobsAccessTier(\n    urls: string[],\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    tier: AccessTier,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse>;\n\n  /**\n   * Create multiple set tier operations to set the tier on a blob.\n   * The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * See [set blob tier details](https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).\n   * The operation(subrequest) will be authenticated and authorized\n   * with specified credential.See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClients - The BlobClients for the blobs which should have a new tier set.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobsAccessTier(\n    blobClients: BlobClient[],\n    tier: AccessTier,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse>;\n\n  public async setBlobsAccessTier(\n    urlsOrBlobClients: string[] | BlobClient[],\n    credentialOrTier:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | AccessTier,\n    tierOrOptions?: AccessTier | BlobSetTierOptions,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse> {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.setBlobAccessTier(\n          urlOrBlobClient,\n          credentialOrTier as TokenCredential,\n          tierOrOptions as AccessTier,\n          options\n        );\n      } else {\n        await batch.setBlobAccessTier(\n          urlOrBlobClient,\n          credentialOrTier as AccessTier,\n          tierOrOptions as BlobSetTierOptions\n        );\n      }\n    }\n    return this.submitBatch(batch);\n  }\n\n  /**\n   * Submit batch request which consists of multiple subrequests.\n   *\n   * Get `blobBatchClient` and other details before running the snippets.\n   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n   *\n   * Example usage:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.deleteBlob(urlInString0, credential0);\n   * await batchRequest.deleteBlob(urlInString1, credential1, {\n   *  deleteSnapshots: \"include\"\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * Example using a lease:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n   * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n   *  conditions: { leaseId: leaseId }\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @param batchRequest - A set of Delete or SetTier operations.\n   * @param options -\n   */\n  public async submitBatch(\n    batchRequest: BlobBatch,\n    options: BlobBatchSubmitBatchOptionalParams = {}\n  ): Promise<BlobBatchSubmitBatchResponse> {\n    if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n      throw new RangeError(\"Batch request should contain one or more sub requests.\");\n    }\n\n    const { span, updatedOptions } = createSpan(\"BlobBatchClient-submitBatch\", options);\n    try {\n      const batchRequestBody = batchRequest.getHttpRequestBody();\n\n      // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n      const rawBatchResponse: ServiceSubmitBatchResponseModel =\n        await this.serviceOrContainerContext.submitBatch(\n          utf8ByteLength(batchRequestBody),\n          batchRequest.getMultiPartContentType(),\n          batchRequestBody,\n          {\n            ...options,\n            ...convertTracingToRequestOptionsBase(updatedOptions),\n          }\n        );\n\n      // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n      const batchResponseParser = new BatchResponseParser(\n        rawBatchResponse,\n        batchRequest.getSubRequests()\n      );\n      const responseSummary = await batchResponseParser.parseBatchResponse();\n\n      const res: BlobBatchSubmitBatchResponse = {\n        _response: rawBatchResponse._response,\n        contentType: rawBatchResponse.contentType,\n        errorCode: rawBatchResponse.errorCode,\n        requestId: rawBatchResponse.requestId,\n        clientRequestId: rawBatchResponse.clientRequestId,\n        version: rawBatchResponse.version,\n        subResponses: responseSummary.subResponses,\n        subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n        subResponsesFailedCount: responseSummary.subResponsesFailedCount,\n      };\n\n      return res;\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}