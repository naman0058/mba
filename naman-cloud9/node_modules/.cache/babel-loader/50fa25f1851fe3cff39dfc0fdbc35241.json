{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Returns a random integer value between a lower and upper bound,\n * inclusive of both bounds.\n * Note that this uses Math.random and isn't secure. If you need to use\n * this for any kind of security purpose, find a better source of random.\n * @param min - The smallest integer value allowed.\n * @param max - The largest integer value allowed.\n */\nexport function getRandomIntegerInclusive(min, max) {\n  // Make sure inputs are integers.\n  min = Math.ceil(min);\n  max = Math.floor(max); // Pick a random offset from zero to the size of the range.\n  // Since Math.random() can never return 1, we have to make the range one larger\n  // in order to be inclusive of the maximum value after we take the floor.\n\n  const offset = Math.floor(Math.random() * (max - min + 1));\n  return offset + min;\n}","map":{"version":3,"sources":["../../src/random.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA;;;;;;;AAOG;AACH,OAAM,SAAU,yBAAV,CAAoC,GAApC,EAAiD,GAAjD,EAA4D;AAChE;AACA,EAAA,GAAG,GAAG,IAAI,CAAC,IAAL,CAAU,GAAV,CAAN;AACA,EAAA,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAN,CAHgE,CAIhE;AACA;AACA;;AACA,QAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,MAAiB,GAAG,GAAG,GAAN,GAAY,CAA7B,CAAX,CAAf;AACA,SAAO,MAAM,GAAG,GAAhB;AACD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Returns a random integer value between a lower and upper bound,\n * inclusive of both bounds.\n * Note that this uses Math.random and isn't secure. If you need to use\n * this for any kind of security purpose, find a better source of random.\n * @param min - The smallest integer value allowed.\n * @param max - The largest integer value allowed.\n */\nexport function getRandomIntegerInclusive(min: number, max: number): number {\n  // Make sure inputs are integers.\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  // Pick a random offset from zero to the size of the range.\n  // Since Math.random() can never return 1, we have to make the range one larger\n  // in order to be inclusive of the maximum value after we take the floor.\n  const offset = Math.floor(Math.random() * (max - min + 1));\n  return offset + min;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}