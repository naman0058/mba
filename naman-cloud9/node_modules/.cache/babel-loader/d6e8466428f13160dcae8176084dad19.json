{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { filter, finalize, map, scan, switchMap, withLatestFrom } from 'rxjs/operators';\nexport class BlobSharedViewStateService {\n  get selectedContainer$() {\n    return this.selectedContainerInner$.asObservable();\n  }\n\n  constructor(sasGenerator, blobStorage) {\n    this.sasGenerator = sasGenerator;\n    this.blobStorage = blobStorage;\n    this.selectedContainerInner$ = new BehaviorSubject('');\n    this.containers$ = this.getStorageOptions().pipe(switchMap(options => this.blobStorage.getContainers(options)));\n    this.itemsInContainer$ = this.selectedContainer$.pipe(filter(containerName => !!containerName), switchMap(containerName => this.getStorageOptions().pipe(switchMap(options => this.blobStorage.listBlobsInContainer({ ...options,\n      containerName\n    })))));\n\n    this.finaliseBlobChange = containerName => source => source.pipe(finalize(() => this.selectedContainerInner$.value === containerName && this.selectedContainerInner$.next(containerName)));\n\n    this.scanEntries = () => source => source.pipe(map(item => ({\n      [`${item.containerName}-${item.filename}`]: item\n    })), scan((items, item) => ({ ...items,\n      ...item\n    }), {}), map(items => Object.values(items)));\n  }\n\n  getContainerItems(containerName) {\n    this.selectedContainerInner$.next(containerName);\n  }\n\n  getStorageOptionsWithContainer() {\n    return this.getStorageOptions().pipe(withLatestFrom(this.selectedContainer$), map(_ref => {\n      let [options, containerName] = _ref;\n      return { ...options,\n        containerName\n      };\n    }));\n  }\n\n  getStorageOptions() {\n    return this.sasGenerator.getSasToken();\n  }\n\n}","map":{"version":3,"sources":["D:/naman-cloud9/naman-cloud9/src/pages/BlobSharedViewState.ts"],"names":["BehaviorSubject","filter","finalize","map","scan","switchMap","withLatestFrom","BlobSharedViewStateService","selectedContainer$","selectedContainerInner$","asObservable","constructor","sasGenerator","blobStorage","containers$","getStorageOptions","pipe","options","getContainers","itemsInContainer$","containerName","listBlobsInContainer","finaliseBlobChange","source","value","next","scanEntries","item","filename","items","Object","values","getContainerItems","getStorageOptionsWithContainer","getSasToken"],"mappings":"AAAA,SACIA,eADJ,QAKS,MALT;AAME,SACEC,MADF,EAEEC,QAFF,EAGEC,GAHF,EAIEC,IAJF,EAKEC,SALF,EAMEC,cANF,QAOO,gBAPP;AAiBA,OAAO,MAAMC,0BAAN,CAAiC;AAoBhB,MAAlBC,kBAAkB,GAAG;AACvB,WAAO,KAAKC,uBAAL,CAA6BC,YAA7B,EAAP;AACD;;AAEDC,EAAAA,WAAW,CACDC,YADC,EAEDC,WAFC,EAGT;AAAA,SAFQD,YAER,GAFQA,YAER;AAAA,SADQC,WACR,GADQA,WACR;AAAA,SA1BMJ,uBA0BN,GA1BgC,IAAIT,eAAJ,CAA4B,EAA5B,CA0BhC;AAAA,SAxBFc,WAwBE,GAxBY,KAAKC,iBAAL,GAAyBC,IAAzB,CACZX,SAAS,CAACY,OAAO,IAAI,KAAKJ,WAAL,CAAiBK,aAAjB,CAA+BD,OAA/B,CAAZ,CADG,CAwBZ;AAAA,SArBFE,iBAqBE,GArBkB,KAAKX,kBAAL,CAAwBQ,IAAxB,CAClBf,MAAM,CAACmB,aAAa,IAAI,CAAC,CAACA,aAApB,CADY,EAElBf,SAAS,CAACe,aAAa,IACrB,KAAKL,iBAAL,GAAyBC,IAAzB,CACEX,SAAS,CAACY,OAAO,IACf,KAAKJ,WAAL,CAAiBQ,oBAAjB,CAAsC,EACpC,GAAGJ,OADiC;AAEpCG,MAAAA;AAFoC,KAAtC,CADO,CADX,CADO,CAFS,CAqBlB;;AAAA,SAMFE,kBANE,GAOAF,aADmB,IAEaG,MAAM,IACtCA,MAAM,CAACP,IAAP,CACEd,QAAQ,CACN,MACE,KAAKO,uBAAL,CAA6Be,KAA7B,KAAuCJ,aAAvC,IACA,KAAKX,uBAAL,CAA6BgB,IAA7B,CAAkCL,aAAlC,CAHI,CADV,CATA;;AAAA,SAiBFM,WAjBE,GAiBY,MAAoDH,MAAM,IACtEA,MAAM,CAACP,IAAP,CACEb,GAAG,CAACwB,IAAI,KAAK;AACX,OAAE,GAAEA,IAAI,CAACP,aAAc,IAAGO,IAAI,CAACC,QAAS,EAAxC,GAA4CD;AADjC,KAAL,CAAL,CADL,EAIEvB,IAAI,CACF,CAACyB,KAAD,EAAQF,IAAR,MAAkB,EAChB,GAAGE,KADa;AAEhB,SAAGF;AAFa,KAAlB,CADE,EAKF,EALE,CAJN,EAWExB,GAAG,CAAC0B,KAAK,IAAIC,MAAM,CAACC,MAAP,CAAcF,KAAd,CAAV,CAXL,CAlBA;AAAE;;AAEJG,EAAAA,iBAAiB,CAACZ,aAAD,EAA8B;AAC7C,SAAKX,uBAAL,CAA6BgB,IAA7B,CAAkCL,aAAlC;AACD;;AA4BDa,EAAAA,8BAA8B,GAAqC;AACjE,WAAO,KAAKlB,iBAAL,GAAyBC,IAAzB,CACLV,cAAc,CAAC,KAAKE,kBAAN,CADT,EAELL,GAAG,CAAC;AAAA,UAAC,CAACc,OAAD,EAAUG,aAAV,CAAD;AAAA,aAA+B,EAAE,GAAGH,OAAL;AAAcG,QAAAA;AAAd,OAA/B;AAAA,KAAD,CAFE,CAAP;AAID;;AAEOL,EAAAA,iBAAiB,GAAmC;AAC1D,WAAO,KAAKH,YAAL,CAAkBsB,WAAlB,EAAP;AACD;;AApEqC","sourcesContent":["import {\r\n    BehaviorSubject,\r\n    MonoTypeOperatorFunction,\r\n    Observable,\r\n    OperatorFunction\r\n  } from 'rxjs';\r\n  import {\r\n    filter,\r\n    finalize,\r\n    map,\r\n    scan,\r\n    switchMap,\r\n    withLatestFrom\r\n  } from 'rxjs/operators';\r\n  import {\r\n    BlobContainerRequest,\r\n    BlobItem,\r\n    BlobStorageRequest,\r\n    Dictionary\r\n  } from './azure-storage';\r\n  import { BlobStorageService } from './BlobStorageService';\r\n  import { SasGeneratorService } from './SasGeneratorService';\r\n  \r\n  export class BlobSharedViewStateService {\r\n    private selectedContainerInner$ = new BehaviorSubject<string>('');\r\n  \r\n    containers$ = this.getStorageOptions().pipe(\r\n      switchMap(options => this.blobStorage.getContainers(options))\r\n    );\r\n    itemsInContainer$ = this.selectedContainer$.pipe(\r\n      filter(containerName => !!containerName),\r\n      switchMap(containerName =>\r\n        this.getStorageOptions().pipe(\r\n          switchMap(options =>\r\n            this.blobStorage.listBlobsInContainer({\r\n              ...options,\r\n              containerName\r\n            })\r\n          )\r\n        )\r\n      )\r\n    );\r\n  \r\n    get selectedContainer$() {\r\n      return this.selectedContainerInner$.asObservable();\r\n    }\r\n  \r\n    constructor(\r\n      private sasGenerator: SasGeneratorService,\r\n      private blobStorage: BlobStorageService\r\n    ) {}\r\n  \r\n    getContainerItems(containerName: string): void {\r\n      this.selectedContainerInner$.next(containerName);\r\n    }\r\n  \r\n    finaliseBlobChange = <T>(\r\n      containerName: string\r\n    ): MonoTypeOperatorFunction<T> => source =>\r\n      source.pipe(\r\n        finalize(\r\n          () =>\r\n            this.selectedContainerInner$.value === containerName &&\r\n            this.selectedContainerInner$.next(containerName)\r\n        )\r\n      );\r\n  \r\n    scanEntries = <T extends BlobItem>(): OperatorFunction<T, T[]> => source =>\r\n      source.pipe(\r\n        map(item => ({\r\n          [`${item.containerName}-${item.filename}`]: item\r\n        })),\r\n        scan<Dictionary<T>>(\r\n          (items, item) => ({\r\n            ...items,\r\n            ...item\r\n          }),\r\n          {}\r\n        ),\r\n        map(items => Object.values(items))\r\n      );\r\n  \r\n    getStorageOptionsWithContainer(): Observable<BlobContainerRequest> {\r\n      return this.getStorageOptions().pipe(\r\n        withLatestFrom(this.selectedContainer$),\r\n        map(([options, containerName]) => ({ ...options, containerName }))\r\n      );\r\n    }\r\n  \r\n    private getStorageOptions(): Observable<BlobStorageRequest> {\r\n      return this.sasGenerator.getSasToken();\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}