{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _globalThis } from '../platform';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\nvar major = VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = _globalThis;\nexport function registerGlobal(type, instance, diag, allowOverride) {\n  var _a;\n\n  if (allowOverride === void 0) {\n    allowOverride = false;\n  }\n\n  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n    version: VERSION\n  };\n\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  if (api.version !== VERSION) {\n    // All registered APIs must be of the same version exactly\n    var err = new Error(\"@opentelemetry/api: Registration of version v\" + api.version + \" for \" + type + \" does not match previously registered API v\" + VERSION);\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  api[type] = instance;\n  diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + VERSION + \".\");\n  return true;\n}\nexport function getGlobal(type) {\n  var _a, _b;\n\n  var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n\n  return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nexport function unregisterGlobal(type, diag) {\n  diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + VERSION + \".\");\n  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n\n  if (api) {\n    delete api[type];\n  }\n}","map":{"version":3,"sources":["../../../src/internal/global-utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAKH,SAAS,WAAT,QAA4B,aAA5B;AAGA,SAAS,OAAT,QAAwB,YAAxB;AACA,SAAS,YAAT,QAA6B,UAA7B;AAEA,IAAM,KAAK,GAAG,OAAO,CAAC,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAd;AACA,IAAM,4BAA4B,GAAG,MAAM,CAAC,GAAP,CACnC,0BAAwB,KADW,CAArC;AAIA,IAAM,OAAO,GAAG,WAAhB;AAEA,OAAM,SAAU,cAAV,CACJ,IADI,EAEJ,QAFI,EAGJ,IAHI,EAIJ,aAJI,EAIiB;;;AAArB,MAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,KAAA;AAAqB;;AAErB,MAAM,GAAG,GAAI,OAAO,CAAC,4BAAD,CAAP,GAAwC,CAAA,EAAA,GAAA,OAAO,CAC1D,4BAD0D,CAAP,MAEpD,IAFoD,IAEpD,EAAA,KAAA,KAAA,CAFoD,GAEpD,EAFoD,GAEhD;AACH,IAAA,OAAO,EAAE;AADN,GAFL;;AAMA,MAAI,CAAC,aAAD,IAAkB,GAAG,CAAC,IAAD,CAAzB,EAAiC;AAC/B;AACA,QAAM,GAAG,GAAG,IAAI,KAAJ,CACV,kEAAgE,IADtD,CAAZ;AAGA,IAAA,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,KAAJ,IAAa,GAAG,CAAC,OAA5B;AACA,WAAO,KAAP;AACD;;AAED,MAAI,GAAG,CAAC,OAAJ,KAAgB,OAApB,EAA6B;AAC3B;AACA,QAAM,GAAG,GAAG,IAAI,KAAJ,CACV,kDAAgD,GAAG,CAAC,OAApD,GAA2D,OAA3D,GAAmE,IAAnE,GAAuE,6CAAvE,GAAqH,OAD3G,CAAZ;AAGA,IAAA,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,KAAJ,IAAa,GAAG,CAAC,OAA5B;AACA,WAAO,KAAP;AACD;;AAED,EAAA,GAAG,CAAC,IAAD,CAAH,GAAY,QAAZ;AACA,EAAA,IAAI,CAAC,KAAL,CACE,iDAA+C,IAA/C,GAAmD,IAAnD,GAAwD,OAAxD,GAA+D,GADjE;AAIA,SAAO,IAAP;AACD;AAED,OAAM,SAAU,SAAV,CACJ,IADI,EACM;;;AAEV,MAAM,aAAa,GAAG,CAAA,EAAA,GAAA,OAAO,CAAC,4BAAD,CAAP,MAAqC,IAArC,IAAqC,EAAA,KAAA,KAAA,CAArC,GAAqC,KAAA,CAArC,GAAqC,EAAA,CAAE,OAA7D;;AACA,MAAI,CAAC,aAAD,IAAkB,CAAC,YAAY,CAAC,aAAD,CAAnC,EAAoD;AAClD;AACD;;AACD,SAAO,CAAA,EAAA,GAAA,OAAO,CAAC,4BAAD,CAAP,MAAqC,IAArC,IAAqC,EAAA,KAAA,KAAA,CAArC,GAAqC,KAAA,CAArC,GAAqC,EAAA,CAAG,IAAH,CAA5C;AACD;AAED,OAAM,SAAU,gBAAV,CAA2B,IAA3B,EAAsD,IAAtD,EAAsE;AAC1E,EAAA,IAAI,CAAC,KAAL,CACE,oDAAkD,IAAlD,GAAsD,IAAtD,GAA2D,OAA3D,GAAkE,GADpE;AAGA,MAAM,GAAG,GAAG,OAAO,CAAC,4BAAD,CAAnB;;AAEA,MAAI,GAAJ,EAAS;AACP,WAAO,GAAG,CAAC,IAAD,CAAV;AACD;AACF","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { ContextManager } from '../context/types';\nimport { DiagLogger } from '../diag/types';\nimport { _globalThis } from '../platform';\nimport { TextMapPropagator } from '../propagation/TextMapPropagator';\nimport type { TracerProvider } from '../trace/tracer_provider';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\n\nconst major = VERSION.split('.')[0];\nconst GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\n  `opentelemetry.js.api.${major}`\n);\n\nconst _global = _globalThis as OTelGlobal;\n\nexport function registerGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type,\n  instance: OTelGlobalAPI[Type],\n  diag: DiagLogger,\n  allowOverride = false\n): boolean {\n  const api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = _global[\n    GLOBAL_OPENTELEMETRY_API_KEY\n  ] ?? {\n    version: VERSION,\n  });\n\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    const err = new Error(\n      `@opentelemetry/api: Attempted duplicate registration of API: ${type}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  if (api.version !== VERSION) {\n    // All registered APIs must be of the same version exactly\n    const err = new Error(\n      `@opentelemetry/api: Registration of version v${api.version} for ${type} does not match previously registered API v${VERSION}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  api[type] = instance;\n  diag.debug(\n    `@opentelemetry/api: Registered a global for ${type} v${VERSION}.`\n  );\n\n  return true;\n}\n\nexport function getGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type\n): OTelGlobalAPI[Type] | undefined {\n  const globalVersion = _global[GLOBAL_OPENTELEMETRY_API_KEY]?.version;\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n  return _global[GLOBAL_OPENTELEMETRY_API_KEY]?.[type];\n}\n\nexport function unregisterGlobal(type: keyof OTelGlobalAPI, diag: DiagLogger) {\n  diag.debug(\n    `@opentelemetry/api: Unregistering a global for ${type} v${VERSION}.`\n  );\n  const api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n\n  if (api) {\n    delete api[type];\n  }\n}\n\ntype OTelGlobal = {\n  [GLOBAL_OPENTELEMETRY_API_KEY]?: OTelGlobalAPI;\n};\n\ntype OTelGlobalAPI = {\n  version: string;\n\n  diag?: DiagLogger;\n  trace?: TracerProvider;\n  context?: ContextManager;\n  metrics?: MeterProvider;\n  propagation?: TextMapPropagator;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}