{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// BaseRequestPolicy has a protected constructor.\n\n/* eslint-disable @typescript-eslint/no-useless-constructor */\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function ndJsonPolicy() {\n  return {\n    create: (nextPolicy, options) => {\n      return new NdJsonPolicy(nextPolicy, options);\n    }\n  };\n}\n/**\n * NdJsonPolicy that formats a JSON array as newline-delimited JSON\n */\n\nclass NdJsonPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   */\n  constructor(nextPolicy, options) {\n    super(nextPolicy, options);\n  }\n  /**\n   * Sends a request.\n   */\n\n\n  async sendRequest(request) {\n    // There currently isn't a good way to bypass the serializer\n    if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n      const body = JSON.parse(request.body);\n\n      if (Array.isArray(body)) {\n        request.body = body.map(item => JSON.stringify(item) + \"\\n\").join(\"\");\n      }\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n\n}","map":{"version":3,"sources":["../../../src/policies/ndJsonPolicy.ts"],"names":[],"mappings":"AAAA;AACA;AAEA;;AACA;AAEA,SACE,iBADF,QAKO,iBALP;AASA,OAAM,SAAU,YAAV,GAAsB;AAC1B,SAAO;AACL,IAAA,MAAM,EAAE,CAAC,UAAD,EAA4B,OAA5B,KAA6D;AACnE,aAAO,IAAI,YAAJ,CAAiB,UAAjB,EAA6B,OAA7B,CAAP;AACD;AAHI,GAAP;AAKD;AAED;;AAEG;;AACH,MAAM,YAAN,SAA2B,iBAA3B,CAA4C;AAC1C;;AAEG;AACH,EAAA,WAAA,CAAY,UAAZ,EAAuC,OAAvC,EAAoE;AAClE,UAAM,UAAN,EAAkB,OAAlB;AACD;AAED;;AAEG;;;AACqB,QAAX,WAAW,CAAC,OAAD,EAAyB;AAC/C;AACA,QAAI,OAAO,OAAO,CAAC,IAAf,KAAwB,QAAxB,IAAoC,OAAO,CAAC,IAAR,CAAa,UAAb,CAAwB,GAAxB,CAAxC,EAAsE;AACpE,YAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,IAAnB,CAAb;;AACA,UAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvB,QAAA,OAAO,CAAC,IAAR,GAAe,IAAI,CAAC,GAAL,CAAU,IAAD,IAAU,IAAI,CAAC,SAAL,CAAe,IAAf,IAAuB,IAA1C,EAAgD,IAAhD,CAAqD,EAArD,CAAf;AACD;AACF;;AACD,WAAO,KAAK,WAAL,CAAiB,WAAjB,CAA6B,OAA7B,CAAP;AACD;;AApByC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// BaseRequestPolicy has a protected constructor.\n/* eslint-disable @typescript-eslint/no-useless-constructor */\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\n\nexport function ndJsonPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new NdJsonPolicy(nextPolicy, options);\n    },\n  };\n}\n\n/**\n * NdJsonPolicy that formats a JSON array as newline-delimited JSON\n */\nclass NdJsonPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends a request.\n   */\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    // There currently isn't a good way to bypass the serializer\n    if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n      const body = JSON.parse(request.body);\n      if (Array.isArray(body)) {\n        request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n      }\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}