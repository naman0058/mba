{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { URLBuilder } from \"../url\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\n\nconst allowedRedirect = [\"GET\", \"HEAD\"];\nexport const DefaultRedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20\n};\n/**\n * Creates a redirect policy, which sends a repeats the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n * @param maximumRetries - Maximum number of redirects to follow.\n * @returns An instance of the {@link RedirectPolicy}\n */\n\nexport function redirectPolicy() {\n  let maximumRetries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;\n  return {\n    create: (nextPolicy, options) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n/**\n * Resends the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n */\n\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options) {\n    let maxRetries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n    super(nextPolicy, options);\n    this.maxRetries = maxRetries;\n  }\n\n  sendRequest(request) {\n    return this._nextPolicy.sendRequest(request).then(response => handleRedirect(this, response, 0));\n  }\n\n}\n\nfunction handleRedirect(policy, response, currentRetries) {\n  const {\n    request,\n    status\n  } = response;\n  const locationHeader = response.headers.get(\"location\");\n\n  if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === \"POST\" || status === 307) && (!policy.maxRetries || currentRetries < policy.maxRetries)) {\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString(); // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n\n    if (status === 303) {\n      request.method = \"GET\";\n      delete request.body;\n    }\n\n    return policy._nextPolicy.sendRequest(request).then(res => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n}","map":{"version":3,"sources":["../../../src/policies/redirectPolicy.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SACE,iBADF,QAKO,iBALP;AAOA,SAAS,UAAT,QAA2B,QAA3B;AAGA;;AAEG;;AACH,MAAM,eAAe,GAAG,CAAC,KAAD,EAAQ,MAAR,CAAxB;AAkBA,OAAO,MAAM,sBAAsB,GAAoB;AACrD,EAAA,eAAe,EAAE,IADoC;AAErD,EAAA,UAAU,EAAE;AAFyC,CAAhD;AAKP;;;;AAIG;;AACH,OAAM,SAAU,cAAV,GAA4C;AAAA,MAAnB,cAAmB,uEAAF,EAAE;AAChD,SAAO;AACL,IAAA,MAAM,EAAE,CAAC,UAAD,EAA4B,OAA5B,KAA6D;AACnE,aAAO,IAAI,cAAJ,CAAmB,UAAnB,EAA+B,OAA/B,EAAwC,cAAxC,CAAP;AACD;AAHI,GAAP;AAKD;AAED;;AAEG;;AACH,OAAM,MAAO,cAAP,SAA8B,iBAA9B,CAA+C;AACnD,EAAA,WAAA,CAAY,UAAZ,EAAuC,OAAvC,EAA8F;AAAA,QAAf,UAAe,uEAAF,EAAE;AAC5F,UAAM,UAAN,EAAkB,OAAlB;AAD6E,SAAA,UAAA,GAAA,UAAA;AAE9E;;AAEM,EAAA,WAAW,CAAC,OAAD,EAAyB;AACzC,WAAO,KAAK,WAAL,CACJ,WADI,CACQ,OADR,EAEJ,IAFI,CAEE,QAAD,IAAc,cAAc,CAAC,IAAD,EAAO,QAAP,EAAiB,CAAjB,CAF7B,CAAP;AAGD;;AATkD;;AAYrD,SAAS,cAAT,CACE,MADF,EAEE,QAFF,EAGE,cAHF,EAGwB;AAEtB,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,MAAsB,QAA5B;AACA,QAAM,cAAc,GAAG,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAqB,UAArB,CAAvB;;AACA,MACE,cAAc,KACb,MAAM,KAAK,GAAX,IACE,MAAM,KAAK,GAAX,IAAkB,eAAe,CAAC,QAAhB,CAAyB,OAAO,CAAC,MAAjC,CADpB,IAEE,MAAM,KAAK,GAAX,IAAkB,eAAe,CAAC,QAAhB,CAAyB,OAAO,CAAC,MAAjC,CAFpB,IAGE,MAAM,KAAK,GAAX,IAAkB,OAAO,CAAC,MAAR,KAAmB,MAHvC,IAIC,MAAM,KAAK,GALC,CAAd,KAMC,CAAC,MAAM,CAAC,UAAR,IAAsB,cAAc,GAAG,MAAM,CAAC,UAN/C,CADF,EAQE;AACA,UAAM,OAAO,GAAG,UAAU,CAAC,KAAX,CAAiB,OAAO,CAAC,GAAzB,CAAhB;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,cAAhB;AACA,IAAA,OAAO,CAAC,GAAR,GAAc,OAAO,CAAC,QAAR,EAAd,CAHA,CAKA;AACA;;AACA,QAAI,MAAM,KAAK,GAAf,EAAoB;AAClB,MAAA,OAAO,CAAC,MAAR,GAAiB,KAAjB;AACA,aAAO,OAAO,CAAC,IAAf;AACD;;AAED,WAAO,MAAM,CAAC,WAAP,CACJ,WADI,CACQ,OADR,EAEJ,IAFI,CAEE,GAAD,IAAS,cAAc,CAAC,MAAD,EAAS,GAAT,EAAc,cAAc,GAAG,CAA/B,CAFxB,CAAP;AAGD;;AAED,SAAO,OAAO,CAAC,OAAR,CAAgB,QAAhB,CAAP;AACD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n\n/**\n * Options for how redirect responses are handled.\n */\nexport interface RedirectOptions {\n  /**\n   * When true, redirect responses are followed.  Defaults to true.\n   */\n  handleRedirects: boolean;\n\n  /**\n   * The maximum number of times the redirect URL will be tried before\n   * failing.  Defaults to 20.\n   */\n  maxRetries?: number;\n}\n\nexport const DefaultRedirectOptions: RedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20,\n};\n\n/**\n * Creates a redirect policy, which sends a repeats the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n * @param maximumRetries - Maximum number of redirects to follow.\n * @returns An instance of the {@link RedirectPolicy}\n */\nexport function redirectPolicy(maximumRetries = 20): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    },\n  };\n}\n\n/**\n * Resends the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n */\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly maxRetries = 20) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request)\n      .then((response) => handleRedirect(this, response, 0));\n  }\n}\n\nfunction handleRedirect(\n  policy: RedirectPolicy,\n  response: HttpOperationResponse,\n  currentRetries: number\n): Promise<HttpOperationResponse> {\n  const { request, status } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (\n    locationHeader &&\n    (status === 300 ||\n      (status === 301 && allowedRedirect.includes(request.method)) ||\n      (status === 302 && allowedRedirect.includes(request.method)) ||\n      (status === 303 && request.method === \"POST\") ||\n      status === 307) &&\n    (!policy.maxRetries || currentRetries < policy.maxRetries)\n  ) {\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      delete request.body;\n    }\n\n    return policy._nextPolicy\n      .sendRequest(request)\n      .then((res) => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}