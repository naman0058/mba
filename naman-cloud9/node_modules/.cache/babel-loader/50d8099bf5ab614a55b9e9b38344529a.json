{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __rest } from \"tslib\";\n/**\n * Converts an OperationOptions to a RequestOptionsBase\n *\n * @param opts - OperationOptions object to convert to RequestOptionsBase\n */\n\nexport function operationOptionsToRequestOptionsBase(opts) {\n  const {\n    requestOptions,\n    tracingOptions\n  } = opts,\n        additionalOptions = __rest(opts, [\"requestOptions\", \"tracingOptions\"]);\n\n  let result = additionalOptions;\n\n  if (requestOptions) {\n    result = Object.assign(Object.assign({}, result), requestOptions);\n  }\n\n  if (tracingOptions) {\n    result.tracingContext = tracingOptions.tracingContext; // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.\n\n    result.spanOptions = tracingOptions === null || tracingOptions === void 0 ? void 0 : tracingOptions.spanOptions;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../src/operationOptions.ts"],"names":[],"mappings":"AAAA;AACA;;AAuDA;;;;AAIG;;AACH,OAAM,SAAU,oCAAV,CACJ,IADI,EACG;AAEP,QAAM;AAAE,IAAA,cAAF;AAAkB,IAAA;AAAlB,MAA2D,IAAjE;AAAA,QAA2C,iBAAiB,GAAA,MAAA,CAAK,IAAL,EAAtD,CAAA,gBAAA,EAAA,gBAAA,CAAsD,CAA5D;;AAEA,MAAI,MAAM,GAAuB,iBAAjC;;AAEA,MAAI,cAAJ,EAAoB;AAClB,IAAA,MAAM,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,MAAR,CAAA,EAAmB,cAAnB,CAAN;AACD;;AAED,MAAI,cAAJ,EAAoB;AAClB,IAAA,MAAM,CAAC,cAAP,GAAwB,cAAc,CAAC,cAAvC,CADkB,CAElB;;AACA,IAAA,MAAM,CAAC,WAAP,GAAsB,cAAsB,KAAA,IAAtB,IAAA,cAAc,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAA,cAAc,CAAU,WAA9C;AACD;;AAED,SAAO,MAAP;AACD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestOptionsBase, TransferProgressEvent } from \"./webResource\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * The base options type for all operations.\n */\nexport interface OperationOptions {\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Options used when creating and sending HTTP requests for this operation.\n   */\n  requestOptions?: OperationRequestOptions;\n  /**\n   * Options used when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\n/**\n * Options that allow configuring the handling of HTTP requests made by an SDK operation.\n */\nexport interface OperationRequestOptions {\n  /**\n   * User defined custom request headers that will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n}\n\n/**\n * Converts an OperationOptions to a RequestOptionsBase\n *\n * @param opts - OperationOptions object to convert to RequestOptionsBase\n */\nexport function operationOptionsToRequestOptionsBase<T extends OperationOptions>(\n  opts: T\n): RequestOptionsBase {\n  const { requestOptions, tracingOptions, ...additionalOptions } = opts;\n\n  let result: RequestOptionsBase = additionalOptions;\n\n  if (requestOptions) {\n    result = { ...result, ...requestOptions };\n  }\n\n  if (tracingOptions) {\n    result.tracingContext = tracingOptions.tracingContext;\n    // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.\n    result.spanOptions = (tracingOptions as any)?.spanOptions;\n  }\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}