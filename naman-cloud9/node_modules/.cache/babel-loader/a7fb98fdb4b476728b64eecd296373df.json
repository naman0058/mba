{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a BlockBlob. */\n\nexport class BlockBlob {\n  /**\n   * Initialize a new instance of the class BlockBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing\n   * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put\n   * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a\n   * partial update of the content of a block blob, use the Put Block List operation.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n\n\n  upload(contentLength, body, options) {\n    const operationArguments = {\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, uploadOperationSpec);\n  }\n  /**\n   * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read\n   * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are\n   * not supported with Put Blob from URL; the content of an existing blob is overwritten with the\n   * content of the new blob.  To perform partial updates to a block blobâ€™s contents using a source URL,\n   * use the Put Block from URL API in conjunction with Put Block List.\n   * @param contentLength The length of the request.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n\n\n  putBlobFromUrl(contentLength, copySource, options) {\n    const operationArguments = {\n      contentLength,\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, putBlobFromUrlOperationSpec);\n  }\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n   *                for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n\n\n  stageBlock(blockId, contentLength, body, options) {\n    const operationArguments = {\n      blockId,\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, stageBlockOperationSpec);\n  }\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob where the contents\n   * are read from a URL.\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n   *                for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param options The options parameters.\n   */\n\n\n  stageBlockFromURL(blockId, contentLength, sourceUrl, options) {\n    const operationArguments = {\n      blockId,\n      contentLength,\n      sourceUrl,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, stageBlockFromURLOperationSpec);\n  }\n  /**\n   * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the\n   * blob. In order to be written as part of a blob, a block must have been successfully written to the\n   * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading\n   * only those blocks that have changed, then committing the new and existing blocks together. You can\n   * do this by specifying whether to commit a block from the committed block list or from the\n   * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list\n   * it may belong to.\n   * @param blocks Blob Blocks.\n   * @param options The options parameters.\n   */\n\n\n  commitBlockList(blocks, options) {\n    const operationArguments = {\n      blocks,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, commitBlockListOperationSpec);\n  }\n  /**\n   * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block\n   * blob\n   * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted\n   *                 blocks, or both lists together.\n   * @param options The options parameters.\n   */\n\n\n  getBlockList(listType, options) {\n    const operationArguments = {\n      listType,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getBlockListOperationSpec);\n  }\n\n} // Operation Specifications\n\nconst xmlSerializer = new coreHttp.Serializer(Mappers,\n/* isXml */\ntrue);\nconst serializer = new coreHttp.Serializer(Mappers,\n/* isXml */\nfalse);\nconst uploadOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobUploadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobUploadExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2, Parameters.blobType2],\n  mediaType: \"binary\",\n  serializer\n};\nconst putBlobFromUrlOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.encryptionScope, Parameters.tier, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceIfTags, Parameters.copySource, Parameters.blobTagsString, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.copySourceTags, Parameters.transactionalContentMD5, Parameters.blobType2, Parameters.copySourceBlobProperties],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst stageBlockOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp24, Parameters.blockId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2],\n  mediaType: \"binary\",\n  serializer\n};\nconst stageBlockFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp24, Parameters.blockId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.sourceUrl, Parameters.sourceContentCrc64, Parameters.sourceRange1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst commitBlockListOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobCommitBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobCommitBlockListExceptionHeaders\n    }\n  },\n  requestBody: Parameters.blocks,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp25],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getBlockListOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlockList,\n      headersMapper: Mappers.BlockBlobGetBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobGetBlockListExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.comp25, Parameters.listType],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};","map":{"version":3,"sources":["../../../../../../src/generated/src/operations/blockBlob.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  BlockBlobUploadOptionalParams,\n  BlockBlobUploadResponse,\n  BlockBlobPutBlobFromUrlOptionalParams,\n  BlockBlobPutBlobFromUrlResponse,\n  BlockBlobStageBlockOptionalParams,\n  BlockBlobStageBlockResponse,\n  BlockBlobStageBlockFromURLOptionalParams,\n  BlockBlobStageBlockFromURLResponse,\n  BlockLookupList,\n  BlockBlobCommitBlockListOptionalParams,\n  BlockBlobCommitBlockListResponse,\n  BlockListType,\n  BlockBlobGetBlockListOptionalParams,\n  BlockBlobGetBlockListResponse\n} from \"../models\";\n\n/** Class representing a BlockBlob. */\nexport class BlockBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class BlockBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing\n   * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put\n   * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a\n   * partial update of the content of a block blob, use the Put Block List operation.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  upload(\n    contentLength: number,\n    body: coreHttp.HttpRequestBody,\n    options?: BlockBlobUploadOptionalParams\n  ): Promise<BlockBlobUploadResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      uploadOperationSpec\n    ) as Promise<BlockBlobUploadResponse>;\n  }\n\n  /**\n   * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read\n   * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are\n   * not supported with Put Blob from URL; the content of an existing blob is overwritten with the\n   * content of the new blob.  To perform partial updates to a block blobâ€™s contents using a source URL,\n   * use the Put Block from URL API in conjunction with Put Block List.\n   * @param contentLength The length of the request.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  putBlobFromUrl(\n    contentLength: number,\n    copySource: string,\n    options?: BlockBlobPutBlobFromUrlOptionalParams\n  ): Promise<BlockBlobPutBlobFromUrlResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      putBlobFromUrlOperationSpec\n    ) as Promise<BlockBlobPutBlobFromUrlResponse>;\n  }\n\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n   *                for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  stageBlock(\n    blockId: string,\n    contentLength: number,\n    body: coreHttp.HttpRequestBody,\n    options?: BlockBlobStageBlockOptionalParams\n  ): Promise<BlockBlobStageBlockResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blockId,\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      stageBlockOperationSpec\n    ) as Promise<BlockBlobStageBlockResponse>;\n  }\n\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob where the contents\n   * are read from a URL.\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n   *                for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param options The options parameters.\n   */\n  stageBlockFromURL(\n    blockId: string,\n    contentLength: number,\n    sourceUrl: string,\n    options?: BlockBlobStageBlockFromURLOptionalParams\n  ): Promise<BlockBlobStageBlockFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blockId,\n      contentLength,\n      sourceUrl,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      stageBlockFromURLOperationSpec\n    ) as Promise<BlockBlobStageBlockFromURLResponse>;\n  }\n\n  /**\n   * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the\n   * blob. In order to be written as part of a blob, a block must have been successfully written to the\n   * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading\n   * only those blocks that have changed, then committing the new and existing blocks together. You can\n   * do this by specifying whether to commit a block from the committed block list or from the\n   * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list\n   * it may belong to.\n   * @param blocks Blob Blocks.\n   * @param options The options parameters.\n   */\n  commitBlockList(\n    blocks: BlockLookupList,\n    options?: BlockBlobCommitBlockListOptionalParams\n  ): Promise<BlockBlobCommitBlockListResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blocks,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      commitBlockListOperationSpec\n    ) as Promise<BlockBlobCommitBlockListResponse>;\n  }\n\n  /**\n   * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block\n   * blob\n   * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted\n   *                 blocks, or both lists together.\n   * @param options The options parameters.\n   */\n  getBlockList(\n    listType: BlockListType,\n    options?: BlockBlobGetBlockListOptionalParams\n  ): Promise<BlockBlobGetBlockListResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      listType,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getBlockListOperationSpec\n    ) as Promise<BlockBlobGetBlockListResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst uploadOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobUploadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobUploadExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2,\n    Parameters.blobType2\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst putBlobFromUrlOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceIfTags,\n    Parameters.copySource,\n    Parameters.blobTagsString,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.copySourceTags,\n    Parameters.transactionalContentMD5,\n    Parameters.blobType2,\n    Parameters.copySourceBlobProperties\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst stageBlockOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp24,\n    Parameters.blockId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.encryptionScope,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst stageBlockFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp24,\n    Parameters.blockId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.encryptionScope,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.sourceUrl,\n    Parameters.sourceContentCrc64,\n    Parameters.sourceRange1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst commitBlockListOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobCommitBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobCommitBlockListExceptionHeaders\n    }\n  },\n  requestBody: Parameters.blocks,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp25],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getBlockListOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlockList,\n      headersMapper: Mappers.BlockBlobGetBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobGetBlockListExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.comp25,\n    Parameters.listType\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}