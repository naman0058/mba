{"ast":null,"code":"var _jsxFileName = \"D:\\\\naman-cloud9\\\\naman-cloud9\\\\src\\\\pages\\\\GDrive.js\";\nimport React from 'react';\nimport moment from \"moment-timezone\";\nimport Datetime from \"react-datetime\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faCalendarAlt } from '@fortawesome/free-solid-svg-icons';\nimport { Col, Row, Card, Form, Container, InputGroup } from '@themesberg/react-bootstrap';\nimport Documentation from \"../components/Documentation\";\nexport default class API extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      data1: [],\n      refreshing: false\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:4000/mydrive', {\n      method: 'GET',\n      // mode: 'no-cors',\n      headers: {\n        'Access-Control-Allow-Origin': '*'\n      }\n    }).then(response => response.json()).catch(error => console.error('Error', error)).then(result => {\n      console.log('result', result);\n\n      if (result) {\n        this.setState({\n          refreshing: false,\n          data1: result //setstate of data which is convert in to fetch data and pass them in to component see below\n\n        }); // alert(result[0].timeleft)\n      } else {\n        this.setState({\n          refreshing: false,\n          data1: ['result'] //setstate of data which is convert in to fetch data and pass them in to component see below\n\n        });\n      }\n    });\n  }\n\n  render() {\n    let list = this.state.data1;\n\n    if (list[0] == undefined) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }\n      }, \"Loading...\"));\n    } else if (list[0].id == undefined) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }\n      }, \"No Data Found\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"article\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 7\n        }\n      }, \"Upload GDrive Documents\"), /*#__PURE__*/React.createElement(\"form\", {\n        action: \"http://localhost:4000/insert/gdrive\",\n        method: \"post\",\n        encType: \"multipart/form-data\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"file\",\n        name: \"image\",\n        className: \"form-control\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 1\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        style: {\n          marginTop: 40\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 1\n        }\n      }, \"Submit\")));\n    }\n  }\n\n}\n;","map":{"version":3,"sources":["D:/naman-cloud9/naman-cloud9/src/pages/GDrive.js"],"names":["React","moment","Datetime","FontAwesomeIcon","faSearch","faCalendarAlt","Col","Row","Card","Form","Container","InputGroup","Documentation","API","Component","state","data1","refreshing","componentDidMount","fetch","method","headers","then","response","json","catch","error","console","result","log","setState","render","list","undefined","id","marginTop"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,mCAAxC;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,SAA/B,EAA0CC,UAA1C,QAA4D,6BAA5D;AAEA,OAAOC,aAAP,MAA0B,6BAA1B;AAEA,eAAe,MAAMC,GAAN,SAAkBb,KAAK,CAACc,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAM/CC,KAN+C,GAMvC;AACNC,MAAAA,KAAK,EAAG,EADF;AAENC,MAAAA,UAAU,EAAC;AAFL,KANuC;AAAA;;AAYjDC,EAAAA,iBAAiB,GAAE;AACnBC,IAAAA,KAAK,CAAC,+BAAD,EAAkC;AACnCC,MAAAA,MAAM,EAAE,KAD2B;AAEnC;AACJC,MAAAA,OAAO,EAAE;AACT,uCAA8B;AADrB;AAH8B,KAAlC,CAAL,CAOGC,IAPH,CAOSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAPtB,EAQKC,KARL,CAQYC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CARtB,EASKJ,IATL,CASWM,MAAD,IAAY;AACpBD,MAAAA,OAAO,CAACE,GAAR,CAAY,QAAZ,EAAqBD,MAArB;;AACI,UAAIA,MAAJ,EAAY;AACV,aAAKE,QAAL,CAAc;AACZb,UAAAA,UAAU,EAAE,KADA;AAEZD,UAAAA,KAAK,EAAEY,MAFK,CAEG;;AAFH,SAAd,EADU,CAOV;AAGD,OAVD,MAUO;AACL,aAAKE,QAAL,CAAc;AACZb,UAAAA,UAAU,EAAE,KADA;AAEZD,UAAAA,KAAK,EAAE,CAAC,QAAD,CAFK,CAEO;;AAFP,SAAd;AAID;AACF,KA3BL;AA6BC;;AAEDe,EAAAA,MAAM,GAAE;AAIN,QAAIC,IAAI,GAAG,KAAKjB,KAAL,CAAWC,KAAtB;;AAEA,QAAIgB,IAAI,CAAC,CAAD,CAAJ,IAAWC,SAAf,EAA0B;AAExB,0BACE,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,CADF;AAMD,KARD,MAQO,IAAID,IAAI,CAAC,CAAD,CAAJ,CAAQE,EAAR,IAAcD,SAAlB,EAA6B;AAGlC,0BACE,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADA,CADF;AAMD,KATM,MASA;AAGP,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,eAGE;AAAM,QAAA,MAAM,EAAC,qCAAb;AAAmD,QAAA,MAAM,EAAC,MAA1D;AAAiE,QAAA,OAAO,EAAC,qBAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACN;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,SAAS,EAAC,cAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADM,eAIN;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,iBAAhC;AAAkD,QAAA,KAAK,EAAE;AAACE,UAAAA,SAAS,EAAC;AAAX,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJM,CAHF,CADF;AAcC;AACF;;AArFgD;AAsFhD","sourcesContent":["import React from 'react';\r\nimport moment from \"moment-timezone\";\r\nimport Datetime from \"react-datetime\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch, faCalendarAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { Col, Row, Card, Form, Container, InputGroup } from '@themesberg/react-bootstrap';\r\n\r\nimport Documentation from \"../components/Documentation\";\r\n\r\nexport default class API extends React.Component {\r\n\r\n\r\n\r\n\r\n\r\n  state = {\r\n    data1 : [],\r\n    refreshing:false\r\n}\r\n\r\n\r\ncomponentDidMount(){\r\nfetch('http://localhost:4000/mydrive', {\r\n    method: 'GET',\r\n    // mode: 'no-cors',\r\nheaders: {\r\n'Access-Control-Allow-Origin':'*'\r\n}\r\n  })\r\n  .then((response) => response.json())\r\n    .catch((error) => console.error('Error', error))\r\n    .then((result) => {\r\n  console.log('result',result)\r\n      if (result) {\r\n        this.setState({\r\n          refreshing: false,\r\n          data1: result, //setstate of data which is convert in to fetch data and pass them in to component see below\r\n        });\r\n\r\n     \r\n        // alert(result[0].timeleft)\r\n\r\n\r\n      } else {\r\n        this.setState({\r\n          refreshing: false,\r\n          data1: ['result'], //setstate of data which is convert in to fetch data and pass them in to component see below\r\n        });\r\n      }\r\n    });\r\n\r\n}\r\n\r\nrender(){\r\n\r\n\r\n\r\n  let list = this.state.data1\r\n\r\n  if (list[0] == undefined) {\r\n\r\n    return(\r\n      <>\r\n      <p>Loading...</p>\r\n      </>\r\n    )\r\n\r\n  } else if (list[0].id == undefined) {\r\n    \r\n    \r\n    return(\r\n      <>\r\n      <p>No Data Found</p>\r\n      </>\r\n    )\r\n\r\n  } else {\r\n\r\n\r\n  return (\r\n    <article>\r\n      <p>Upload GDrive Documents</p>\r\n      \r\n      <form action='http://localhost:4000/insert/gdrive' method='post' encType='multipart/form-data'>\r\n<input type='file' name='image' className='form-control'></input>\r\n   \r\n\r\n<button type='submit' className='btn btn-primary' style={{marginTop:40}}>Submit</button>\r\n</form>\r\n        \r\n\r\n    </article>\r\n  );\r\n  }\r\n}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}