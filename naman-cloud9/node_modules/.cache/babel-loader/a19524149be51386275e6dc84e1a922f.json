{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a AppendBlob. */\n\nexport class AppendBlob {\n  /**\n   * Initialize a new instance of the class AppendBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * The Create Append Blob operation creates a new append blob.\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n\n\n  create(contentLength, options) {\n    const operationArguments = {\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, createOperationSpec);\n  }\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob. The\n   * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to\n   * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n\n\n  appendBlock(contentLength, body, options) {\n    const operationArguments = {\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, appendBlockOperationSpec);\n  }\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob where\n   * the contents are read from a source url. The Append Block operation is permitted only if the blob\n   * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version\n   * 2015-02-21 version or later.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n\n\n  appendBlockFromUrl(sourceUrl, contentLength, options) {\n    const operationArguments = {\n      sourceUrl,\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, appendBlockFromUrlOperationSpec);\n  }\n  /**\n   * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version\n   * 2019-12-12 version or later.\n   * @param options The options parameters.\n   */\n\n\n  seal(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, sealOperationSpec);\n  }\n\n} // Operation Specifications\n\nconst xmlSerializer = new coreHttp.Serializer(Mappers,\n/* isXml */\ntrue);\nconst serializer = new coreHttp.Serializer(Mappers,\n/* isXml */\nfalse);\nconst createOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.blobTagsString, Parameters.legalHold1, Parameters.blobType1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst appendBlockOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobAppendBlockExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2, Parameters.maxSize, Parameters.appendPosition],\n  mediaType: \"binary\",\n  serializer\n};\nconst appendBlockFromUrlOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockFromUrlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobAppendBlockFromUrlExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.transactionalContentMD5, Parameters.sourceUrl, Parameters.sourceContentCrc64, Parameters.maxSize, Parameters.appendPosition, Parameters.sourceRange1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst sealOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.AppendBlobSealHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobSealExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp23],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.appendPosition],\n  isXML: true,\n  serializer: xmlSerializer\n};","map":{"version":3,"sources":["../../../../../../src/generated/src/operations/appendBlob.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  AppendBlobCreateOptionalParams,\n  AppendBlobCreateResponse,\n  AppendBlobAppendBlockOptionalParams,\n  AppendBlobAppendBlockResponse,\n  AppendBlobAppendBlockFromUrlOptionalParams,\n  AppendBlobAppendBlockFromUrlResponse,\n  AppendBlobSealOptionalParams,\n  AppendBlobSealResponse\n} from \"../models\";\n\n/** Class representing a AppendBlob. */\nexport class AppendBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class AppendBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Create Append Blob operation creates a new append blob.\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n  create(\n    contentLength: number,\n    options?: AppendBlobCreateOptionalParams\n  ): Promise<AppendBlobCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<AppendBlobCreateResponse>;\n  }\n\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob. The\n   * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to\n   * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  appendBlock(\n    contentLength: number,\n    body: coreHttp.HttpRequestBody,\n    options?: AppendBlobAppendBlockOptionalParams\n  ): Promise<AppendBlobAppendBlockResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      appendBlockOperationSpec\n    ) as Promise<AppendBlobAppendBlockResponse>;\n  }\n\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob where\n   * the contents are read from a source url. The Append Block operation is permitted only if the blob\n   * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version\n   * 2015-02-21 version or later.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n  appendBlockFromUrl(\n    sourceUrl: string,\n    contentLength: number,\n    options?: AppendBlobAppendBlockFromUrlOptionalParams\n  ): Promise<AppendBlobAppendBlockFromUrlResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      sourceUrl,\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      appendBlockFromUrlOperationSpec\n    ) as Promise<AppendBlobAppendBlockFromUrlResponse>;\n  }\n\n  /**\n   * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version\n   * 2019-12-12 version or later.\n   * @param options The options parameters.\n   */\n  seal(\n    options?: AppendBlobSealOptionalParams\n  ): Promise<AppendBlobSealResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      sealOperationSpec\n    ) as Promise<AppendBlobSealResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.blobType1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst appendBlockOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobAppendBlockExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2,\n    Parameters.maxSize,\n    Parameters.appendPosition\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst appendBlockFromUrlOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockFromUrlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobAppendBlockFromUrlExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.transactionalContentMD5,\n    Parameters.sourceUrl,\n    Parameters.sourceContentCrc64,\n    Parameters.maxSize,\n    Parameters.appendPosition,\n    Parameters.sourceRange1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst sealOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.AppendBlobSealHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobSealExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp23],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.appendPosition\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}