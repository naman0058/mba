{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst VERSION = \"00\";\n/**\n * Generates a `SpanContext` given a `traceparent` header value.\n * @param traceParent - Serialized span context data as a `traceparent` header value.\n * @returns The `SpanContext` generated from the `traceparent` value.\n */\n\nexport function extractSpanContextFromTraceParentHeader(traceParentHeader) {\n  const parts = traceParentHeader.split(\"-\");\n\n  if (parts.length !== 4) {\n    return;\n  }\n\n  const [version, traceId, spanId, traceOptions] = parts;\n\n  if (version !== VERSION) {\n    return;\n  }\n\n  const traceFlags = parseInt(traceOptions, 16);\n  const spanContext = {\n    spanId,\n    traceId,\n    traceFlags\n  };\n  return spanContext;\n}\n/**\n * Generates a `traceparent` value given a span context.\n * @param spanContext - Contains context for a specific span.\n * @returns The `spanContext` represented as a `traceparent` value.\n */\n\nexport function getTraceParentHeader(spanContext) {\n  const missingFields = [];\n\n  if (!spanContext.traceId) {\n    missingFields.push(\"traceId\");\n  }\n\n  if (!spanContext.spanId) {\n    missingFields.push(\"spanId\");\n  }\n\n  if (missingFields.length) {\n    return;\n  }\n\n  const flags = spanContext.traceFlags || 0\n  /* NONE */\n  ;\n  const hexFlags = flags.toString(16);\n  const traceFlags = hexFlags.length === 1 ? `0${hexFlags}` : hexFlags; // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n\n  return `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-${traceFlags}`;\n}","map":{"version":3,"sources":["../../../src/utils/traceParentHeader.ts"],"names":[],"mappings":"AAAA;AACA;AAIA,MAAM,OAAO,GAAG,IAAhB;AAEA;;;;AAIG;;AACH,OAAM,SAAU,uCAAV,CACJ,iBADI,EACqB;AAEzB,QAAM,KAAK,GAAG,iBAAiB,CAAC,KAAlB,CAAwB,GAAxB,CAAd;;AAEA,MAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACD;;AAED,QAAM,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,EAA2B,YAA3B,IAA2C,KAAjD;;AAEA,MAAI,OAAO,KAAK,OAAhB,EAAyB;AACvB;AACD;;AAED,QAAM,UAAU,GAAG,QAAQ,CAAC,YAAD,EAAe,EAAf,CAA3B;AAEA,QAAM,WAAW,GAAgB;AAC/B,IAAA,MAD+B;AAE/B,IAAA,OAF+B;AAG/B,IAAA;AAH+B,GAAjC;AAMA,SAAO,WAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,oBAAV,CAA+B,WAA/B,EAAuD;AAC3D,QAAM,aAAa,GAAa,EAAhC;;AACA,MAAI,CAAC,WAAW,CAAC,OAAjB,EAA0B;AACxB,IAAA,aAAa,CAAC,IAAd,CAAmB,SAAnB;AACD;;AACD,MAAI,CAAC,WAAW,CAAC,MAAjB,EAAyB;AACvB,IAAA,aAAa,CAAC,IAAd,CAAmB,QAAnB;AACD;;AAED,MAAI,aAAa,CAAC,MAAlB,EAA0B;AACxB;AACD;;AAED,QAAM,KAAK,GAAG,WAAW,CAAC,UAAZ,IAAsB;AAAA;AAApC;AACA,QAAM,QAAQ,GAAG,KAAK,CAAC,QAAN,CAAe,EAAf,CAAjB;AACA,QAAM,UAAU,GAAG,QAAQ,CAAC,MAAT,KAAoB,CAApB,GAAwB,IAAI,QAAQ,EAApC,GAAyC,QAA5D,CAf2D,CAiB3D;;AACA,SAAO,GAAG,OAAO,IAAI,WAAW,CAAC,OAAO,IAAI,WAAW,CAAC,MAAM,IAAI,UAAU,EAA5E;AACD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SpanContext, TraceFlags } from \"../interfaces\";\n\nconst VERSION = \"00\";\n\n/**\n * Generates a `SpanContext` given a `traceparent` header value.\n * @param traceParent - Serialized span context data as a `traceparent` header value.\n * @returns The `SpanContext` generated from the `traceparent` value.\n */\nexport function extractSpanContextFromTraceParentHeader(\n  traceParentHeader: string\n): SpanContext | undefined {\n  const parts = traceParentHeader.split(\"-\");\n\n  if (parts.length !== 4) {\n    return;\n  }\n\n  const [version, traceId, spanId, traceOptions] = parts;\n\n  if (version !== VERSION) {\n    return;\n  }\n\n  const traceFlags = parseInt(traceOptions, 16);\n\n  const spanContext: SpanContext = {\n    spanId,\n    traceId,\n    traceFlags\n  };\n\n  return spanContext;\n}\n\n/**\n * Generates a `traceparent` value given a span context.\n * @param spanContext - Contains context for a specific span.\n * @returns The `spanContext` represented as a `traceparent` value.\n */\nexport function getTraceParentHeader(spanContext: SpanContext): string | undefined {\n  const missingFields: string[] = [];\n  if (!spanContext.traceId) {\n    missingFields.push(\"traceId\");\n  }\n  if (!spanContext.spanId) {\n    missingFields.push(\"spanId\");\n  }\n\n  if (missingFields.length) {\n    return;\n  }\n\n  const flags = spanContext.traceFlags || TraceFlags.NONE;\n  const hexFlags = flags.toString(16);\n  const traceFlags = hexFlags.length === 1 ? `0${hexFlags}` : hexFlags;\n\n  // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n  return `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-${traceFlags}`;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}