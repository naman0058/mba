{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObject } from \"./object\";\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\n\nexport function isError(e) {\n  if (isObject(e)) {\n    const hasName = typeof e.name === \"string\";\n    const hasMessage = typeof e.message === \"string\";\n    return hasName && hasMessage;\n  }\n\n  return false;\n}\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\n\nexport function getErrorMessage(e) {\n  if (isError(e)) {\n    return e.message;\n  } else {\n    let stringified;\n\n    try {\n      if (typeof e === \"object\" && e) {\n        stringified = JSON.stringify(e);\n      } else {\n        stringified = String(e);\n      }\n    } catch (err) {\n      stringified = \"[unable to stringify input]\";\n    }\n\n    return `Unknown error ${stringified}`;\n  }\n}","map":{"version":3,"sources":["../../src/error.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,QAAT,QAAyB,UAAzB;AAEA;;;AAGG;;AACH,OAAM,SAAU,OAAV,CAAkB,CAAlB,EAA4B;AAChC,MAAI,QAAQ,CAAC,CAAD,CAAZ,EAAiB;AACf,UAAM,OAAO,GAAG,OAAO,CAAC,CAAC,IAAT,KAAkB,QAAlC;AACA,UAAM,UAAU,GAAG,OAAO,CAAC,CAAC,OAAT,KAAqB,QAAxC;AACA,WAAO,OAAO,IAAI,UAAlB;AACD;;AACD,SAAO,KAAP;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,eAAV,CAA0B,CAA1B,EAAoC;AACxC,MAAI,OAAO,CAAC,CAAD,CAAX,EAAgB;AACd,WAAO,CAAC,CAAC,OAAT;AACD,GAFD,MAEO;AACL,QAAI,WAAJ;;AACA,QAAI;AACF,UAAI,OAAO,CAAP,KAAa,QAAb,IAAyB,CAA7B,EAAgC;AAC9B,QAAA,WAAW,GAAG,IAAI,CAAC,SAAL,CAAe,CAAf,CAAd;AACD,OAFD,MAEO;AACL,QAAA,WAAW,GAAG,MAAM,CAAC,CAAD,CAApB;AACD;AACF,KAND,CAME,OAAO,GAAP,EAAiB;AACjB,MAAA,WAAW,GAAG,6BAAd;AACD;;AACD,WAAO,iBAAiB,WAAW,EAAnC;AACD;AACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isObject } from \"./object\";\n\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e: unknown): e is Error {\n  if (isObject(e)) {\n    const hasName = typeof e.name === \"string\";\n    const hasMessage = typeof e.message === \"string\";\n    return hasName && hasMessage;\n  }\n  return false;\n}\n\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nexport function getErrorMessage(e: unknown): string {\n  if (isError(e)) {\n    return e.message;\n  } else {\n    let stringified: string;\n    try {\n      if (typeof e === \"object\" && e) {\n        stringified = JSON.stringify(e);\n      } else {\n        stringified = String(e);\n      }\n    } catch (err: any) {\n      stringified = \"[unable to stringify input]\";\n    }\n    return `Unknown error ${stringified}`;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}