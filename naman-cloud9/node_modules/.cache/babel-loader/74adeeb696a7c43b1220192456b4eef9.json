{"ast":null,"code":"// ./src/azure-storage-blob.ts\n// <snippet_package>\n// THIS IS SAMPLE CODE ONLY - NOT MEANT FOR PRODUCTION USE\nimport { BlobServiceClient } from \"@azure/storage-blob\";\nconst containerName = `uploaded`;\nconst sasToken = process.env.REACT_APP_AZURE_STORAGE_SAS_TOKEN;\nconst storageAccountName = process.env.REACT_APP_AZURE_STORAGE_RESOURCE_NAME; // </snippet_package>\n// <snippet_get_client>\n\nconst uploadUrl = `https://${storageAccountName}.blob.core.windows.net/?${sasToken}`;\nconsole.log(uploadUrl); // get BlobService = notice `?` is pulled out of sasToken - if created in Azure portal\n\nconst blobService = new BlobServiceClient(uploadUrl); // get Container - full public read access\n\nconst containerClient = blobService.getContainerClient(containerName); // </snippet_get_client>\n// <snippet_isStorageConfigured>\n// Feature flag - disable storage feature to app if not configured\n\nexport const isStorageConfigured = () => {\n  return !storageAccountName || !sasToken ? false : true;\n}; // </snippet_isStorageConfigured>\n// <snippet_getBlobsInContainer>\n// return list of blobs in container to display\n\nexport const getBlobsInContainer = async () => {\n  const returnedBlobUrls = []; // get list of blobs in container\n  // eslint-disable-next-line\n\n  for await (const blob of containerClient.listBlobsFlat()) {\n    console.log(`${blob.name}`);\n    const blobItem = {\n      url: `https://${storageAccountName}.blob.core.windows.net/${containerName}/${blob.name}?${sasToken}`,\n      name: blob.name\n    }; // if image is public, just construct URL\n\n    returnedBlobUrls.push(blobItem);\n  }\n\n  return returnedBlobUrls;\n}; // </snippet_getBlobsInContainer>\n\nexport const deleteBlobIfItExists = async blobName => {\n  alert('hi');\n  console.log(blobName);\n  const blobService = new BlobServiceClient(blobName);\n  const containerClient = blobService.getContainerClient(containerName); // include: Delete the base blob and all of its snapshots.\n  // only: Delete only the blob's snapshots and not the blob itself.\n\n  const options = {\n    deleteSnapshots: 'include' // or 'only'\n\n  }; // Create blob client from container client\n\n  const blockBlobClient = await containerClient.getBlockBlobClient(blobName);\n  await blockBlobClient.deleteIfExists(options);\n  console.log(`deleted blob ${blobName}`);\n}; // <snippet_createBlobInContainer>\n\nconst createBlobInContainer = async file => {\n  // create blobClient for container\n  const blobClient = containerClient.getBlockBlobClient(file.name); // set mimetype as determined from browser with file upload control\n\n  const options = {\n    blobHTTPHeaders: {\n      blobContentType: file.type\n    }\n  }; // upload file\n\n  await blobClient.uploadData(file, options);\n}; // </snippet_createBlobInContainer>\n// <snippet_uploadFileToBlob>\n\n\nconst uploadFileToBlob = async file => {\n  if (!file) return; // upload file\n\n  await createBlobInContainer(file);\n}; // </snippet_uploadFileToBlob>\n\n\nexport default uploadFileToBlob;","map":{"version":3,"sources":["D:/naman-cloud9/naman-cloud9/src/pages/azure-storage-blob.js"],"names":["BlobServiceClient","containerName","sasToken","process","env","REACT_APP_AZURE_STORAGE_SAS_TOKEN","storageAccountName","REACT_APP_AZURE_STORAGE_RESOURCE_NAME","uploadUrl","console","log","blobService","containerClient","getContainerClient","isStorageConfigured","getBlobsInContainer","returnedBlobUrls","blob","listBlobsFlat","name","blobItem","url","push","deleteBlobIfItExists","blobName","alert","options","deleteSnapshots","blockBlobClient","getBlockBlobClient","deleteIfExists","createBlobInContainer","file","blobClient","blobHTTPHeaders","blobContentType","type","uploadData","uploadFileToBlob"],"mappings":"AAAA;AAEA;AACA;AACA,SAASA,iBAAT,QAAkC,qBAAlC;AAEA,MAAMC,aAAa,GAAI,UAAvB;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,iCAA7B;AACA,MAAMC,kBAAkB,GAAGH,OAAO,CAACC,GAAR,CAAYG,qCAAvC,C,CACA;AAEA;;AACA,MAAMC,SAAS,GAAI,WAAUF,kBAAmB,2BAA0BJ,QAAS,EAAnF;AACAO,OAAO,CAACC,GAAR,CAAYF,SAAZ,E,CAEA;;AACA,MAAMG,WAAW,GAAG,IAAIX,iBAAJ,CAAsBQ,SAAtB,CAApB,C,CAEA;;AACA,MAAMI,eAAe,GACnBD,WAAW,CAACE,kBAAZ,CAA+BZ,aAA/B,CADF,C,CAEA;AAEA;AACA;;AACA,OAAO,MAAMa,mBAAmB,GAAG,MAAM;AACvC,SAAO,CAACR,kBAAD,IAAuB,CAACJ,QAAxB,GAAmC,KAAnC,GAA2C,IAAlD;AACD,CAFM,C,CAGP;AAEA;AACA;;AACA,OAAO,MAAMa,mBAAmB,GAAG,YAAY;AAC7C,QAAMC,gBAAgB,GAAG,EAAzB,CAD6C,CAG7C;AACA;;AACA,aAAW,MAAMC,IAAjB,IAAyBL,eAAe,CAACM,aAAhB,EAAzB,EAA0D;AACxDT,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEO,IAAI,CAACE,IAAK,EAAzB;AAEA,UAAMC,QAAQ,GAAG;AACfC,MAAAA,GAAG,EAAG,WAAUf,kBAAmB,0BAAyBL,aAAc,IAAGgB,IAAI,CAACE,IAAK,IAAGjB,QAAS,EADpF;AAEfiB,MAAAA,IAAI,EAAEF,IAAI,CAACE;AAFI,KAAjB,CAHwD,CAQxD;;AACAH,IAAAA,gBAAgB,CAACM,IAAjB,CAAsBF,QAAtB;AACD;;AAED,SAAOJ,gBAAP;AACD,CAlBM,C,CAmBP;;AAOA,OAAO,MAAMO,oBAAoB,GAAE,MAAMC,QAAN,IAAiB;AAClDC,EAAAA,KAAK,CAAC,IAAD,CAAL;AAEFhB,EAAAA,OAAO,CAACC,GAAR,CAAYc,QAAZ;AAEA,QAAMb,WAAW,GAAG,IAAIX,iBAAJ,CAAsBwB,QAAtB,CAApB;AAEE,QAAMZ,eAAe,GACrBD,WAAW,CAACE,kBAAZ,CAA+BZ,aAA/B,CADA,CAPkD,CAUlD;AACA;;AACA,QAAMyB,OAAO,GAAG;AACdC,IAAAA,eAAe,EAAE,SADH,CACa;;AADb,GAAhB,CAZkD,CAgBlD;;AACA,QAAMC,eAAe,GAAG,MAAMhB,eAAe,CAACiB,kBAAhB,CAAmCL,QAAnC,CAA9B;AAED,QAAOI,eAAe,CAACE,cAAhB,CAA+BJ,OAA/B,CAAP;AAECjB,EAAAA,OAAO,CAACC,GAAR,CAAa,gBAAec,QAAS,EAArC;AAED,CAvBM,C,CA8BP;;AACA,MAAMO,qBAAqB,GAAG,MAAOC,IAAP,IAAgB;AAC5C;AACA,QAAMC,UAAU,GAAGrB,eAAe,CAACiB,kBAAhB,CAAmCG,IAAI,CAACb,IAAxC,CAAnB,CAF4C,CAI5C;;AACA,QAAMO,OAAO,GAAG;AAAEQ,IAAAA,eAAe,EAAE;AAAEC,MAAAA,eAAe,EAAEH,IAAI,CAACI;AAAxB;AAAnB,GAAhB,CAL4C,CAO5C;;AACA,QAAMH,UAAU,CAACI,UAAX,CAAsBL,IAAtB,EAA4BN,OAA5B,CAAN;AACD,CATD,C,CAUA;AAEA;;;AACA,MAAMY,gBAAgB,GAAG,MAAON,IAAP,IAAgB;AACvC,MAAI,CAACA,IAAL,EAAW,OAD4B,CAGvC;;AACA,QAAMD,qBAAqB,CAACC,IAAD,CAA3B;AACD,CALD,C,CAMA;;;AAEA,eAAeM,gBAAf","sourcesContent":["// ./src/azure-storage-blob.ts\r\n\r\n// <snippet_package>\r\n// THIS IS SAMPLE CODE ONLY - NOT MEANT FOR PRODUCTION USE\r\nimport { BlobServiceClient } from \"@azure/storage-blob\";\r\n\r\nconst containerName = `uploaded`;\r\nconst sasToken = process.env.REACT_APP_AZURE_STORAGE_SAS_TOKEN;\r\nconst storageAccountName = process.env.REACT_APP_AZURE_STORAGE_RESOURCE_NAME;\r\n// </snippet_package>\r\n\r\n// <snippet_get_client>\r\nconst uploadUrl = `https://${storageAccountName}.blob.core.windows.net/?${sasToken}`;\r\nconsole.log(uploadUrl);\r\n\r\n// get BlobService = notice `?` is pulled out of sasToken - if created in Azure portal\r\nconst blobService = new BlobServiceClient(uploadUrl);\r\n\r\n// get Container - full public read access\r\nconst containerClient =\r\n  blobService.getContainerClient(containerName);\r\n// </snippet_get_client>\r\n\r\n// <snippet_isStorageConfigured>\r\n// Feature flag - disable storage feature to app if not configured\r\nexport const isStorageConfigured = () => {\r\n  return !storageAccountName || !sasToken ? false : true;\r\n};\r\n// </snippet_isStorageConfigured>\r\n\r\n// <snippet_getBlobsInContainer>\r\n// return list of blobs in container to display\r\nexport const getBlobsInContainer = async () => {\r\n  const returnedBlobUrls = [];\r\n\r\n  // get list of blobs in container\r\n  // eslint-disable-next-line\r\n  for await (const blob of containerClient.listBlobsFlat()) {\r\n    console.log(`${blob.name}`);\r\n\r\n    const blobItem = {\r\n      url: `https://${storageAccountName}.blob.core.windows.net/${containerName}/${blob.name}?${sasToken}`,\r\n      name: blob.name\r\n    }\r\n\r\n    // if image is public, just construct URL\r\n    returnedBlobUrls.push(blobItem);\r\n  }\r\n\r\n  return returnedBlobUrls;\r\n};\r\n// </snippet_getBlobsInContainer>\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const deleteBlobIfItExists= async(blobName)=>{\r\n  alert('hi')\r\n\r\nconsole.log(blobName)\r\n\r\nconst blobService = new BlobServiceClient(blobName);\r\n\r\n  const containerClient =\r\n  blobService.getContainerClient(containerName);\r\n\r\n  // include: Delete the base blob and all of its snapshots.\r\n  // only: Delete only the blob's snapshots and not the blob itself.\r\n  const options = {\r\n    deleteSnapshots: 'include' // or 'only'\r\n  }\r\n\r\n  // Create blob client from container client\r\n  const blockBlobClient = await containerClient.getBlockBlobClient(blobName);\r\n\r\n await  blockBlobClient.deleteIfExists(options);\r\n\r\n  console.log(`deleted blob ${blobName}`);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// <snippet_createBlobInContainer>\r\nconst createBlobInContainer = async (file) => {\r\n  // create blobClient for container\r\n  const blobClient = containerClient.getBlockBlobClient(file.name);\r\n\r\n  // set mimetype as determined from browser with file upload control\r\n  const options = { blobHTTPHeaders: { blobContentType: file.type } };\r\n\r\n  // upload file\r\n  await blobClient.uploadData(file, options);\r\n};\r\n// </snippet_createBlobInContainer>\r\n\r\n// <snippet_uploadFileToBlob>\r\nconst uploadFileToBlob = async (file) => {\r\n  if (!file) return;\r\n\r\n  // upload file\r\n  await createBlobInContainer(file);\r\n};\r\n// </snippet_uploadFileToBlob>\r\n\r\nexport default uploadFileToBlob;\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}