{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Defines the default token refresh buffer duration.\n */\nexport const TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes\n\n/**\n * Provides an {@link AccessTokenCache} implementation which clears\n * the cached {@link AccessToken}'s after the expiresOnTimestamp has\n * passed.\n *\n * @deprecated No longer used in the bearer authorization policy.\n */\n\nexport class ExpiringAccessTokenCache {\n  /**\n   * Constructs an instance of {@link ExpiringAccessTokenCache} with\n   * an optional expiration buffer time.\n   */\n  constructor() {\n    let tokenRefreshBufferMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : TokenRefreshBufferMs;\n    this.cachedToken = undefined;\n    this.tokenRefreshBufferMs = tokenRefreshBufferMs;\n  }\n  /**\n   * Saves an access token into the internal in-memory cache.\n   * @param accessToken - Access token or undefined to clear the cache.\n   */\n\n\n  setCachedToken(accessToken) {\n    this.cachedToken = accessToken;\n  }\n  /**\n   * Returns the cached access token, or `undefined` if one is not cached or the cached one is expiring soon.\n   */\n\n\n  getCachedToken() {\n    if (this.cachedToken && Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp) {\n      this.cachedToken = undefined;\n    }\n\n    return this.cachedToken;\n  }\n\n}","map":{"version":3,"sources":["../../../src/credentials/accessTokenCache.ts"],"names":[],"mappings":"AAAA;AACA;;AAIA;;AAEG;AACH,OAAO,MAAM,oBAAoB,GAAG,IAAI,EAAJ,GAAS,IAAtC,C,CAA4C;;AAqBnD;;;;;;AAMG;;AACH,OAAM,MAAO,wBAAP,CAA+B;AAInC;;;AAGG;AACH,EAAA,WAAA,GAA+D;AAAA,QAAnD,oBAAmD,uEAApB,oBAAoB;AANvD,SAAA,WAAA,GAA4B,SAA5B;AAON,SAAK,oBAAL,GAA4B,oBAA5B;AACD;AAED;;;AAGG;;;AACH,EAAA,cAAc,CAAC,WAAD,EAAqC;AACjD,SAAK,WAAL,GAAmB,WAAnB;AACD;AAED;;AAEG;;;AACH,EAAA,cAAc,GAAA;AACZ,QACE,KAAK,WAAL,IACA,IAAI,CAAC,GAAL,KAAa,KAAK,oBAAlB,IAA0C,KAAK,WAAL,CAAiB,kBAF7D,EAGE;AACA,WAAK,WAAL,GAAmB,SAAnB;AACD;;AAED,WAAO,KAAK,WAAZ;AACD;;AAhCkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken } from \"@azure/core-auth\";\n\n/**\n * Defines the default token refresh buffer duration.\n */\nexport const TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes\n\n/**\n * Provides a cache for an AccessToken that was that\n * was returned from a TokenCredential.\n */\nexport interface AccessTokenCache {\n  /**\n   * Sets the cached token.\n   *\n   * @param accessToken - The {@link AccessToken} to be cached or null to\n   *        clear the cached token.\n   */\n  setCachedToken(accessToken: AccessToken | undefined): void;\n\n  /**\n   * Returns the cached {@link AccessToken} or undefined if nothing is cached.\n   */\n  getCachedToken(): AccessToken | undefined;\n}\n\n/**\n * Provides an {@link AccessTokenCache} implementation which clears\n * the cached {@link AccessToken}'s after the expiresOnTimestamp has\n * passed.\n *\n * @deprecated No longer used in the bearer authorization policy.\n */\nexport class ExpiringAccessTokenCache implements AccessTokenCache {\n  private tokenRefreshBufferMs: number;\n  private cachedToken?: AccessToken = undefined;\n\n  /**\n   * Constructs an instance of {@link ExpiringAccessTokenCache} with\n   * an optional expiration buffer time.\n   */\n  constructor(tokenRefreshBufferMs: number = TokenRefreshBufferMs) {\n    this.tokenRefreshBufferMs = tokenRefreshBufferMs;\n  }\n\n  /**\n   * Saves an access token into the internal in-memory cache.\n   * @param accessToken - Access token or undefined to clear the cache.\n   */\n  setCachedToken(accessToken: AccessToken | undefined): void {\n    this.cachedToken = accessToken;\n  }\n\n  /**\n   * Returns the cached access token, or `undefined` if one is not cached or the cached one is expiring soon.\n   */\n  getCachedToken(): AccessToken | undefined {\n    if (\n      this.cachedToken &&\n      Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp\n    ) {\n      this.cachedToken = undefined;\n    }\n\n    return this.cachedToken;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}