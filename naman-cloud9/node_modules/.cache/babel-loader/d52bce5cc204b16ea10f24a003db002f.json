{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference path=\"../shims-public.d.ts\" />\nconst listenersMap = new WeakMap();\nconst abortedMap = new WeakMap();\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\n\nexport class AbortSignal {\n  constructor() {\n    /**\n     * onabort event listener.\n     */\n    this.onabort = null;\n    listenersMap.set(this, []);\n    abortedMap.set(this, false);\n  }\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   */\n\n\n  get aborted() {\n    if (!abortedMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    return abortedMap.get(this);\n  }\n  /**\n   * Creates a new AbortSignal instance that will never be aborted.\n   *\n   * @readonly\n   */\n\n\n  static get none() {\n    return new AbortSignal();\n  }\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be added\n   */\n\n\n  addEventListener( // tslint:disable-next-line:variable-name\n  _type, listener) {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this);\n    listeners.push(listener);\n  }\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be removed\n   */\n\n\n  removeEventListener( // tslint:disable-next-line:variable-name\n  _type, listener) {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this);\n    const index = listeners.indexOf(listener);\n\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  }\n  /**\n   * Dispatches a synthetic event to the AbortSignal.\n   */\n\n\n  dispatchEvent(_event) {\n    throw new Error(\"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\");\n  }\n\n}\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n\nexport function abortSignal(signal) {\n  if (signal.aborted) {\n    return;\n  }\n\n  if (signal.onabort) {\n    signal.onabort.call(signal);\n  }\n\n  const listeners = listenersMap.get(signal);\n\n  if (listeners) {\n    // Create a copy of listeners so mutations to the array\n    // (e.g. via removeListener calls) don't affect the listeners\n    // we invoke.\n    listeners.slice().forEach(listener => {\n      listener.call(signal, {\n        type: \"abort\"\n      });\n    });\n  }\n\n  abortedMap.set(signal, true);\n}","map":{"version":3,"sources":["../../src/AbortSignal.ts"],"names":[],"mappings":"AAAA;AACA;AAGA;AAIA,MAAM,YAAY,GAAG,IAAI,OAAJ,EAArB;AACA,MAAM,UAAU,GAAG,IAAI,OAAJ,EAAnB;AA6BA;;;;;;;;;;;;AAYG;;AACH,OAAM,MAAO,WAAP,CAAkB;AACtB,EAAA,WAAA,GAAA;AA2BA;;AAEG;AACI,SAAA,OAAA,GAAwC,IAAxC;AA7BL,IAAA,YAAY,CAAC,GAAb,CAAiB,IAAjB,EAAuB,EAAvB;AACA,IAAA,UAAU,CAAC,GAAX,CAAe,IAAf,EAAqB,KAArB;AACD;AAED;;;;AAIG;;;AACe,MAAP,OAAO,GAAA;AAChB,QAAI,CAAC,UAAU,CAAC,GAAX,CAAe,IAAf,CAAL,EAA2B;AACzB,YAAM,IAAI,SAAJ,CAAc,mDAAd,CAAN;AACD;;AAED,WAAO,UAAU,CAAC,GAAX,CAAe,IAAf,CAAP;AACD;AAED;;;;AAIG;;;AACmB,aAAJ,IAAI,GAAA;AACpB,WAAO,IAAI,WAAJ,EAAP;AACD;AAOD;;;;;AAKG;;;AACI,EAAA,gBAAgB,EACrB;AACA,EAAA,KAFqB,EAGrB,QAHqB,EAG4B;AAEjD,QAAI,CAAC,YAAY,CAAC,GAAb,CAAiB,IAAjB,CAAL,EAA6B;AAC3B,YAAM,IAAI,SAAJ,CAAc,mDAAd,CAAN;AACD;;AAED,UAAM,SAAS,GAAG,YAAY,CAAC,GAAb,CAAiB,IAAjB,CAAlB;AACA,IAAA,SAAS,CAAC,IAAV,CAAe,QAAf;AACD;AAED;;;;;AAKG;;;AACI,EAAA,mBAAmB,EACxB;AACA,EAAA,KAFwB,EAGxB,QAHwB,EAGyB;AAEjD,QAAI,CAAC,YAAY,CAAC,GAAb,CAAiB,IAAjB,CAAL,EAA6B;AAC3B,YAAM,IAAI,SAAJ,CAAc,mDAAd,CAAN;AACD;;AAED,UAAM,SAAS,GAAG,YAAY,CAAC,GAAb,CAAiB,IAAjB,CAAlB;AAEA,UAAM,KAAK,GAAG,SAAS,CAAC,OAAV,CAAkB,QAAlB,CAAd;;AACA,QAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,MAAA,SAAS,CAAC,MAAV,CAAiB,KAAjB,EAAwB,CAAxB;AACD;AACF;AAED;;AAEG;;;AACH,EAAA,aAAa,CAAC,MAAD,EAAc;AACzB,UAAM,IAAI,KAAJ,CACJ,kHADI,CAAN;AAGD;;AAlFqB;AAqFxB;;;;;;;;AAQG;AACH;;AACA,OAAM,SAAU,WAAV,CAAsB,MAAtB,EAAyC;AAC7C,MAAI,MAAM,CAAC,OAAX,EAAoB;AAClB;AACD;;AAED,MAAI,MAAM,CAAC,OAAX,EAAoB;AAClB,IAAA,MAAM,CAAC,OAAP,CAAe,IAAf,CAAoB,MAApB;AACD;;AAED,QAAM,SAAS,GAAG,YAAY,CAAC,GAAb,CAAiB,MAAjB,CAAlB;;AACA,MAAI,SAAJ,EAAe;AACb;AACA;AACA;AACA,IAAA,SAAS,CAAC,KAAV,GAAkB,OAAlB,CAA2B,QAAD,IAAa;AACrC,MAAA,QAAQ,CAAC,IAAT,CAAc,MAAd,EAAsB;AAAE,QAAA,IAAI,EAAE;AAAR,OAAtB;AACD,KAFD;AAGD;;AAED,EAAA,UAAU,CAAC,GAAX,CAAe,MAAf,EAAuB,IAAvB;AACD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../shims-public.d.ts\" />\n\ntype AbortEventListener = (this: AbortSignalLike, ev?: any) => any;\n\nconst listenersMap = new WeakMap<AbortSignal, AbortEventListener[]>();\nconst abortedMap = new WeakMap<AbortSignal, boolean>();\n\n/**\n * Allows the request to be aborted upon firing of the \"abort\" event.\n * Compatible with the browser built-in AbortSignal and common polyfills.\n */\nexport interface AbortSignalLike {\n  /**\n   * Indicates if the signal has already been aborted.\n   */\n  readonly aborted: boolean;\n  /**\n   * Add new \"abort\" event listener, only support \"abort\" event.\n   */\n  addEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   */\n  removeEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n}\n\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\nexport class AbortSignal implements AbortSignalLike {\n  constructor() {\n    listenersMap.set(this, []);\n    abortedMap.set(this, false);\n  }\n\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   */\n  public get aborted(): boolean {\n    if (!abortedMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    return abortedMap.get(this)!;\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will never be aborted.\n   *\n   * @readonly\n   */\n  public static get none(): AbortSignal {\n    return new AbortSignal();\n  }\n\n  /**\n   * onabort event listener.\n   */\n  public onabort: ((ev?: Event) => any) | null = null;\n\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be added\n   */\n  public addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n    listeners.push(listener);\n  }\n\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be removed\n   */\n  public removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Dispatches a synthetic event to the AbortSignal.\n   */\n  dispatchEvent(_event: Event): boolean {\n    throw new Error(\n      \"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\"\n    );\n  }\n}\n\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nexport function abortSignal(signal: AbortSignal): void {\n  if (signal.aborted) {\n    return;\n  }\n\n  if (signal.onabort) {\n    signal.onabort.call(signal);\n  }\n\n  const listeners = listenersMap.get(signal)!;\n  if (listeners) {\n    // Create a copy of listeners so mutations to the array\n    // (e.g. via removeListener calls) don't affect the listeners\n    // we invoke.\n    listeners.slice().forEach((listener) => {\n      listener.call(signal, { type: \"abort\" });\n    });\n  }\n\n  abortedMap.set(signal, true);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}