{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a Service. */\n\nexport class Service {\n  /**\n   * Initialize a new instance of the class Service class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n   * Analytics and CORS (Cross-Origin Resource Sharing) rules\n   * @param blobServiceProperties The StorageService properties.\n   * @param options The options parameters.\n   */\n\n\n  setProperties(blobServiceProperties, options) {\n    const operationArguments = {\n      blobServiceProperties,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setPropertiesOperationSpec);\n  }\n  /**\n   * gets the properties of a storage account's Blob service, including properties for Storage Analytics\n   * and CORS (Cross-Origin Resource Sharing) rules.\n   * @param options The options parameters.\n   */\n\n\n  getProperties(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec);\n  }\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only available on the\n   * secondary location endpoint when read-access geo-redundant replication is enabled for the storage\n   * account.\n   * @param options The options parameters.\n   */\n\n\n  getStatistics(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getStatisticsOperationSpec);\n  }\n  /**\n   * The List Containers Segment operation returns a list of the containers under the specified account\n   * @param options The options parameters.\n   */\n\n\n  listContainersSegment(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, listContainersSegmentOperationSpec);\n  }\n  /**\n   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n   * bearer token authentication.\n   * @param keyInfo Key information\n   * @param options The options parameters.\n   */\n\n\n  getUserDelegationKey(keyInfo, options) {\n    const operationArguments = {\n      keyInfo,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getUserDelegationKeyOperationSpec);\n  }\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n\n\n  getAccountInfo(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec);\n  }\n  /**\n   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n   * @param contentLength The length of the request.\n   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n\n\n  submitBatch(contentLength, multipartContentType, body, options) {\n    const operationArguments = {\n      contentLength,\n      multipartContentType,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, submitBatchOperationSpec);\n  }\n  /**\n   * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a\n   * given search expression.  Filter blobs searches across all containers within a storage account but\n   * can be scoped within the expression to a single container.\n   * @param options The options parameters.\n   */\n\n\n  filterBlobs(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, filterBlobsOperationSpec);\n  }\n\n} // Operation Specifications\n\nconst xmlSerializer = new coreHttp.Serializer(Mappers,\n/* isXml */\ntrue);\nconst setPropertiesOperationSpec = {\n  path: \"/\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ServiceSetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSetPropertiesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.blobServiceProperties,\n  queryParameters: [Parameters.restype, Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceProperties,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.restype, Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getStatisticsOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceStatistics,\n      headersMapper: Mappers.ServiceGetStatisticsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetStatisticsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.restype, Parameters.timeoutInSeconds, Parameters.comp1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listContainersSegmentOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListContainersSegmentResponse,\n      headersMapper: Mappers.ServiceListContainersSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceListContainersSegmentExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.include],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getUserDelegationKeyOperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UserDelegationKey,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.keyInfo,\n  queryParameters: [Parameters.restype, Parameters.timeoutInSeconds, Parameters.comp3],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ServiceGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst submitBatchOperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ServiceSubmitBatchHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSubmitBatchExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.multipartContentType],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst filterBlobsOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FilterBlobSegment,\n      headersMapper: Mappers.ServiceFilterBlobsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceFilterBlobsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.comp5, Parameters.where],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};","map":{"version":3,"sources":["../../../../../../src/generated/src/operations/service.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;AAEH,OAAO,KAAK,QAAZ,MAA0B,kBAA1B;AACA,OAAO,KAAK,OAAZ,MAAyB,mBAAzB;AACA,OAAO,KAAK,UAAZ,MAA4B,sBAA5B;AAsBA;;AACA,OAAM,MAAO,OAAP,CAAc;AAGlB;;;AAGG;AACH,EAAA,WAAA,CAAY,MAAZ,EAAwC;AACtC,SAAK,MAAL,GAAc,MAAd;AACD;AAED;;;;;AAKG;;;AACH,EAAA,aAAa,CACX,qBADW,EAEX,OAFW,EAEiC;AAE5C,UAAM,kBAAkB,GAAgC;AACtD,MAAA,qBADsD;AAEtD,MAAA,OAAO,EAAE,QAAQ,CAAC,oCAAT,CAA8C,OAAO,IAAI,EAAzD;AAF6C,KAAxD;AAIA,WAAO,KAAK,MAAL,CAAY,oBAAZ,CACL,kBADK,EAEL,0BAFK,CAAP;AAID;AAED;;;;AAIG;;;AACH,EAAA,aAAa,CACX,OADW,EACiC;AAE5C,UAAM,kBAAkB,GAAgC;AACtD,MAAA,OAAO,EAAE,QAAQ,CAAC,oCAAT,CAA8C,OAAO,IAAI,EAAzD;AAD6C,KAAxD;AAGA,WAAO,KAAK,MAAL,CAAY,oBAAZ,CACL,kBADK,EAEL,0BAFK,CAAP;AAID;AAED;;;;;AAKG;;;AACH,EAAA,aAAa,CACX,OADW,EACiC;AAE5C,UAAM,kBAAkB,GAAgC;AACtD,MAAA,OAAO,EAAE,QAAQ,CAAC,oCAAT,CAA8C,OAAO,IAAI,EAAzD;AAD6C,KAAxD;AAGA,WAAO,KAAK,MAAL,CAAY,oBAAZ,CACL,kBADK,EAEL,0BAFK,CAAP;AAID;AAED;;;AAGG;;;AACH,EAAA,qBAAqB,CACnB,OADmB,EACiC;AAEpD,UAAM,kBAAkB,GAAgC;AACtD,MAAA,OAAO,EAAE,QAAQ,CAAC,oCAAT,CAA8C,OAAO,IAAI,EAAzD;AAD6C,KAAxD;AAGA,WAAO,KAAK,MAAL,CAAY,oBAAZ,CACL,kBADK,EAEL,kCAFK,CAAP;AAID;AAED;;;;;AAKG;;;AACH,EAAA,oBAAoB,CAClB,OADkB,EAElB,OAFkB,EAEiC;AAEnD,UAAM,kBAAkB,GAAgC;AACtD,MAAA,OADsD;AAEtD,MAAA,OAAO,EAAE,QAAQ,CAAC,oCAAT,CAA8C,OAAO,IAAI,EAAzD;AAF6C,KAAxD;AAIA,WAAO,KAAK,MAAL,CAAY,oBAAZ,CACL,kBADK,EAEL,iCAFK,CAAP;AAID;AAED;;;AAGG;;;AACH,EAAA,cAAc,CACZ,OADY,EACuB;AAEnC,UAAM,kBAAkB,GAAgC;AACtD,MAAA,OAAO,EAAE,QAAQ,CAAC,oCAAT,CAA8C,OAAO,IAAI,EAAzD;AAD6C,KAAxD;AAGA,WAAO,KAAK,MAAL,CAAY,oBAAZ,CACL,kBADK,EAEL,2BAFK,CAAP;AAID;AAED;;;;;;;AAOG;;;AACH,EAAA,WAAW,CACT,aADS,EAET,oBAFS,EAGT,IAHS,EAIT,OAJS,EAIiC;AAE1C,UAAM,kBAAkB,GAAgC;AACtD,MAAA,aADsD;AAEtD,MAAA,oBAFsD;AAGtD,MAAA,IAHsD;AAItD,MAAA,OAAO,EAAE,QAAQ,CAAC,oCAAT,CAA8C,OAAO,IAAI,EAAzD;AAJ6C,KAAxD;AAMA,WAAO,KAAK,MAAL,CAAY,oBAAZ,CACL,kBADK,EAEL,wBAFK,CAAP;AAID;AAED;;;;;AAKG;;;AACH,EAAA,WAAW,CACT,OADS,EACiC;AAE1C,UAAM,kBAAkB,GAAgC;AACtD,MAAA,OAAO,EAAE,QAAQ,CAAC,oCAAT,CAA8C,OAAO,IAAI,EAAzD;AAD6C,KAAxD;AAGA,WAAO,KAAK,MAAL,CAAY,oBAAZ,CACL,kBADK,EAEL,wBAFK,CAAP;AAID;;AAhKiB,C,CAkKpB;;AACA,MAAM,aAAa,GAAG,IAAI,QAAQ,CAAC,UAAb,CAAwB,OAAxB;AAAiC;AAAY,IAA7C,CAAtB;AAEA,MAAM,0BAA0B,GAA2B;AACzD,EAAA,IAAI,EAAE,GADmD;AAEzD,EAAA,UAAU,EAAE,KAF6C;AAGzD,EAAA,SAAS,EAAE;AACT,SAAK;AACH,MAAA,aAAa,EAAE,OAAO,CAAC;AADpB,KADI;AAIT,IAAA,OAAO,EAAE;AACP,MAAA,UAAU,EAAE,OAAO,CAAC,YADb;AAEP,MAAA,aAAa,EAAE,OAAO,CAAC;AAFhB;AAJA,GAH8C;AAYzD,EAAA,WAAW,EAAE,UAAU,CAAC,qBAZiC;AAazD,EAAA,eAAe,EAAE,CACf,UAAU,CAAC,OADI,EAEf,UAAU,CAAC,IAFI,EAGf,UAAU,CAAC,gBAHI,CAbwC;AAkBzD,EAAA,aAAa,EAAE,CAAC,UAAU,CAAC,GAAZ,CAlB0C;AAmBzD,EAAA,gBAAgB,EAAE,CAChB,UAAU,CAAC,WADK,EAEhB,UAAU,CAAC,MAFK,EAGhB,UAAU,CAAC,OAHK,EAIhB,UAAU,CAAC,SAJK,CAnBuC;AAyBzD,EAAA,KAAK,EAAE,IAzBkD;AA0BzD,EAAA,WAAW,EAAE,gCA1B4C;AA2BzD,EAAA,SAAS,EAAE,KA3B8C;AA4BzD,EAAA,UAAU,EAAE;AA5B6C,CAA3D;AA8BA,MAAM,0BAA0B,GAA2B;AACzD,EAAA,IAAI,EAAE,GADmD;AAEzD,EAAA,UAAU,EAAE,KAF6C;AAGzD,EAAA,SAAS,EAAE;AACT,SAAK;AACH,MAAA,UAAU,EAAE,OAAO,CAAC,qBADjB;AAEH,MAAA,aAAa,EAAE,OAAO,CAAC;AAFpB,KADI;AAKT,IAAA,OAAO,EAAE;AACP,MAAA,UAAU,EAAE,OAAO,CAAC,YADb;AAEP,MAAA,aAAa,EAAE,OAAO,CAAC;AAFhB;AALA,GAH8C;AAazD,EAAA,eAAe,EAAE,CACf,UAAU,CAAC,OADI,EAEf,UAAU,CAAC,IAFI,EAGf,UAAU,CAAC,gBAHI,CAbwC;AAkBzD,EAAA,aAAa,EAAE,CAAC,UAAU,CAAC,GAAZ,CAlB0C;AAmBzD,EAAA,gBAAgB,EAAE,CAChB,UAAU,CAAC,OADK,EAEhB,UAAU,CAAC,SAFK,EAGhB,UAAU,CAAC,OAHK,CAnBuC;AAwBzD,EAAA,KAAK,EAAE,IAxBkD;AAyBzD,EAAA,UAAU,EAAE;AAzB6C,CAA3D;AA2BA,MAAM,0BAA0B,GAA2B;AACzD,EAAA,IAAI,EAAE,GADmD;AAEzD,EAAA,UAAU,EAAE,KAF6C;AAGzD,EAAA,SAAS,EAAE;AACT,SAAK;AACH,MAAA,UAAU,EAAE,OAAO,CAAC,qBADjB;AAEH,MAAA,aAAa,EAAE,OAAO,CAAC;AAFpB,KADI;AAKT,IAAA,OAAO,EAAE;AACP,MAAA,UAAU,EAAE,OAAO,CAAC,YADb;AAEP,MAAA,aAAa,EAAE,OAAO,CAAC;AAFhB;AALA,GAH8C;AAazD,EAAA,eAAe,EAAE,CACf,UAAU,CAAC,OADI,EAEf,UAAU,CAAC,gBAFI,EAGf,UAAU,CAAC,KAHI,CAbwC;AAkBzD,EAAA,aAAa,EAAE,CAAC,UAAU,CAAC,GAAZ,CAlB0C;AAmBzD,EAAA,gBAAgB,EAAE,CAChB,UAAU,CAAC,OADK,EAEhB,UAAU,CAAC,SAFK,EAGhB,UAAU,CAAC,OAHK,CAnBuC;AAwBzD,EAAA,KAAK,EAAE,IAxBkD;AAyBzD,EAAA,UAAU,EAAE;AAzB6C,CAA3D;AA2BA,MAAM,kCAAkC,GAA2B;AACjE,EAAA,IAAI,EAAE,GAD2D;AAEjE,EAAA,UAAU,EAAE,KAFqD;AAGjE,EAAA,SAAS,EAAE;AACT,SAAK;AACH,MAAA,UAAU,EAAE,OAAO,CAAC,6BADjB;AAEH,MAAA,aAAa,EAAE,OAAO,CAAC;AAFpB,KADI;AAKT,IAAA,OAAO,EAAE;AACP,MAAA,UAAU,EAAE,OAAO,CAAC,YADb;AAEP,MAAA,aAAa,EAAE,OAAO,CAAC;AAFhB;AALA,GAHsD;AAajE,EAAA,eAAe,EAAE,CACf,UAAU,CAAC,gBADI,EAEf,UAAU,CAAC,KAFI,EAGf,UAAU,CAAC,MAHI,EAIf,UAAU,CAAC,MAJI,EAKf,UAAU,CAAC,WALI,EAMf,UAAU,CAAC,OANI,CAbgD;AAqBjE,EAAA,aAAa,EAAE,CAAC,UAAU,CAAC,GAAZ,CArBkD;AAsBjE,EAAA,gBAAgB,EAAE,CAChB,UAAU,CAAC,OADK,EAEhB,UAAU,CAAC,SAFK,EAGhB,UAAU,CAAC,OAHK,CAtB+C;AA2BjE,EAAA,KAAK,EAAE,IA3B0D;AA4BjE,EAAA,UAAU,EAAE;AA5BqD,CAAnE;AA8BA,MAAM,iCAAiC,GAA2B;AAChE,EAAA,IAAI,EAAE,GAD0D;AAEhE,EAAA,UAAU,EAAE,MAFoD;AAGhE,EAAA,SAAS,EAAE;AACT,SAAK;AACH,MAAA,UAAU,EAAE,OAAO,CAAC,iBADjB;AAEH,MAAA,aAAa,EAAE,OAAO,CAAC;AAFpB,KADI;AAKT,IAAA,OAAO,EAAE;AACP,MAAA,UAAU,EAAE,OAAO,CAAC,YADb;AAEP,MAAA,aAAa,EAAE,OAAO,CAAC;AAFhB;AALA,GAHqD;AAahE,EAAA,WAAW,EAAE,UAAU,CAAC,OAbwC;AAchE,EAAA,eAAe,EAAE,CACf,UAAU,CAAC,OADI,EAEf,UAAU,CAAC,gBAFI,EAGf,UAAU,CAAC,KAHI,CAd+C;AAmBhE,EAAA,aAAa,EAAE,CAAC,UAAU,CAAC,GAAZ,CAnBiD;AAoBhE,EAAA,gBAAgB,EAAE,CAChB,UAAU,CAAC,WADK,EAEhB,UAAU,CAAC,MAFK,EAGhB,UAAU,CAAC,OAHK,EAIhB,UAAU,CAAC,SAJK,CApB8C;AA0BhE,EAAA,KAAK,EAAE,IA1ByD;AA2BhE,EAAA,WAAW,EAAE,gCA3BmD;AA4BhE,EAAA,SAAS,EAAE,KA5BqD;AA6BhE,EAAA,UAAU,EAAE;AA7BoD,CAAlE;AA+BA,MAAM,2BAA2B,GAA2B;AAC1D,EAAA,IAAI,EAAE,GADoD;AAE1D,EAAA,UAAU,EAAE,KAF8C;AAG1D,EAAA,SAAS,EAAE;AACT,SAAK;AACH,MAAA,aAAa,EAAE,OAAO,CAAC;AADpB,KADI;AAIT,IAAA,OAAO,EAAE;AACP,MAAA,UAAU,EAAE,OAAO,CAAC,YADb;AAEP,MAAA,aAAa,EAAE,OAAO,CAAC;AAFhB;AAJA,GAH+C;AAY1D,EAAA,eAAe,EAAE,CAAC,UAAU,CAAC,IAAZ,EAAkB,UAAU,CAAC,QAA7B,CAZyC;AAa1D,EAAA,aAAa,EAAE,CAAC,UAAU,CAAC,GAAZ,CAb2C;AAc1D,EAAA,gBAAgB,EAAE,CAAC,UAAU,CAAC,OAAZ,EAAqB,UAAU,CAAC,OAAhC,CAdwC;AAe1D,EAAA,KAAK,EAAE,IAfmD;AAgB1D,EAAA,UAAU,EAAE;AAhB8C,CAA5D;AAkBA,MAAM,wBAAwB,GAA2B;AACvD,EAAA,IAAI,EAAE,GADiD;AAEvD,EAAA,UAAU,EAAE,MAF2C;AAGvD,EAAA,SAAS,EAAE;AACT,SAAK;AACH,MAAA,UAAU,EAAE;AACV,QAAA,IAAI,EAAE;AAAE,UAAA,IAAI,EAAE;AAAR,SADI;AAEV,QAAA,cAAc,EAAE;AAFN,OADT;AAKH,MAAA,aAAa,EAAE,OAAO,CAAC;AALpB,KADI;AAQT,IAAA,OAAO,EAAE;AACP,MAAA,UAAU,EAAE,OAAO,CAAC,YADb;AAEP,MAAA,aAAa,EAAE,OAAO,CAAC;AAFhB;AARA,GAH4C;AAgBvD,EAAA,WAAW,EAAE,UAAU,CAAC,IAhB+B;AAiBvD,EAAA,eAAe,EAAE,CAAC,UAAU,CAAC,gBAAZ,EAA8B,UAAU,CAAC,KAAzC,CAjBsC;AAkBvD,EAAA,aAAa,EAAE,CAAC,UAAU,CAAC,GAAZ,CAlBwC;AAmBvD,EAAA,gBAAgB,EAAE,CAChB,UAAU,CAAC,WADK,EAEhB,UAAU,CAAC,MAFK,EAGhB,UAAU,CAAC,OAHK,EAIhB,UAAU,CAAC,SAJK,EAKhB,UAAU,CAAC,aALK,EAMhB,UAAU,CAAC,oBANK,CAnBqC;AA2BvD,EAAA,KAAK,EAAE,IA3BgD;AA4BvD,EAAA,WAAW,EAAE,gCA5B0C;AA6BvD,EAAA,SAAS,EAAE,KA7B4C;AA8BvD,EAAA,UAAU,EAAE;AA9B2C,CAAzD;AAgCA,MAAM,wBAAwB,GAA2B;AACvD,EAAA,IAAI,EAAE,GADiD;AAEvD,EAAA,UAAU,EAAE,KAF2C;AAGvD,EAAA,SAAS,EAAE;AACT,SAAK;AACH,MAAA,UAAU,EAAE,OAAO,CAAC,iBADjB;AAEH,MAAA,aAAa,EAAE,OAAO,CAAC;AAFpB,KADI;AAKT,IAAA,OAAO,EAAE;AACP,MAAA,UAAU,EAAE,OAAO,CAAC,YADb;AAEP,MAAA,aAAa,EAAE,OAAO,CAAC;AAFhB;AALA,GAH4C;AAavD,EAAA,eAAe,EAAE,CACf,UAAU,CAAC,gBADI,EAEf,UAAU,CAAC,MAFI,EAGf,UAAU,CAAC,WAHI,EAIf,UAAU,CAAC,KAJI,EAKf,UAAU,CAAC,KALI,CAbsC;AAoBvD,EAAA,aAAa,EAAE,CAAC,UAAU,CAAC,GAAZ,CApBwC;AAqBvD,EAAA,gBAAgB,EAAE,CAChB,UAAU,CAAC,OADK,EAEhB,UAAU,CAAC,SAFK,EAGhB,UAAU,CAAC,OAHK,CArBqC;AA0BvD,EAAA,KAAK,EAAE,IA1BgD;AA2BvD,EAAA,UAAU,EAAE;AA3B2C,CAAzD","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  BlobServiceProperties,\n  ServiceSetPropertiesOptionalParams,\n  ServiceSetPropertiesResponse,\n  ServiceGetPropertiesOptionalParams,\n  ServiceGetPropertiesResponse,\n  ServiceGetStatisticsOptionalParams,\n  ServiceGetStatisticsResponse,\n  ServiceListContainersSegmentOptionalParams,\n  ServiceListContainersSegmentResponse,\n  KeyInfo,\n  ServiceGetUserDelegationKeyOptionalParams,\n  ServiceGetUserDelegationKeyResponse,\n  ServiceGetAccountInfoResponse,\n  ServiceSubmitBatchOptionalParams,\n  ServiceSubmitBatchResponse,\n  ServiceFilterBlobsOptionalParams,\n  ServiceFilterBlobsResponse\n} from \"../models\";\n\n/** Class representing a Service. */\nexport class Service {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class Service class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n   * Analytics and CORS (Cross-Origin Resource Sharing) rules\n   * @param blobServiceProperties The StorageService properties.\n   * @param options The options parameters.\n   */\n  setProperties(\n    blobServiceProperties: BlobServiceProperties,\n    options?: ServiceSetPropertiesOptionalParams\n  ): Promise<ServiceSetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blobServiceProperties,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setPropertiesOperationSpec\n    ) as Promise<ServiceSetPropertiesResponse>;\n  }\n\n  /**\n   * gets the properties of a storage account's Blob service, including properties for Storage Analytics\n   * and CORS (Cross-Origin Resource Sharing) rules.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: ServiceGetPropertiesOptionalParams\n  ): Promise<ServiceGetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPropertiesOperationSpec\n    ) as Promise<ServiceGetPropertiesResponse>;\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only available on the\n   * secondary location endpoint when read-access geo-redundant replication is enabled for the storage\n   * account.\n   * @param options The options parameters.\n   */\n  getStatistics(\n    options?: ServiceGetStatisticsOptionalParams\n  ): Promise<ServiceGetStatisticsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getStatisticsOperationSpec\n    ) as Promise<ServiceGetStatisticsResponse>;\n  }\n\n  /**\n   * The List Containers Segment operation returns a list of the containers under the specified account\n   * @param options The options parameters.\n   */\n  listContainersSegment(\n    options?: ServiceListContainersSegmentOptionalParams\n  ): Promise<ServiceListContainersSegmentResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listContainersSegmentOperationSpec\n    ) as Promise<ServiceListContainersSegmentResponse>;\n  }\n\n  /**\n   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n   * bearer token authentication.\n   * @param keyInfo Key information\n   * @param options The options parameters.\n   */\n  getUserDelegationKey(\n    keyInfo: KeyInfo,\n    options?: ServiceGetUserDelegationKeyOptionalParams\n  ): Promise<ServiceGetUserDelegationKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      keyInfo,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getUserDelegationKeyOperationSpec\n    ) as Promise<ServiceGetUserDelegationKeyResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(\n    options?: coreHttp.OperationOptions\n  ): Promise<ServiceGetAccountInfoResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getAccountInfoOperationSpec\n    ) as Promise<ServiceGetAccountInfoResponse>;\n  }\n\n  /**\n   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n   * @param contentLength The length of the request.\n   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  submitBatch(\n    contentLength: number,\n    multipartContentType: string,\n    body: coreHttp.HttpRequestBody,\n    options?: ServiceSubmitBatchOptionalParams\n  ): Promise<ServiceSubmitBatchResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      multipartContentType,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      submitBatchOperationSpec\n    ) as Promise<ServiceSubmitBatchResponse>;\n  }\n\n  /**\n   * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a\n   * given search expression.  Filter blobs searches across all containers within a storage account but\n   * can be scoped within the expression to a single container.\n   * @param options The options parameters.\n   */\n  filterBlobs(\n    options?: ServiceFilterBlobsOptionalParams\n  ): Promise<ServiceFilterBlobsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      filterBlobsOperationSpec\n    ) as Promise<ServiceFilterBlobsResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\n\nconst setPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ServiceSetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSetPropertiesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.blobServiceProperties,\n  queryParameters: [\n    Parameters.restype,\n    Parameters.comp,\n    Parameters.timeoutInSeconds\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceProperties,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.restype,\n    Parameters.comp,\n    Parameters.timeoutInSeconds\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getStatisticsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceStatistics,\n      headersMapper: Mappers.ServiceGetStatisticsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetStatisticsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.restype,\n    Parameters.timeoutInSeconds,\n    Parameters.comp1\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listContainersSegmentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListContainersSegmentResponse,\n      headersMapper: Mappers.ServiceListContainersSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceListContainersSegmentExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp2,\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.include\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getUserDelegationKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UserDelegationKey,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.keyInfo,\n  queryParameters: [\n    Parameters.restype,\n    Parameters.timeoutInSeconds,\n    Parameters.comp3\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ServiceGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst submitBatchOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ServiceSubmitBatchHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSubmitBatchExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.multipartContentType\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst filterBlobsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FilterBlobSegment,\n      headersMapper: Mappers.ServiceFilterBlobsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceFilterBlobsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.comp5,\n    Parameters.where\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}