{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\n\n\nvar NoopMeter =\n/** @class */\nfunction () {\n  function NoopMeter() {}\n  /**\n   * @see {@link Meter.createHistogram}\n   */\n\n\n  NoopMeter.prototype.createHistogram = function (_name, _options) {\n    return NOOP_HISTOGRAM_METRIC;\n  };\n  /**\n   * @see {@link Meter.createCounter}\n   */\n\n\n  NoopMeter.prototype.createCounter = function (_name, _options) {\n    return NOOP_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.createUpDownCounter}\n   */\n\n\n  NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.createObservableGauge}\n   */\n\n\n  NoopMeter.prototype.createObservableGauge = function (_name, _options) {\n    return NOOP_OBSERVABLE_GAUGE_METRIC;\n  };\n  /**\n   * @see {@link Meter.createObservableCounter}\n   */\n\n\n  NoopMeter.prototype.createObservableCounter = function (_name, _options) {\n    return NOOP_OBSERVABLE_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.createObservableUpDownCounter}\n   */\n\n\n  NoopMeter.prototype.createObservableUpDownCounter = function (_name, _options) {\n    return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n\n\n  NoopMeter.prototype.addBatchObservableCallback = function (_callback, _observables) {};\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n\n\n  NoopMeter.prototype.removeBatchObservableCallback = function (_callback) {};\n\n  return NoopMeter;\n}();\n\nexport { NoopMeter };\n\nvar NoopMetric =\n/** @class */\nfunction () {\n  function NoopMetric() {}\n\n  return NoopMetric;\n}();\n\nexport { NoopMetric };\n\nvar NoopCounterMetric =\n/** @class */\nfunction (_super) {\n  __extends(NoopCounterMetric, _super);\n\n  function NoopCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NoopCounterMetric.prototype.add = function (_value, _attributes) {};\n\n  return NoopCounterMetric;\n}(NoopMetric);\n\nexport { NoopCounterMetric };\n\nvar NoopUpDownCounterMetric =\n/** @class */\nfunction (_super) {\n  __extends(NoopUpDownCounterMetric, _super);\n\n  function NoopUpDownCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NoopUpDownCounterMetric.prototype.add = function (_value, _attributes) {};\n\n  return NoopUpDownCounterMetric;\n}(NoopMetric);\n\nexport { NoopUpDownCounterMetric };\n\nvar NoopHistogramMetric =\n/** @class */\nfunction (_super) {\n  __extends(NoopHistogramMetric, _super);\n\n  function NoopHistogramMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NoopHistogramMetric.prototype.record = function (_value, _attributes) {};\n\n  return NoopHistogramMetric;\n}(NoopMetric);\n\nexport { NoopHistogramMetric };\n\nvar NoopObservableMetric =\n/** @class */\nfunction () {\n  function NoopObservableMetric() {}\n\n  NoopObservableMetric.prototype.addCallback = function (_callback) {};\n\n  NoopObservableMetric.prototype.removeCallback = function (_callback) {};\n\n  return NoopObservableMetric;\n}();\n\nexport { NoopObservableMetric };\n\nvar NoopObservableCounterMetric =\n/** @class */\nfunction (_super) {\n  __extends(NoopObservableCounterMetric, _super);\n\n  function NoopObservableCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return NoopObservableCounterMetric;\n}(NoopObservableMetric);\n\nexport { NoopObservableCounterMetric };\n\nvar NoopObservableGaugeMetric =\n/** @class */\nfunction (_super) {\n  __extends(NoopObservableGaugeMetric, _super);\n\n  function NoopObservableGaugeMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return NoopObservableGaugeMetric;\n}(NoopObservableMetric);\n\nexport { NoopObservableGaugeMetric };\n\nvar NoopObservableUpDownCounterMetric =\n/** @class */\nfunction (_super) {\n  __extends(NoopObservableUpDownCounterMetric, _super);\n\n  function NoopObservableUpDownCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return NoopObservableUpDownCounterMetric;\n}(NoopObservableMetric);\n\nexport { NoopObservableUpDownCounterMetric };\nexport var NOOP_METER = new NoopMeter(); // Synchronous instruments\n\nexport var NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport var NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport var NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric(); // Asynchronous instruments\n\nexport var NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport var NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport var NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();\n/**\n * Create a no-op Meter\n */\n\nexport function createNoopMeter() {\n  return NOOP_METER;\n}","map":{"version":3,"sources":["../../../src/metrics/NoopMeter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter } from './Meter';\nimport {\n  BatchObservableCallback,\n  Counter,\n  Histogram,\n  MetricOptions,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n  UpDownCounter,\n  MetricAttributes,\n  Observable,\n} from './Metric';\n\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nexport class NoopMeter implements Meter {\n  constructor() {}\n\n  /**\n   * @see {@link Meter.createHistogram}\n   */\n  createHistogram(_name: string, _options?: MetricOptions): Histogram {\n    return NOOP_HISTOGRAM_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createCounter}\n   */\n  createCounter(_name: string, _options?: MetricOptions): Counter {\n    return NOOP_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createUpDownCounter}\n   */\n  createUpDownCounter(_name: string, _options?: MetricOptions): UpDownCounter {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableGauge}\n   */\n  createObservableGauge(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableGauge {\n    return NOOP_OBSERVABLE_GAUGE_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableCounter}\n   */\n  createObservableCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableCounter {\n    return NOOP_OBSERVABLE_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableUpDownCounter}\n   */\n  createObservableUpDownCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableUpDownCounter {\n    return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  addBatchObservableCallback(\n    _callback: BatchObservableCallback,\n    _observables: Observable[]\n  ): void {}\n\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  removeBatchObservableCallback(_callback: BatchObservableCallback): void {}\n}\n\nexport class NoopMetric {}\n\nexport class NoopCounterMetric extends NoopMetric implements Counter {\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopUpDownCounterMetric\n  extends NoopMetric\n  implements UpDownCounter\n{\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopHistogramMetric extends NoopMetric implements Histogram {\n  record(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopObservableMetric {\n  addCallback(_callback: ObservableCallback) {}\n\n  removeCallback(_callback: ObservableCallback) {}\n}\n\nexport class NoopObservableCounterMetric\n  extends NoopObservableMetric\n  implements ObservableCounter {}\n\nexport class NoopObservableGaugeMetric\n  extends NoopObservableMetric\n  implements ObservableGauge {}\n\nexport class NoopObservableUpDownCounterMetric\n  extends NoopObservableMetric\n  implements ObservableUpDownCounter {}\n\nexport const NOOP_METER = new NoopMeter();\n\n// Synchronous instruments\nexport const NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport const NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport const NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n\n// Asynchronous instruments\nexport const NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport const NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport const NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC =\n  new NoopObservableUpDownCounterMetric();\n\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter(): Meter {\n  return NOOP_METER;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}