{"ast":null,"code":"var _jsxFileName = \"D:\\\\naman-cloud9\\\\naman-cloud9\\\\src\\\\pages\\\\InputComponent.js\";\nimport React, { useState, useEffect } from 'react';\nimport uploadFileToBlob, { isStorageConfigured, getBlobsInContainer } from './azure-storage-blob';\nimport DisplayImagesFromContainer from './ContainerImages';\nconst storageConfigured = isStorageConfigured();\n\nconst App = () => {\n  // all blobs in container\n  const [blobList, setBlobList] = useState([]); // current file to upload into container\n\n  const [fileSelected, setFileSelected] = useState();\n  const [fileUploaded, setFileUploaded] = useState(''); // UI/form management\n\n  const [uploading, setUploading] = useState(false);\n  const [inputKey, setInputKey] = useState(Math.random().toString(36)); // *** GET FILES IN CONTAINER ***\n\n  useEffect(() => {\n    getBlobsInContainer().then(list => {\n      // prepare UI for results\n      setBlobList(list);\n    });\n  }, [fileUploaded]);\n\n  const onFileChange = event => {\n    // capture file into state\n    setFileSelected(event.target.files[0]);\n  };\n\n  const onFileUpload = async () => {\n    if (fileSelected && (fileSelected === null || fileSelected === void 0 ? void 0 : fileSelected.name)) {\n      // prepare UI\n      setUploading(true); // *** UPLOAD TO AZURE STORAGE ***\n\n      await uploadFileToBlob(fileSelected); // reset state/form\n\n      setFileSelected(null);\n      setFileUploaded(fileSelected.name);\n      setUploading(false);\n      setInputKey(Math.random().toString(36));\n    }\n  };\n\n  const deleteBlobIfItExists = () => {\n    alert('hi');\n  }; // display form\n\n\n  const DisplayForm = () => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: onFileChange,\n    key: inputKey || '',\n    accept: \".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: onFileUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"Upload!\"));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Upload file to Azure Blob Storage\"), storageConfigured && !uploading && DisplayForm(), storageConfigured && uploading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 42\n    }\n  }, \"Uploading\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), storageConfigured && blobList.length > 0 && /*#__PURE__*/React.createElement(DisplayImagesFromContainer, {\n    blobList: blobList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 52\n    }\n  }), !storageConfigured && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 30\n    }\n  }, \"Storage is not configured.\"));\n};\n\nexport default App;","map":{"version":3,"sources":["D:/naman-cloud9/naman-cloud9/src/pages/InputComponent.js"],"names":["React","useState","useEffect","uploadFileToBlob","isStorageConfigured","getBlobsInContainer","DisplayImagesFromContainer","storageConfigured","App","blobList","setBlobList","fileSelected","setFileSelected","fileUploaded","setFileUploaded","uploading","setUploading","inputKey","setInputKey","Math","random","toString","then","list","onFileChange","event","target","files","onFileUpload","name","deleteBlobIfItExists","alert","DisplayForm","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport uploadFileToBlob, { isStorageConfigured, getBlobsInContainer } from './azure-storage-blob';\r\nimport DisplayImagesFromContainer from './ContainerImages';\r\nconst storageConfigured = isStorageConfigured();\r\n\r\nconst App = () => {\r\n  // all blobs in container\r\n  const [blobList, setBlobList] = useState([]);\r\n\r\n  // current file to upload into container\r\n  const [fileSelected, setFileSelected] = useState();\r\n  const [fileUploaded, setFileUploaded] = useState('');\r\n\r\n  // UI/form management\r\n  const [uploading, setUploading] = useState(false);\r\n  const [inputKey, setInputKey] = useState(Math.random().toString(36));\r\n\r\n  // *** GET FILES IN CONTAINER ***\r\n  useEffect(() => {\r\n    getBlobsInContainer().then((list) =>{\r\n      // prepare UI for results\r\n      setBlobList(list);\r\n    })\r\n  }, [fileUploaded]);\r\n\r\n  const onFileChange = (event) => {\r\n    // capture file into state\r\n    setFileSelected(event.target.files[0]);\r\n  };\r\n\r\n  const onFileUpload = async () => {\r\n\r\n    if(fileSelected && fileSelected?.name){\r\n    // prepare UI\r\n    setUploading(true);\r\n\r\n    // *** UPLOAD TO AZURE STORAGE ***\r\n    await uploadFileToBlob(fileSelected);\r\n\r\n    // reset state/form\r\n    setFileSelected(null);\r\n    setFileUploaded(fileSelected.name);\r\n    setUploading(false);\r\n    setInputKey(Math.random().toString(36));\r\n\r\n    }\r\n\r\n  };\r\n\r\n\r\n  const deleteBlobIfItExists=()=>{\r\n    alert('hi')\r\n  }\r\n\r\n  // display form\r\n  const DisplayForm = () => (\r\n    <div>\r\n      <input type=\"file\" onChange={onFileChange} key={inputKey || ''} accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"/>\r\n      <button type=\"submit\" onClick={onFileUpload}>\r\n        Upload!\r\n          </button>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <h1>Upload file to Azure Blob Storage</h1>\r\n      {storageConfigured && !uploading && DisplayForm()}\r\n      {storageConfigured && uploading && <div>Uploading</div>}\r\n      <hr />\r\n      {storageConfigured && blobList.length > 0 && <DisplayImagesFromContainer blobList={blobList}/>}\r\n      {!storageConfigured && <div>Storage is not configured.</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}