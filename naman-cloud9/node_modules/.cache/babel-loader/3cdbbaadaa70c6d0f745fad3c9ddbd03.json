{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { initHttpOperation, pollHttpOperation } from \"../../http/operation\";\nimport { logger } from \"../../logger\";\n\nconst createStateProxy = () => ({\n  initState: config => ({\n    config,\n    isStarted: true\n  }),\n  setCanceled: state => state.isCancelled = true,\n  setError: (state, error) => state.error = error,\n  setResult: (state, result) => state.result = result,\n  setRunning: state => state.isStarted = true,\n  setSucceeded: state => state.isCompleted = true,\n  setFailed: () => {\n    /** empty body */\n  },\n  getError: state => state.error,\n  getResult: state => state.result,\n  isCanceled: state => !!state.isCancelled,\n  isFailed: state => !!state.error,\n  isRunning: state => !!state.isStarted,\n  isSucceeded: state => Boolean(state.isCompleted && !state.isCancelled && !state.error)\n});\n\nexport class GenericPollOperation {\n  constructor(state, lro, setErrorAsResult, lroResourceLocationConfig, processResult, updateState, isDone) {\n    this.state = state;\n    this.lro = lro;\n    this.setErrorAsResult = setErrorAsResult;\n    this.lroResourceLocationConfig = lroResourceLocationConfig;\n    this.processResult = processResult;\n    this.updateState = updateState;\n    this.isDone = isDone;\n  }\n\n  setPollerConfig(pollerConfig) {\n    this.pollerConfig = pollerConfig;\n  }\n\n  async update(options) {\n    var _a;\n\n    const stateProxy = createStateProxy();\n\n    if (!this.state.isStarted) {\n      this.state = Object.assign(Object.assign({}, this.state), await initHttpOperation({\n        lro: this.lro,\n        stateProxy,\n        resourceLocationConfig: this.lroResourceLocationConfig,\n        processResult: this.processResult,\n        setErrorAsResult: this.setErrorAsResult\n      }));\n    }\n\n    const updateState = this.updateState;\n    const isDone = this.isDone;\n\n    if (!this.state.isCompleted && this.state.error === undefined) {\n      await pollHttpOperation({\n        lro: this.lro,\n        state: this.state,\n        stateProxy,\n        processResult: this.processResult,\n        updateState: updateState ? (state, _ref) => {\n          let {\n            rawResponse\n          } = _ref;\n          return updateState(state, rawResponse);\n        } : undefined,\n        isDone: isDone ? (_ref2, state) => {\n          let {\n            flatResponse\n          } = _ref2;\n          return isDone(flatResponse, state);\n        } : undefined,\n        options,\n        setDelay: intervalInMs => {\n          this.pollerConfig.intervalInMs = intervalInMs;\n        },\n        setErrorAsResult: this.setErrorAsResult\n      });\n    }\n\n    (_a = options === null || options === void 0 ? void 0 : options.fireProgress) === null || _a === void 0 ? void 0 : _a.call(options, this.state);\n    return this;\n  }\n\n  async cancel() {\n    logger.error(\"`cancelOperation` is deprecated because it wasn't implemented\");\n    return this;\n  }\n  /**\n   * Serializes the Poller operation.\n   */\n\n\n  toString() {\n    return JSON.stringify({\n      state: this.state\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../../src/legacy/lroEngine/operation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LongRunningOperation, LroResourceLocationConfig, RawResponse } from \"../../http/models\";\nimport { PollOperation, PollOperationState } from \"../pollOperation\";\nimport { RestorableOperationState, StateProxy } from \"../../poller/models\";\nimport { initHttpOperation, pollHttpOperation } from \"../../http/operation\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { PollerConfig } from \"./models\";\nimport { logger } from \"../../logger\";\n\nconst createStateProxy: <TResult, TState extends PollOperationState<TResult>>() => StateProxy<\n  TState,\n  TResult\n> = () => ({\n  initState: (config) => ({ config, isStarted: true } as any),\n  setCanceled: (state) => (state.isCancelled = true),\n  setError: (state, error) => (state.error = error),\n  setResult: (state, result) => (state.result = result),\n  setRunning: (state) => (state.isStarted = true),\n  setSucceeded: (state) => (state.isCompleted = true),\n  setFailed: () => {\n    /** empty body */\n  },\n\n  getError: (state) => state.error,\n  getResult: (state) => state.result,\n  isCanceled: (state) => !!state.isCancelled,\n  isFailed: (state) => !!state.error,\n  isRunning: (state) => !!state.isStarted,\n  isSucceeded: (state) => Boolean(state.isCompleted && !state.isCancelled && !state.error),\n});\n\nexport class GenericPollOperation<TResult, TState extends PollOperationState<TResult>>\n  implements PollOperation<TState, TResult>\n{\n  private pollerConfig?: PollerConfig;\n\n  constructor(\n    public state: RestorableOperationState<TState>,\n    private lro: LongRunningOperation,\n    private setErrorAsResult: boolean,\n    private lroResourceLocationConfig?: LroResourceLocationConfig,\n    private processResult?: (result: unknown, state: TState) => TResult,\n    private updateState?: (state: TState, lastResponse: RawResponse) => void,\n    private isDone?: (lastResponse: TResult, state: TState) => boolean\n  ) {}\n\n  public setPollerConfig(pollerConfig: PollerConfig): void {\n    this.pollerConfig = pollerConfig;\n  }\n\n  async update(options?: {\n    abortSignal?: AbortSignalLike;\n    fireProgress?: (state: TState) => void;\n  }): Promise<PollOperation<TState, TResult>> {\n    const stateProxy = createStateProxy<TResult, TState>();\n    if (!this.state.isStarted) {\n      this.state = {\n        ...this.state,\n        ...(await initHttpOperation({\n          lro: this.lro,\n          stateProxy,\n          resourceLocationConfig: this.lroResourceLocationConfig,\n          processResult: this.processResult,\n          setErrorAsResult: this.setErrorAsResult,\n        })),\n      };\n    }\n    const updateState = this.updateState;\n    const isDone = this.isDone;\n\n    if (!this.state.isCompleted && this.state.error === undefined) {\n      await pollHttpOperation({\n        lro: this.lro,\n        state: this.state,\n        stateProxy,\n        processResult: this.processResult,\n        updateState: updateState\n          ? (state, { rawResponse }) => updateState(state, rawResponse)\n          : undefined,\n        isDone: isDone\n          ? ({ flatResponse }, state) => isDone(flatResponse as TResult, state)\n          : undefined,\n        options,\n        setDelay: (intervalInMs) => {\n          this.pollerConfig!.intervalInMs = intervalInMs;\n        },\n        setErrorAsResult: this.setErrorAsResult,\n      });\n    }\n    options?.fireProgress?.(this.state);\n    return this;\n  }\n\n  async cancel(): Promise<PollOperation<TState, TResult>> {\n    logger.error(\"`cancelOperation` is deprecated because it wasn't implemented\");\n    return this;\n  }\n\n  /**\n   * Serializes the Poller operation.\n   */\n  public toString(): string {\n    return JSON.stringify({\n      state: this.state,\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}