{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getOperationLocation, getOperationStatus, getResourceLocation, getStatusFromInitialResponse, inferLroMode, isOperationError, parseRetryAfter } from \"./operation\";\nimport { buildCreatePoller } from \"../poller/poller\";\n/**\n * Creates a poller that can be used to poll a long-running operation.\n * @param lro - Description of the long-running operation\n * @param options - options to configure the poller\n * @returns an initialized poller\n */\n\nexport async function createHttpPoller(lro, options) {\n  const {\n    resourceLocationConfig,\n    intervalInMs,\n    processResult,\n    restoreFrom,\n    updateState,\n    withOperationLocation,\n    resolveOnUnsuccessful = false\n  } = options || {};\n  return buildCreatePoller({\n    getStatusFromInitialResponse,\n    getStatusFromPollResponse: getOperationStatus,\n    isOperationError,\n    getOperationLocation,\n    getResourceLocation,\n    getPollingInterval: parseRetryAfter,\n    resolveOnUnsuccessful\n  })({\n    init: async () => {\n      const response = await lro.sendInitialRequest();\n      const config = inferLroMode({\n        rawResponse: response.rawResponse,\n        requestPath: lro.requestPath,\n        requestMethod: lro.requestMethod,\n        resourceLocationConfig\n      });\n      return Object.assign({\n        response,\n        operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation,\n        resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation\n      }, (config === null || config === void 0 ? void 0 : config.mode) ? {\n        metadata: {\n          mode: config.mode\n        }\n      } : {});\n    },\n    poll: lro.sendPollRequest\n  }, {\n    intervalInMs,\n    withOperationLocation,\n    restoreFrom,\n    updateState,\n    processResult: processResult ? (_ref, state) => {\n      let {\n        flatResponse\n      } = _ref;\n      return processResult(flatResponse, state);\n    } : _ref2 => {\n      let {\n        flatResponse\n      } = _ref2;\n      return flatResponse;\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/http/poller.ts"],"names":[],"mappings":"AAAA;AACA;AAIA,SACE,oBADF,EAEE,kBAFF,EAGE,mBAHF,EAIE,4BAJF,EAKE,YALF,EAME,gBANF,EAOE,eAPF,QAQO,aARP;AAUA,SAAS,iBAAT,QAAkC,kBAAlC;AAEA;;;;;AAKG;;AACH,OAAO,eAAe,gBAAf,CACL,GADK,EAEL,OAFK,EAE6C;AAElD,QAAM;AACJ,IAAA,sBADI;AAEJ,IAAA,YAFI;AAGJ,IAAA,aAHI;AAIJ,IAAA,WAJI;AAKJ,IAAA,WALI;AAMJ,IAAA,qBANI;AAOJ,IAAA,qBAAqB,GAAG;AAPpB,MAQF,OAAO,IAAI,EARf;AASA,SAAO,iBAAiB,CAA+B;AACrD,IAAA,4BADqD;AAErD,IAAA,yBAAyB,EAAE,kBAF0B;AAGrD,IAAA,gBAHqD;AAIrD,IAAA,oBAJqD;AAKrD,IAAA,mBALqD;AAMrD,IAAA,kBAAkB,EAAE,eANiC;AAOrD,IAAA;AAPqD,GAA/B,CAAjB,CASL;AACE,IAAA,IAAI,EAAE,YAAW;AACf,YAAM,QAAQ,GAAG,MAAM,GAAG,CAAC,kBAAJ,EAAvB;AACA,YAAM,MAAM,GAAG,YAAY,CAAC;AAC1B,QAAA,WAAW,EAAE,QAAQ,CAAC,WADI;AAE1B,QAAA,WAAW,EAAE,GAAG,CAAC,WAFS;AAG1B,QAAA,aAAa,EAAE,GAAG,CAAC,aAHO;AAI1B,QAAA;AAJ0B,OAAD,CAA3B;AAMA,aAAA,MAAA,CAAA,MAAA,CAAA;AACE,QAAA,QADF;AAEE,QAAA,iBAAiB,EAAE,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,iBAF7B;AAGE,QAAA,gBAAgB,EAAE,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE;AAH5B,OAAA,EAIM,CAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAR,IAAe;AAAE,QAAA,QAAQ,EAAE;AAAE,UAAA,IAAI,EAAE,MAAM,CAAC;AAAf;AAAZ,OAAf,GAAqD,EAJ3D,CAAA;AAMD,KAfH;AAgBE,IAAA,IAAI,EAAE,GAAG,CAAC;AAhBZ,GATK,EA2BL;AACE,IAAA,YADF;AAEE,IAAA,qBAFF;AAGE,IAAA,WAHF;AAIE,IAAA,WAJF;AAKE,IAAA,aAAa,EAAE,aAAa,GACxB,OAAmB,KAAnB;AAAA,UAAC;AAAE,QAAA;AAAF,OAAD;AAAA,aAA6B,aAAa,CAAC,YAAD,EAAe,KAAf,CAA1C;AAAA,KADwB,GAExB;AAAA,UAAC;AAAE,QAAA;AAAF,OAAD;AAAA,aAAsB,YAAtB;AAAA;AAPN,GA3BK,CAAP;AAqCD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LongRunningOperation, LroResponse } from \"./models\";\nimport { OperationState, SimplePollerLike } from \"../poller/models\";\nimport {\n  getOperationLocation,\n  getOperationStatus,\n  getResourceLocation,\n  getStatusFromInitialResponse,\n  inferLroMode,\n  isOperationError,\n  parseRetryAfter,\n} from \"./operation\";\nimport { CreateHttpPollerOptions } from \"./models\";\nimport { buildCreatePoller } from \"../poller/poller\";\n\n/**\n * Creates a poller that can be used to poll a long-running operation.\n * @param lro - Description of the long-running operation\n * @param options - options to configure the poller\n * @returns an initialized poller\n */\nexport async function createHttpPoller<TResult, TState extends OperationState<TResult>>(\n  lro: LongRunningOperation,\n  options?: CreateHttpPollerOptions<TResult, TState>\n): Promise<SimplePollerLike<TState, TResult>> {\n  const {\n    resourceLocationConfig,\n    intervalInMs,\n    processResult,\n    restoreFrom,\n    updateState,\n    withOperationLocation,\n    resolveOnUnsuccessful = false,\n  } = options || {};\n  return buildCreatePoller<LroResponse, TResult, TState>({\n    getStatusFromInitialResponse,\n    getStatusFromPollResponse: getOperationStatus,\n    isOperationError,\n    getOperationLocation,\n    getResourceLocation,\n    getPollingInterval: parseRetryAfter,\n    resolveOnUnsuccessful,\n  })(\n    {\n      init: async () => {\n        const response = await lro.sendInitialRequest();\n        const config = inferLroMode({\n          rawResponse: response.rawResponse,\n          requestPath: lro.requestPath,\n          requestMethod: lro.requestMethod,\n          resourceLocationConfig,\n        });\n        return {\n          response,\n          operationLocation: config?.operationLocation,\n          resourceLocation: config?.resourceLocation,\n          ...(config?.mode ? { metadata: { mode: config.mode } } : {}),\n        };\n      },\n      poll: lro.sendPollRequest,\n    },\n    {\n      intervalInMs,\n      withOperationLocation,\n      restoreFrom,\n      updateState,\n      processResult: processResult\n        ? ({ flatResponse }, state) => processResult(flatResponse, state)\n        : ({ flatResponse }) => flatResponse as TResult,\n    }\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}