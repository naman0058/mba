{"ast":null,"code":"import { BlobServiceClient } from '@azure/storage-blob';\nimport { from, Observable } from 'rxjs';\nimport { distinctUntilChanged, scan, startWith } from 'rxjs/operators';\nexport class BlobStorageService {\n  constructor() {\n    this.buildConnectionString = options => {\n      return `BlobEndpoint=${options.storageUri};` + `SharedAccessSignature=${options.storageAccessToken}`;\n    };\n  }\n\n  getContainers(request) {\n    const blobServiceClient = this.buildClient(request);\n    return this.asyncToObservable(blobServiceClient.listContainers());\n  }\n\n  listBlobsInContainer(request) {\n    const containerClient = this.getContainerClient(request);\n    return this.asyncToObservable(containerClient.listBlobsFlat());\n  }\n\n  downloadBlobItem(request) {\n    const blockBlobClient = this.getBlockBlobClient(request);\n    return from(blockBlobClient.download());\n  }\n\n  deleteBlobItem(request) {\n    const blockBlobClient = this.getBlockBlobClient(request);\n    return from(blockBlobClient.delete());\n  }\n\n  uploadToBlobStorage(file, request) {\n    const blockBlobClient = this.getBlockBlobClient(request);\n    return this.uploadFile(blockBlobClient, file);\n  }\n\n  getBlockBlobClient(request) {\n    const containerClient = this.getContainerClient(request);\n    return containerClient.getBlockBlobClient(request.filename);\n  }\n\n  getContainerClient(request) {\n    const blobServiceClient = this.buildClient(request);\n    return blobServiceClient.getContainerClient(request.containerName);\n  }\n\n  buildClient(options) {\n    return BlobServiceClient.fromConnectionString(this.buildConnectionString(options));\n  }\n\n  uploadFile(blockBlobClient, file) {\n    return new Observable(observer => {\n      blockBlobClient.uploadBrowserData(file, {\n        onProgress: this.onProgress(observer),\n        blobHTTPHeaders: {\n          blobContentType: file.type\n        }\n      }).then(this.onUploadComplete(observer, file), this.onUploadError(observer));\n    }).pipe(distinctUntilChanged());\n  }\n\n  onUploadError(observer) {\n    return error => observer.error(error);\n  }\n\n  onUploadComplete(observer, file) {\n    return () => {\n      observer.next(file.size);\n      observer.complete();\n    };\n  }\n\n  onProgress(observer) {\n    return progress => observer.next(progress.loadedBytes);\n  }\n\n  asyncToObservable(iterable) {\n    return new Observable(observer => void (async () => {\n      try {\n        for await (const item of iterable) {\n          if (observer.closed) return;\n          observer.next(item);\n        }\n\n        observer.complete();\n      } catch (e) {\n        observer.error(e);\n      }\n    })()).pipe(scan((items, item) => [...items, item], []), startWith([]));\n  }\n\n}","map":{"version":3,"sources":["D:/naman-cloud9/naman-cloud9/src/pages/BlobStorageService.ts"],"names":["BlobServiceClient","from","Observable","distinctUntilChanged","scan","startWith","BlobStorageService","buildConnectionString","options","storageUri","storageAccessToken","getContainers","request","blobServiceClient","buildClient","asyncToObservable","listContainers","listBlobsInContainer","containerClient","getContainerClient","listBlobsFlat","downloadBlobItem","blockBlobClient","getBlockBlobClient","download","deleteBlobItem","delete","uploadToBlobStorage","file","uploadFile","filename","containerName","fromConnectionString","observer","uploadBrowserData","onProgress","blobHTTPHeaders","blobContentType","type","then","onUploadComplete","onUploadError","pipe","error","next","size","complete","progress","loadedBytes","iterable","item","closed","e","items"],"mappings":"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","sourcesContent":["import { TransferProgressEvent } from '@azure/core-http';\r\nimport { PagedAsyncIterableIterator } from '@azure/core-paging';\r\nimport { BlobServiceClient, BlockBlobClient } from '@azure/storage-blob';\r\nimport { from, Observable, Subscriber } from 'rxjs';\r\nimport { distinctUntilChanged, scan, startWith } from 'rxjs/operators';\r\nimport {\r\n  BlobContainerRequest,\r\n  BlobFileRequest,\r\n  BlobStorageRequest\r\n} from './azure-storage';\r\n\r\nexport class BlobStorageService {\r\n  getContainers(request: BlobStorageRequest) {\r\n    const blobServiceClient = this.buildClient(request);\r\n    return this.asyncToObservable(blobServiceClient.listContainers());\r\n  }\r\n\r\n  listBlobsInContainer(request: BlobContainerRequest) {\r\n    const containerClient = this.getContainerClient(request);\r\n    return this.asyncToObservable(containerClient.listBlobsFlat());\r\n  }\r\n\r\n  downloadBlobItem(request: BlobFileRequest) {\r\n    const blockBlobClient = this.getBlockBlobClient(request);\r\n    return from(blockBlobClient.download());\r\n  }\r\n\r\n  deleteBlobItem(request: BlobFileRequest) {\r\n    const blockBlobClient = this.getBlockBlobClient(request);\r\n    return from(blockBlobClient.delete());\r\n  }\r\n\r\n  uploadToBlobStorage(file: File, request: BlobFileRequest) {\r\n    const blockBlobClient = this.getBlockBlobClient(request);\r\n    return this.uploadFile(blockBlobClient, file);\r\n  }\r\n\r\n  private getBlockBlobClient(request: BlobFileRequest) {\r\n    const containerClient = this.getContainerClient(request);\r\n    return containerClient.getBlockBlobClient(request.filename);\r\n  }\r\n\r\n  private getContainerClient(request: BlobContainerRequest) {\r\n    const blobServiceClient = this.buildClient(request);\r\n    return blobServiceClient.getContainerClient(request.containerName);\r\n  }\r\n\r\n  private buildClient(options: BlobStorageRequest) {\r\n    return BlobServiceClient.fromConnectionString(\r\n      this.buildConnectionString(options)\r\n    );\r\n  }\r\n\r\n  private uploadFile(blockBlobClient: BlockBlobClient, file: File) {\r\n    return new Observable<number>(observer => {\r\n      blockBlobClient\r\n        .uploadBrowserData(file, {\r\n          onProgress: this.onProgress(observer),\r\n          blobHTTPHeaders: {\r\n            blobContentType: file.type\r\n          }\r\n        })\r\n        .then(\r\n          this.onUploadComplete(observer, file),\r\n          this.onUploadError(observer)\r\n        );\r\n    }).pipe(distinctUntilChanged());\r\n  }\r\n\r\n  private onUploadError(observer: Subscriber<number>) {\r\n    return (error: any) => observer.error(error);\r\n  }\r\n\r\n  private onUploadComplete(observer: Subscriber<number>, file: File) {\r\n    return () => {\r\n      observer.next(file.size);\r\n      observer.complete();\r\n    };\r\n  }\r\n\r\n  private onProgress(observer: Subscriber<number>) {\r\n    return (progress: TransferProgressEvent) =>\r\n      observer.next(progress.loadedBytes);\r\n  }\r\n\r\n  private asyncToObservable<T, TService>(\r\n    iterable: PagedAsyncIterableIterator<T, TService>\r\n  ) {\r\n    return new Observable<T>(\r\n      observer =>\r\n        void (async () => {\r\n          try {\r\n            for await (const item of iterable as AsyncIterable<T>) {\r\n              if (observer.closed) return;\r\n              observer.next(item);\r\n            }\r\n            observer.complete();\r\n          } catch (e) {\r\n            observer.error(e);\r\n          }\r\n        })()\r\n    ).pipe(\r\n      scan<T, T[]>((items, item) => [...items, item], []),\r\n      startWith([] as T[])\r\n    );\r\n  }\r\n\r\n  private buildConnectionString = (options: BlobStorageRequest) => {\r\n    return (\r\n      `BlobEndpoint=${options.storageUri};` +\r\n      `SharedAccessSignature=${options.storageAccessToken}`\r\n    );\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}