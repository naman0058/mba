{"ast":null,"code":"import { from, Subject } from 'rxjs';\nimport { map, mergeMap, startWith, switchMap } from 'rxjs/operators';\nexport class BlobUploadsViewStateService {\n  get uploadQueue$() {\n    return this.uploadQueueInner$.asObservable().pipe(mergeMap(files => from(files)));\n  }\n\n  constructor(blobStorage, blobState) {\n    this.blobStorage = blobStorage;\n    this.blobState = blobState;\n    this.uploadQueueInner$ = new Subject();\n    this.uploadedItems$ = this.uploadQueue$.pipe(mergeMap(file => this.uploadFile(file)), this.blobState.scanEntries());\n\n    this.uploadFile = file => this.blobState.getStorageOptionsWithContainer().pipe(switchMap(options => this.blobStorage.uploadToBlobStorage(file, { ...options,\n      filename: file.name + new Date().getTime()\n    }).pipe(this.mapUploadResponse(file, options), this.blobState.finaliseBlobChange(options.containerName))));\n\n    this.mapUploadResponse = (file, options) => source => source.pipe(map(progress => ({\n      filename: file.name,\n      containerName: options.containerName,\n      progress: parseInt((progress / file.size * 100).toString(), 10)\n    })), startWith({\n      filename: file.name,\n      containerName: options.containerName,\n      progress: 0\n    }));\n  }\n\n  uploadItems(files) {\n    this.uploadQueueInner$.next(files);\n  }\n\n}","map":{"version":3,"sources":["D:/naman-cloud9/naman-cloud9/src/pages/BlobUploadsViewState.ts"],"names":["from","Subject","map","mergeMap","startWith","switchMap","BlobUploadsViewStateService","uploadQueue$","uploadQueueInner$","asObservable","pipe","files","constructor","blobStorage","blobState","uploadedItems$","file","uploadFile","scanEntries","getStorageOptionsWithContainer","options","uploadToBlobStorage","filename","name","Date","getTime","mapUploadResponse","finaliseBlobChange","containerName","source","progress","parseInt","size","toString","uploadItems","next"],"mappings":"AAAA,SAASA,IAAT,EAAiCC,OAAjC,QAAgD,MAAhD;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,SAAxB,EAAmCC,SAAnC,QAAoD,gBAApD;AAKA,OAAO,MAAMC,2BAAN,CAAkC;AAQvB,MAAZC,YAAY,GAAG;AACjB,WAAO,KAAKC,iBAAL,CACJC,YADI,GAEJC,IAFI,CAECP,QAAQ,CAACQ,KAAK,IAAIX,IAAI,CAACW,KAAD,CAAd,CAFT,CAAP;AAGD;;AAEDC,EAAAA,WAAW,CACDC,WADC,EAEDC,SAFC,EAGT;AAAA,SAFQD,WAER,GAFQA,WAER;AAAA,SADQC,SACR,GADQA,SACR;AAAA,SAhBMN,iBAgBN,GAhB0B,IAAIP,OAAJ,EAgB1B;AAAA,SAdFc,cAcE,GAde,KAAKR,YAAL,CAAkBG,IAAlB,CACfP,QAAQ,CAACa,IAAI,IAAI,KAAKC,UAAL,CAAgBD,IAAhB,CAAT,CADO,EAEf,KAAKF,SAAL,CAAeI,WAAf,EAFe,CAcf;;AAAA,SAMMD,UANN,GAMoBD,IAAD,IAErB,KAAKF,SAAL,CAAeK,8BAAf,GAAgDT,IAAhD,CACML,SAAS,CAACe,OAAO,IAEb,KAAKP,WAAL,CACDQ,mBADC,CACmBL,IADnB,EACyB,EACzB,GAAGI,OADsB;AAEzBE,MAAAA,QAAQ,EAAEN,IAAI,CAACO,IAAL,GAAY,IAAIC,IAAJ,GAAWC,OAAX;AAFG,KADzB,EAMDf,IANC,CAOA,KAAKgB,iBAAL,CAAuBV,IAAvB,EAA6BI,OAA7B,CAPA,EAQA,KAAKN,SAAL,CAAea,kBAAf,CAAkCP,OAAO,CAACQ,aAA1C,CARA,CAFK,CADf,CARE;;AAAA,SAwBMF,iBAxBN,GAwB0B,CAC1BV,IAD0B,EAE1BI,OAF0B,KAGmBS,MAAM,IACnDA,MAAM,CAACnB,IAAP,CACER,GAAG,CAAC4B,QAAQ,KAAK;AACfR,MAAAA,QAAQ,EAAEN,IAAI,CAACO,IADA;AAEfK,MAAAA,aAAa,EAAER,OAAO,CAACQ,aAFR;AAGfE,MAAAA,QAAQ,EAAEC,QAAQ,CAAC,CAAED,QAAQ,GAAGd,IAAI,CAACgB,IAAjB,GAAyB,GAA1B,EAA+BC,QAA/B,EAAD,EAA4C,EAA5C;AAHH,KAAL,CAAT,CADL,EAME7B,SAAS,CAAC;AACRkB,MAAAA,QAAQ,EAAEN,IAAI,CAACO,IADP;AAERK,MAAAA,aAAa,EAAER,OAAO,CAACQ,aAFf;AAGRE,MAAAA,QAAQ,EAAE;AAHF,KAAD,CANX,CA5BA;AAAE;;AAEJI,EAAAA,WAAW,CAACvB,KAAD,EAAwB;AACjC,SAAKH,iBAAL,CAAuB2B,IAAvB,CAA4BxB,KAA5B;AACD;;AArBsC","sourcesContent":["import { from, OperatorFunction, Subject } from 'rxjs';\r\nimport { map, mergeMap, startWith, switchMap } from 'rxjs/operators';\r\nimport { BlobContainerRequest, BlobItemUpload } from './azure-storage';\r\nimport { BlobSharedViewStateService } from './BlobSharedViewState';\r\nimport { BlobStorageService } from './BlobStorageService';\r\n\r\nexport class BlobUploadsViewStateService {\r\n  private uploadQueueInner$ = new Subject<FileList>();\r\n\r\n  uploadedItems$ = this.uploadQueue$.pipe(\r\n    mergeMap(file => this.uploadFile(file)),\r\n    this.blobState.scanEntries()\r\n  );\r\n\r\n  get uploadQueue$() {\r\n    return this.uploadQueueInner$\r\n      .asObservable()\r\n      .pipe(mergeMap(files => from(files)));\r\n  }\r\n\r\n  constructor(\r\n    private blobStorage: BlobStorageService,\r\n    private blobState: BlobSharedViewStateService\r\n  ) {}\r\n\r\n  uploadItems(files: FileList): void {\r\n    this.uploadQueueInner$.next(files);\r\n  }\r\n\r\n  private uploadFile = (file: File) =>\r\n\r\n  this.blobState.getStorageOptionsWithContainer().pipe(\r\n        switchMap(options =>\r\n\r\n            this.blobStorage\r\n          .uploadToBlobStorage(file, {\r\n            ...options,\r\n            filename: file.name + new Date().getTime()\r\n            \r\n          })\r\n          .pipe(\r\n            this.mapUploadResponse(file, options),\r\n            this.blobState.finaliseBlobChange(options.containerName)\r\n          )\r\n      )\r\n    );\r\n\r\n  private mapUploadResponse = (\r\n    file: File,\r\n    options: BlobContainerRequest\r\n  ): OperatorFunction<number, BlobItemUpload> => source =>\r\n    source.pipe(\r\n      map(progress => ({\r\n        filename: file.name,\r\n        containerName: options.containerName,\r\n        progress: parseInt(((progress / file.size) * 100).toString(), 10)\r\n      })),\r\n      startWith({\r\n        filename: file.name,\r\n        containerName: options.containerName,\r\n        progress: 0\r\n      })\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}