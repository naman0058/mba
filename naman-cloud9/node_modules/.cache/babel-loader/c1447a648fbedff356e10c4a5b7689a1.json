{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { escapeURLPath, getURLScheme, iEqual, getAccountNameFromUrl } from \"./utils/utils.common\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { isTokenCredential, isNode } from \"@azure/core-http\";\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\n\nexport class StorageClient {\n  /**\n   * Creates an instance of StorageClient.\n   * @param url - url to resource\n   * @param pipeline - request policy pipeline.\n   */\n  constructor(url, pipeline) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.accountName = getAccountNameFromUrl(url);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageClientContext(this.url, pipeline.toServiceClientOptions());\n    this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n    this.credential = new AnonymousCredential();\n\n    for (const factory of this.pipeline.factories) {\n      if (isNode && factory instanceof StorageSharedKeyCredential || factory instanceof AnonymousCredential) {\n        this.credential = factory;\n      } else if (isTokenCredential(factory.credential)) {\n        // Only works if the factory has been attached a \"credential\" property.\n        // We do that in newPipeline() when using TokenCredential.\n        this.credential = factory.credential;\n      }\n    } // Override protocol layer's default content-type\n\n\n    const storageClientContext = this.storageClientContext;\n    storageClientContext.requestContentType = undefined;\n  }\n\n}","map":{"version":3,"sources":["../../../src/StorageClient.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,oBAAT,QAAqC,sCAArC;AAEA,SAAS,aAAT,EAAwB,YAAxB,EAAsC,MAAtC,EAA8C,qBAA9C,QAA2E,sBAA3E;AACA,SAAS,mBAAT,QAAoC,mCAApC;AACA,SAAS,0BAAT,QAA2C,0CAA3C;AACA,SAA0B,iBAA1B,EAA6C,MAA7C,QAA2D,kBAA3D;AAaA;;;AAGG;;AACH,OAAM,MAAgB,aAAhB,CAA6B;AAyBjC;;;;AAIG;AACH,EAAA,WAAA,CAAsB,GAAtB,EAAmC,QAAnC,EAAyD;AACvD;AACA,SAAK,GAAL,GAAW,aAAa,CAAC,GAAD,CAAxB;AACA,SAAK,WAAL,GAAmB,qBAAqB,CAAC,GAAD,CAAxC;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,oBAAL,GAA4B,IAAI,oBAAJ,CAC1B,KAAK,GADqB,EAE1B,QAAQ,CAAC,sBAAT,EAF0B,CAA5B;AAKA,SAAK,OAAL,GAAe,MAAM,CAAC,YAAY,CAAC,KAAK,GAAN,CAAZ,IAA0B,EAA3B,EAA+B,OAA/B,CAArB;AAEA,SAAK,UAAL,GAAkB,IAAI,mBAAJ,EAAlB;;AACA,SAAK,MAAM,OAAX,IAAsB,KAAK,QAAL,CAAc,SAApC,EAA+C;AAC7C,UACG,MAAM,IAAI,OAAO,YAAY,0BAA9B,IACA,OAAO,YAAY,mBAFrB,EAGE;AACA,aAAK,UAAL,GAAkB,OAAlB;AACD,OALD,MAKO,IAAI,iBAAiB,CAAE,OAAe,CAAC,UAAlB,CAArB,EAAoD;AACzD;AACA;AACA,aAAK,UAAL,GAAmB,OAAe,CAAC,UAAnC;AACD;AACF,KAxBsD,CA0BvD;;;AACA,UAAM,oBAAoB,GAAG,KAAK,oBAAlC;AACA,IAAA,oBAAoB,CAAC,kBAArB,GAA0C,SAA1C;AACD;;AA3DgC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { PipelineLike } from \"./Pipeline\";\nimport { escapeURLPath, getURLScheme, iEqual, getAccountNameFromUrl } from \"./utils/utils.common\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { TokenCredential, isTokenCredential, isNode } from \"@azure/core-http\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * An interface for options common to every remote operation.\n */\nexport interface CommonOptions {\n  /**\n   * Options to configure spans created when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nexport abstract class StorageClient {\n  /**\n   * Encoded URL string value.\n   */\n  public readonly url: string;\n  public readonly accountName: string;\n  /**\n   * Request policy pipeline.\n   *\n   * @internal\n   */\n  protected readonly pipeline: PipelineLike;\n  /**\n   * Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   */\n  public readonly credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n  /**\n   * StorageClient is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator.\n   */\n  protected readonly storageClientContext: StorageClientContext;\n  /**\n   */\n  protected readonly isHttps: boolean;\n\n  /**\n   * Creates an instance of StorageClient.\n   * @param url - url to resource\n   * @param pipeline - request policy pipeline.\n   */\n  protected constructor(url: string, pipeline: PipelineLike) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.accountName = getAccountNameFromUrl(url);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageClientContext(\n      this.url,\n      pipeline.toServiceClientOptions()\n    );\n\n    this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n\n    this.credential = new AnonymousCredential();\n    for (const factory of this.pipeline.factories) {\n      if (\n        (isNode && factory instanceof StorageSharedKeyCredential) ||\n        factory instanceof AnonymousCredential\n      ) {\n        this.credential = factory;\n      } else if (isTokenCredential((factory as any).credential)) {\n        // Only works if the factory has been attached a \"credential\" property.\n        // We do that in newPipeline() when using TokenCredential.\n        this.credential = (factory as any).credential;\n      }\n    }\n\n    // Override protocol layer's default content-type\n    const storageClientContext = this.storageClientContext as any;\n    storageClientContext.requestContentType = undefined;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}