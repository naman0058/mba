{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ipRangeToString } from \"./SasIPRange\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\n/**\n * Protocols for generated SAS.\n */\n\nexport var SASProtocol;\n\n(function (SASProtocol) {\n  /**\n   * Protocol that allows HTTPS only\n   */\n  SASProtocol[\"Https\"] = \"https\";\n  /**\n   * Protocol that allows both HTTPS and HTTP\n   */\n\n  SASProtocol[\"HttpsAndHttp\"] = \"https,http\";\n})(SASProtocol || (SASProtocol = {}));\n/**\n * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly\n * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link BlobSASSignatureValues}\n * types. Once generated, it can be encoded into a {@link String} and appended to a URL directly (though caution should\n * be taken here in case there are existing query parameters, which might affect the appropriate means of appending\n * these query parameters).\n *\n * NOTE: Instances of this class are immutable.\n */\n\n\nexport class SASQueryParameters {\n  constructor(version, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, userDelegationKey, preauthorizedAgentObjectId, correlationId, encryptionScope) {\n    this.version = version;\n    this.signature = signature;\n\n    if (permissionsOrOptions !== undefined && typeof permissionsOrOptions !== \"string\") {\n      // SASQueryParametersOptions\n      this.permissions = permissionsOrOptions.permissions;\n      this.services = permissionsOrOptions.services;\n      this.resourceTypes = permissionsOrOptions.resourceTypes;\n      this.protocol = permissionsOrOptions.protocol;\n      this.startsOn = permissionsOrOptions.startsOn;\n      this.expiresOn = permissionsOrOptions.expiresOn;\n      this.ipRangeInner = permissionsOrOptions.ipRange;\n      this.identifier = permissionsOrOptions.identifier;\n      this.encryptionScope = permissionsOrOptions.encryptionScope;\n      this.resource = permissionsOrOptions.resource;\n      this.cacheControl = permissionsOrOptions.cacheControl;\n      this.contentDisposition = permissionsOrOptions.contentDisposition;\n      this.contentEncoding = permissionsOrOptions.contentEncoding;\n      this.contentLanguage = permissionsOrOptions.contentLanguage;\n      this.contentType = permissionsOrOptions.contentType;\n\n      if (permissionsOrOptions.userDelegationKey) {\n        this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;\n        this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;\n        this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;\n        this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;\n        this.signedService = permissionsOrOptions.userDelegationKey.signedService;\n        this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;\n        this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;\n        this.correlationId = permissionsOrOptions.correlationId;\n      }\n    } else {\n      this.services = services;\n      this.resourceTypes = resourceTypes;\n      this.expiresOn = expiresOn;\n      this.permissions = permissionsOrOptions;\n      this.protocol = protocol;\n      this.startsOn = startsOn;\n      this.ipRangeInner = ipRange;\n      this.encryptionScope = encryptionScope;\n      this.identifier = identifier;\n      this.resource = resource;\n      this.cacheControl = cacheControl;\n      this.contentDisposition = contentDisposition;\n      this.contentEncoding = contentEncoding;\n      this.contentLanguage = contentLanguage;\n      this.contentType = contentType;\n\n      if (userDelegationKey) {\n        this.signedOid = userDelegationKey.signedObjectId;\n        this.signedTenantId = userDelegationKey.signedTenantId;\n        this.signedStartsOn = userDelegationKey.signedStartsOn;\n        this.signedExpiresOn = userDelegationKey.signedExpiresOn;\n        this.signedService = userDelegationKey.signedService;\n        this.signedVersion = userDelegationKey.signedVersion;\n        this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;\n        this.correlationId = correlationId;\n      }\n    }\n  }\n  /**\n   * Optional. IP range allowed for this SAS.\n   *\n   * @readonly\n   */\n\n\n  get ipRange() {\n    if (this.ipRangeInner) {\n      return {\n        end: this.ipRangeInner.end,\n        start: this.ipRangeInner.start\n      };\n    }\n\n    return undefined;\n  }\n  /**\n   * Encodes all SAS query parameters into a string that can be appended to a URL.\n   *\n   */\n\n\n  toString() {\n    const params = [\"sv\", \"ss\", \"srt\", \"spr\", \"st\", \"se\", \"sip\", \"si\", \"ses\", \"skoid\", \"sktid\", \"skt\", \"ske\", \"sks\", \"skv\", \"sr\", \"sp\", \"sig\", \"rscc\", \"rscd\", \"rsce\", \"rscl\", \"rsct\", \"saoid\", \"scid\"];\n    const queries = [];\n\n    for (const param of params) {\n      switch (param) {\n        case \"sv\":\n          this.tryAppendQueryParameter(queries, param, this.version);\n          break;\n\n        case \"ss\":\n          this.tryAppendQueryParameter(queries, param, this.services);\n          break;\n\n        case \"srt\":\n          this.tryAppendQueryParameter(queries, param, this.resourceTypes);\n          break;\n\n        case \"spr\":\n          this.tryAppendQueryParameter(queries, param, this.protocol);\n          break;\n\n        case \"st\":\n          this.tryAppendQueryParameter(queries, param, this.startsOn ? truncatedISO8061Date(this.startsOn, false) : undefined);\n          break;\n\n        case \"se\":\n          this.tryAppendQueryParameter(queries, param, this.expiresOn ? truncatedISO8061Date(this.expiresOn, false) : undefined);\n          break;\n\n        case \"sip\":\n          this.tryAppendQueryParameter(queries, param, this.ipRange ? ipRangeToString(this.ipRange) : undefined);\n          break;\n\n        case \"si\":\n          this.tryAppendQueryParameter(queries, param, this.identifier);\n          break;\n\n        case \"ses\":\n          this.tryAppendQueryParameter(queries, param, this.encryptionScope);\n          break;\n\n        case \"skoid\":\n          // Signed object ID\n          this.tryAppendQueryParameter(queries, param, this.signedOid);\n          break;\n\n        case \"sktid\":\n          // Signed tenant ID\n          this.tryAppendQueryParameter(queries, param, this.signedTenantId);\n          break;\n\n        case \"skt\":\n          // Signed key start time\n          this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? truncatedISO8061Date(this.signedStartsOn, false) : undefined);\n          break;\n\n        case \"ske\":\n          // Signed key expiry time\n          this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? truncatedISO8061Date(this.signedExpiresOn, false) : undefined);\n          break;\n\n        case \"sks\":\n          // Signed key service\n          this.tryAppendQueryParameter(queries, param, this.signedService);\n          break;\n\n        case \"skv\":\n          // Signed key version\n          this.tryAppendQueryParameter(queries, param, this.signedVersion);\n          break;\n\n        case \"sr\":\n          this.tryAppendQueryParameter(queries, param, this.resource);\n          break;\n\n        case \"sp\":\n          this.tryAppendQueryParameter(queries, param, this.permissions);\n          break;\n\n        case \"sig\":\n          this.tryAppendQueryParameter(queries, param, this.signature);\n          break;\n\n        case \"rscc\":\n          this.tryAppendQueryParameter(queries, param, this.cacheControl);\n          break;\n\n        case \"rscd\":\n          this.tryAppendQueryParameter(queries, param, this.contentDisposition);\n          break;\n\n        case \"rsce\":\n          this.tryAppendQueryParameter(queries, param, this.contentEncoding);\n          break;\n\n        case \"rscl\":\n          this.tryAppendQueryParameter(queries, param, this.contentLanguage);\n          break;\n\n        case \"rsct\":\n          this.tryAppendQueryParameter(queries, param, this.contentType);\n          break;\n\n        case \"saoid\":\n          this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);\n          break;\n\n        case \"scid\":\n          this.tryAppendQueryParameter(queries, param, this.correlationId);\n          break;\n      }\n    }\n\n    return queries.join(\"&\");\n  }\n  /**\n   * A private helper method used to filter and append query key/value pairs into an array.\n   *\n   * @param queries -\n   * @param key -\n   * @param value -\n   */\n\n\n  tryAppendQueryParameter(queries, key, value) {\n    if (!value) {\n      return;\n    }\n\n    key = encodeURIComponent(key);\n    value = encodeURIComponent(value);\n\n    if (key.length > 0 && value.length > 0) {\n      queries.push(`${key}=${value}`);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../../src/sas/SASQueryParameters.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SasIPRange, ipRangeToString } from \"./SasIPRange\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\nimport { UserDelegationKey } from \"../BlobServiceClient\";\n\n/**\n * Protocols for generated SAS.\n */\nexport enum SASProtocol {\n  /**\n   * Protocol that allows HTTPS only\n   */\n  Https = \"https\",\n\n  /**\n   * Protocol that allows both HTTPS and HTTP\n   */\n  HttpsAndHttp = \"https,http\",\n}\n\n/**\n * Options to construct {@link SASQueryParameters}.\n */\nexport interface SASQueryParametersOptions {\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to {@link AccountSASPermissions}, {@link BlobSASPermissions}, or {@link ContainerSASPermissions} for\n   * more details.\n   */\n  permissions?: string;\n  /**\n   * Optional. The storage services being accessed (only for Account SAS). Please refer to {@link AccountSASServices}\n   * for more details.\n   */\n  services?: string;\n  /**\n   * Optional. The storage resource types being accessed (only for Account SAS). Please refer to\n   * {@link AccountSASResourceTypes} for more details.\n   */\n  resourceTypes?: string;\n  /**\n   * Optional. The allowed HTTP protocol(s).\n   */\n  protocol?: SASProtocol;\n  /**\n   * Optional. The start time for this SAS token.\n   */\n  startsOn?: Date;\n  /**\n   * Optional only when identifier is provided. The expiry time for this SAS token.\n   */\n  expiresOn?: Date;\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   */\n  ipRange?: SasIPRange;\n  /**\n   * Optional. The signed identifier (only for {@link BlobSASSignatureValues}).\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  identifier?: string;\n  /**\n   * Optional. Encryption scope to use when sending requests authorized with this SAS URI.\n   */\n  encryptionScope?: string;\n  /**\n   * Optional. Specifies which resources are accessible via the SAS (only for {@link BlobSASSignatureValues}).\n   * @see https://docs.microsoft.com/rest/api/storageservices/create-service-sas#specifying-the-signed-resource-blob-service-only\n   */\n  resource?: string;\n  /**\n   * Value for cache-control header in Blob/File Service SAS.\n   */\n  cacheControl?: string;\n  /**\n   * Value for content-disposition header in Blob/File Service SAS.\n   */\n  contentDisposition?: string;\n  /**\n   * Value for content-encoding header in Blob/File Service SAS.\n   */\n  contentEncoding?: string;\n  /**\n   * Value for content-length header in Blob/File Service SAS.\n   */\n  contentLanguage?: string;\n  /**\n   * Value for content-type header in Blob/File Service SAS.\n   */\n  contentType?: string;\n  /**\n   * User delegation key properties.\n   */\n  userDelegationKey?: UserDelegationKey;\n  /**\n   * Authorized AAD Object ID in GUID format. The AAD Object ID of a user authorized by the owner of the User Delegation Key\n   * to perform the action granted by the SAS. The Azure Storage service will ensure that the owner of the user delegation key\n   * has the required permissions before granting access but no additional permission check for the user specified in\n   * this value will be performed. This cannot be used in conjuction with {@link signedUnauthorizedUserObjectId}.\n   * This is only used for User Delegation SAS.\n   */\n  preauthorizedAgentObjectId?: string;\n  /**\n   * A GUID value that will be logged in the storage diagnostic logs and can be used to correlate SAS generation with storage resource access.\n   * This is only used for User Delegation SAS.\n   */\n  correlationId?: string;\n}\n\n/**\n * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly\n * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link BlobSASSignatureValues}\n * types. Once generated, it can be encoded into a {@link String} and appended to a URL directly (though caution should\n * be taken here in case there are existing query parameters, which might affect the appropriate means of appending\n * these query parameters).\n *\n * NOTE: Instances of this class are immutable.\n */\nexport class SASQueryParameters {\n  /**\n   * The storage API version.\n   */\n  public readonly version: string;\n\n  /**\n   * Optional. The allowed HTTP protocol(s).\n   */\n  public readonly protocol?: SASProtocol;\n\n  /**\n   * Optional. The start time for this SAS token.\n   */\n  public readonly startsOn?: Date;\n\n  /**\n   * Optional only when identifier is provided. The expiry time for this SAS token.\n   */\n  public readonly expiresOn?: Date;\n\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to {@link AccountSASPermissions}, {@link BlobSASPermissions}, or {@link ContainerSASPermissions} for\n   * more details.\n   */\n  public readonly permissions?: string;\n\n  /**\n   * Optional. The storage services being accessed (only for Account SAS). Please refer to {@link AccountSASServices}\n   * for more details.\n   */\n  public readonly services?: string;\n\n  /**\n   * Optional. The storage resource types being accessed (only for Account SAS). Please refer to\n   * {@link AccountSASResourceTypes} for more details.\n   */\n  public readonly resourceTypes?: string;\n\n  /**\n   * Optional. The signed identifier (only for {@link BlobSASSignatureValues}).\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  public readonly identifier?: string;\n\n  /**\n   * Optional. Encryption scope to use when sending requests authorized with this SAS URI.\n   */\n  public readonly encryptionScope?: string;\n\n  /**\n   * Optional. Specifies which resources are accessible via the SAS (only for {@link BlobSASSignatureValues}).\n   * @see https://docs.microsoft.com/rest/api/storageservices/create-service-sas#specifying-the-signed-resource-blob-service-only\n   */\n  public readonly resource?: string;\n\n  /**\n   * The signature for the SAS token.\n   */\n  public readonly signature: string;\n\n  /**\n   * Value for cache-control header in Blob/File Service SAS.\n   */\n  public readonly cacheControl?: string;\n\n  /**\n   * Value for content-disposition header in Blob/File Service SAS.\n   */\n  public readonly contentDisposition?: string;\n\n  /**\n   * Value for content-encoding header in Blob/File Service SAS.\n   */\n  public readonly contentEncoding?: string;\n\n  /**\n   * Value for content-length header in Blob/File Service SAS.\n   */\n  public readonly contentLanguage?: string;\n\n  /**\n   * Value for content-type header in Blob/File Service SAS.\n   */\n  public readonly contentType?: string;\n\n  /**\n   * Inner value of getter ipRange.\n   */\n  private readonly ipRangeInner?: SasIPRange;\n\n  /**\n   * The Azure Active Directory object ID in GUID format.\n   * Property of user delegation key.\n   */\n  private readonly signedOid?: string;\n\n  /**\n   * The Azure Active Directory tenant ID in GUID format.\n   * Property of user delegation key.\n   */\n  private readonly signedTenantId?: string;\n\n  /**\n   * The date-time the key is active.\n   * Property of user delegation key.\n   */\n  private readonly signedStartsOn?: Date;\n\n  /**\n   * The date-time the key expires.\n   * Property of user delegation key.\n   */\n  private readonly signedExpiresOn?: Date;\n\n  /**\n   * Abbreviation of the Azure Storage service that accepts the user delegation key.\n   * Property of user delegation key.\n   */\n  private readonly signedService?: string;\n\n  /**\n   * The service version that created the user delegation key.\n   * Property of user delegation key.\n   */\n  private readonly signedVersion?: string;\n\n  /**\n   * Authorized AAD Object ID in GUID format. The AAD Object ID of a user authorized by the owner of the User Delegation Key\n   * to perform the action granted by the SAS. The Azure Storage service will ensure that the owner of the user delegation key\n   * has the required permissions before granting access but no additional permission check for the user specified in\n   * this value will be performed. This is only used for User Delegation SAS.\n   */\n  public readonly preauthorizedAgentObjectId?: string;\n\n  /**\n   * A GUID value that will be logged in the storage diagnostic logs and can be used to correlate SAS generation with storage resource access.\n   * This is only used for User Delegation SAS.\n   */\n  public readonly correlationId?: string;\n\n  /**\n   * Optional. IP range allowed for this SAS.\n   *\n   * @readonly\n   */\n  public get ipRange(): SasIPRange | undefined {\n    if (this.ipRangeInner) {\n      return {\n        end: this.ipRangeInner.end,\n        start: this.ipRangeInner.start,\n      };\n    }\n    return undefined;\n  }\n\n  /**\n   * Creates an instance of SASQueryParameters.\n   *\n   * @param version - Representing the storage version\n   * @param signature - Representing the signature for the SAS token\n   * @param permissions - Representing the storage permissions\n   * @param services - Representing the storage services being accessed (only for Account SAS)\n   * @param resourceTypes - Representing the storage resource types being accessed (only for Account SAS)\n   * @param protocol - Representing the allowed HTTP protocol(s)\n   * @param startsOn - Representing the start time for this SAS token\n   * @param expiresOn - Representing the expiry time for this SAS token\n   * @param ipRange - Representing the range of valid IP addresses for this SAS token\n   * @param identifier - Representing the signed identifier (only for Service SAS)\n   * @param resource - Representing the storage container or blob (only for Service SAS)\n   * @param cacheControl - Representing the cache-control header (only for Blob/File Service SAS)\n   * @param contentDisposition - Representing the content-disposition header (only for Blob/File Service SAS)\n   * @param contentEncoding - Representing the content-encoding header (only for Blob/File Service SAS)\n   * @param contentLanguage - Representing the content-language header (only for Blob/File Service SAS)\n   * @param contentType - Representing the content-type header (only for Blob/File Service SAS)\n   * @param userDelegationKey - Representing the user delegation key properties\n   * @param preauthorizedAgentObjectId - Representing the authorized AAD Object ID (only for User Delegation SAS)\n   * @param correlationId - Representing the correlation ID (only for User Delegation SAS)\n   * @param encryptionScope -\n   */\n  constructor(\n    version: string,\n    signature: string,\n    permissions?: string,\n    services?: string,\n    resourceTypes?: string,\n    protocol?: SASProtocol,\n    startsOn?: Date,\n    expiresOn?: Date,\n    ipRange?: SasIPRange,\n    identifier?: string,\n    resource?: string,\n    cacheControl?: string,\n    contentDisposition?: string,\n    contentEncoding?: string,\n    contentLanguage?: string,\n    contentType?: string,\n    userDelegationKey?: UserDelegationKey,\n    preauthorizedAgentObjectId?: string,\n    correlationId?: string,\n    encryptionScope?: string\n  );\n\n  /**\n   * Creates an instance of SASQueryParameters.\n   *\n   * @param version - Representing the storage version\n   * @param signature - Representing the signature for the SAS token\n   * @param options - Optional. Options to construct the SASQueryParameters.\n   */\n  constructor(version: string, signature: string, options?: SASQueryParametersOptions);\n\n  constructor(\n    version: string,\n    signature: string,\n    permissionsOrOptions?: string | SASQueryParametersOptions,\n    services?: string,\n    resourceTypes?: string,\n    protocol?: SASProtocol,\n    startsOn?: Date,\n    expiresOn?: Date,\n    ipRange?: SasIPRange,\n    identifier?: string,\n    resource?: string,\n    cacheControl?: string,\n    contentDisposition?: string,\n    contentEncoding?: string,\n    contentLanguage?: string,\n    contentType?: string,\n    userDelegationKey?: UserDelegationKey,\n    preauthorizedAgentObjectId?: string,\n    correlationId?: string,\n    encryptionScope?: string\n  ) {\n    this.version = version;\n    this.signature = signature;\n\n    if (permissionsOrOptions !== undefined && typeof permissionsOrOptions !== \"string\") {\n      // SASQueryParametersOptions\n      this.permissions = permissionsOrOptions.permissions;\n      this.services = permissionsOrOptions.services;\n      this.resourceTypes = permissionsOrOptions.resourceTypes;\n      this.protocol = permissionsOrOptions.protocol;\n      this.startsOn = permissionsOrOptions.startsOn;\n      this.expiresOn = permissionsOrOptions.expiresOn;\n      this.ipRangeInner = permissionsOrOptions.ipRange;\n      this.identifier = permissionsOrOptions.identifier;\n      this.encryptionScope = permissionsOrOptions.encryptionScope;\n      this.resource = permissionsOrOptions.resource;\n      this.cacheControl = permissionsOrOptions.cacheControl;\n      this.contentDisposition = permissionsOrOptions.contentDisposition;\n      this.contentEncoding = permissionsOrOptions.contentEncoding;\n      this.contentLanguage = permissionsOrOptions.contentLanguage;\n      this.contentType = permissionsOrOptions.contentType;\n\n      if (permissionsOrOptions.userDelegationKey) {\n        this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;\n        this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;\n        this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;\n        this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;\n        this.signedService = permissionsOrOptions.userDelegationKey.signedService;\n        this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;\n\n        this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;\n        this.correlationId = permissionsOrOptions.correlationId;\n      }\n    } else {\n      this.services = services;\n      this.resourceTypes = resourceTypes;\n      this.expiresOn = expiresOn;\n      this.permissions = permissionsOrOptions;\n      this.protocol = protocol;\n      this.startsOn = startsOn;\n      this.ipRangeInner = ipRange;\n      this.encryptionScope = encryptionScope;\n      this.identifier = identifier;\n      this.resource = resource;\n      this.cacheControl = cacheControl;\n      this.contentDisposition = contentDisposition;\n      this.contentEncoding = contentEncoding;\n      this.contentLanguage = contentLanguage;\n      this.contentType = contentType;\n\n      if (userDelegationKey) {\n        this.signedOid = userDelegationKey.signedObjectId;\n        this.signedTenantId = userDelegationKey.signedTenantId;\n        this.signedStartsOn = userDelegationKey.signedStartsOn;\n        this.signedExpiresOn = userDelegationKey.signedExpiresOn;\n        this.signedService = userDelegationKey.signedService;\n        this.signedVersion = userDelegationKey.signedVersion;\n\n        this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;\n        this.correlationId = correlationId;\n      }\n    }\n  }\n\n  /**\n   * Encodes all SAS query parameters into a string that can be appended to a URL.\n   *\n   */\n  public toString(): string {\n    const params: string[] = [\n      \"sv\",\n      \"ss\",\n      \"srt\",\n      \"spr\",\n      \"st\",\n      \"se\",\n      \"sip\",\n      \"si\",\n      \"ses\",\n      \"skoid\", // Signed object ID\n      \"sktid\", // Signed tenant ID\n      \"skt\", // Signed key start time\n      \"ske\", // Signed key expiry time\n      \"sks\", // Signed key service\n      \"skv\", // Signed key version\n      \"sr\",\n      \"sp\",\n      \"sig\",\n      \"rscc\",\n      \"rscd\",\n      \"rsce\",\n      \"rscl\",\n      \"rsct\",\n      \"saoid\",\n      \"scid\",\n    ];\n    const queries: string[] = [];\n\n    for (const param of params) {\n      switch (param) {\n        case \"sv\":\n          this.tryAppendQueryParameter(queries, param, this.version);\n          break;\n        case \"ss\":\n          this.tryAppendQueryParameter(queries, param, this.services);\n          break;\n        case \"srt\":\n          this.tryAppendQueryParameter(queries, param, this.resourceTypes);\n          break;\n        case \"spr\":\n          this.tryAppendQueryParameter(queries, param, this.protocol);\n          break;\n        case \"st\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.startsOn ? truncatedISO8061Date(this.startsOn, false) : undefined\n          );\n          break;\n        case \"se\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.expiresOn ? truncatedISO8061Date(this.expiresOn, false) : undefined\n          );\n          break;\n        case \"sip\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.ipRange ? ipRangeToString(this.ipRange) : undefined\n          );\n          break;\n        case \"si\":\n          this.tryAppendQueryParameter(queries, param, this.identifier);\n          break;\n        case \"ses\":\n          this.tryAppendQueryParameter(queries, param, this.encryptionScope);\n          break;\n        case \"skoid\": // Signed object ID\n          this.tryAppendQueryParameter(queries, param, this.signedOid);\n          break;\n        case \"sktid\": // Signed tenant ID\n          this.tryAppendQueryParameter(queries, param, this.signedTenantId);\n          break;\n        case \"skt\": // Signed key start time\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.signedStartsOn ? truncatedISO8061Date(this.signedStartsOn, false) : undefined\n          );\n          break;\n        case \"ske\": // Signed key expiry time\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.signedExpiresOn ? truncatedISO8061Date(this.signedExpiresOn, false) : undefined\n          );\n          break;\n        case \"sks\": // Signed key service\n          this.tryAppendQueryParameter(queries, param, this.signedService);\n          break;\n        case \"skv\": // Signed key version\n          this.tryAppendQueryParameter(queries, param, this.signedVersion);\n          break;\n        case \"sr\":\n          this.tryAppendQueryParameter(queries, param, this.resource);\n          break;\n        case \"sp\":\n          this.tryAppendQueryParameter(queries, param, this.permissions);\n          break;\n        case \"sig\":\n          this.tryAppendQueryParameter(queries, param, this.signature);\n          break;\n        case \"rscc\":\n          this.tryAppendQueryParameter(queries, param, this.cacheControl);\n          break;\n        case \"rscd\":\n          this.tryAppendQueryParameter(queries, param, this.contentDisposition);\n          break;\n        case \"rsce\":\n          this.tryAppendQueryParameter(queries, param, this.contentEncoding);\n          break;\n        case \"rscl\":\n          this.tryAppendQueryParameter(queries, param, this.contentLanguage);\n          break;\n        case \"rsct\":\n          this.tryAppendQueryParameter(queries, param, this.contentType);\n          break;\n        case \"saoid\":\n          this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);\n          break;\n        case \"scid\":\n          this.tryAppendQueryParameter(queries, param, this.correlationId);\n          break;\n      }\n    }\n    return queries.join(\"&\");\n  }\n\n  /**\n   * A private helper method used to filter and append query key/value pairs into an array.\n   *\n   * @param queries -\n   * @param key -\n   * @param value -\n   */\n  private tryAppendQueryParameter(queries: string[], key: string, value?: string): void {\n    if (!value) {\n      return;\n    }\n\n    key = encodeURIComponent(key);\n    value = encodeURIComponent(value);\n    if (key.length > 0 && value.length > 0) {\n      queries.push(`${key}=${value}`);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}