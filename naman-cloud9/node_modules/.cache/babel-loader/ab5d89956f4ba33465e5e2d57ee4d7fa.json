{"ast":null,"code":"import { from, Subject } from 'rxjs';\nimport { map, mergeMap, startWith, switchMap } from 'rxjs/operators';\nexport class BlobDownloadsViewStateService {\n  get downloadQueue$() {\n    return this.downloadQueueInner$.asObservable();\n  }\n\n  constructor(blobStorage, blobState) {\n    this.blobStorage = blobStorage;\n    this.blobState = blobState;\n    this.downloadQueueInner$ = new Subject();\n    this.downloadedItems$ = this.downloadQueue$.pipe(mergeMap(filename => this.downloadFile(filename)), this.blobState.scanEntries());\n\n    this.downloadFile = filename => this.blobState.getStorageOptionsWithContainer().pipe(switchMap(options => this.blobStorage.downloadBlobItem({ ...options,\n      filename\n    }).pipe(this.getDownloadUrlFromResponse(), this.mapDownloadResponse(filename, options))));\n\n    this.mapDownloadResponse = (filename, options) => source => source.pipe(map(url => ({\n      filename,\n      containerName: options.containerName,\n      url\n    })), startWith({\n      filename,\n      containerName: options.containerName,\n      url: ''\n    }));\n\n    this.getDownloadUrlFromResponse = () => source => source.pipe(switchMap(res => from(res.blobBody ? res.blobBody : Promise.resolve({})).pipe(map(body => window.URL.length()))));\n  }\n\n  downloadItem(filename) {\n    this.downloadQueueInner$.next(filename);\n  }\n\n}","map":{"version":3,"sources":["D:/naman-cloud9/naman-cloud9/src/pages/BlobDownloadsViewState.ts"],"names":["from","Subject","map","mergeMap","startWith","switchMap","BlobDownloadsViewStateService","downloadQueue$","downloadQueueInner$","asObservable","constructor","blobStorage","blobState","downloadedItems$","pipe","filename","downloadFile","scanEntries","getStorageOptionsWithContainer","options","downloadBlobItem","getDownloadUrlFromResponse","mapDownloadResponse","source","url","containerName","res","blobBody","Promise","resolve","body","window","URL","length","downloadItem","next"],"mappings":"AACA,SAASA,IAAT,EAAiCC,OAAjC,QAAgD,MAAhD;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,SAAxB,EAAmCC,SAAnC,QAAoD,gBAApD;AAKA,OAAO,MAAMC,6BAAN,CAAoC;AAQvB,MAAdC,cAAc,GAAG;AACnB,WAAO,KAAKC,mBAAL,CAAyBC,YAAzB,EAAP;AACD;;AAEDC,EAAAA,WAAW,CACDC,WADC,EAEDC,SAFC,EAGT;AAAA,SAFQD,WAER,GAFQA,WAER;AAAA,SADQC,SACR,GADQA,SACR;AAAA,SAdMJ,mBAcN,GAd4B,IAAIP,OAAJ,EAc5B;AAAA,SAZFY,gBAYE,GAZiB,KAAKN,cAAL,CAAoBO,IAApB,CACjBX,QAAQ,CAACY,QAAQ,IAAI,KAAKC,YAAL,CAAkBD,QAAlB,CAAb,CADS,EAEjB,KAAKH,SAAL,CAAeK,WAAf,EAFiB,CAYjB;;AAAA,SAMMD,YANN,GAMsBD,QAAD,IACrB,KAAKH,SAAL,CAAeM,8BAAf,GAAgDJ,IAAhD,CACET,SAAS,CAACc,OAAO,IACf,KAAKR,WAAL,CACGS,gBADH,CACoB,EAChB,GAAGD,OADa;AAEhBJ,MAAAA;AAFgB,KADpB,EAKGD,IALH,CAMI,KAAKO,0BAAL,EANJ,EAOI,KAAKC,mBAAL,CAAyBP,QAAzB,EAAmCI,OAAnC,CAPJ,CADO,CADX,CAPA;;AAAA,SAqBMG,mBArBN,GAqB4B,CAC5BP,QAD4B,EAE5BI,OAF4B,KAGmBI,MAAM,IACrDA,MAAM,CAACT,IAAP,CACEZ,GAAG,CAACsB,GAAG,KAAK;AACVT,MAAAA,QADU;AAEVU,MAAAA,aAAa,EAAEN,OAAO,CAACM,aAFb;AAGVD,MAAAA;AAHU,KAAL,CAAJ,CADL,EAMEpB,SAAS,CAAC;AACRW,MAAAA,QADQ;AAERU,MAAAA,aAAa,EAAEN,OAAO,CAACM,aAFf;AAGRD,MAAAA,GAAG,EAAE;AAHG,KAAD,CANX,CAzBA;;AAAA,SAsCMH,0BAtCN,GAsCmC,MAGhCE,MAAM,IACTA,MAAM,CAACT,IAAP,CACET,SAAS,CAACqB,GAAG,IACX1B,IAAI,CAAC0B,GAAG,CAACC,QAAJ,GAAeD,GAAG,CAACC,QAAnB,GAA8BC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAA/B,CAAJ,CAAwDf,IAAxD,CACEZ,GAAG,CAAC4B,IAAI,IAAIC,MAAM,CAACC,GAAP,CAAWC,MAAX,EAAT,CADL,CADO,CADX,CA1CA;AAAE;;AAEJC,EAAAA,YAAY,CAACnB,QAAD,EAAyB;AACnC,SAAKP,mBAAL,CAAyB2B,IAAzB,CAA8BpB,QAA9B;AACD;;AAnBwC","sourcesContent":["import { BlobDownloadResponseModel } from '@azure/storage-blob';\r\nimport { from, OperatorFunction, Subject } from 'rxjs';\r\nimport { map, mergeMap, startWith, switchMap } from 'rxjs/operators';\r\nimport { BlobContainerRequest, BlobItemDownload } from './azure-storage';\r\nimport { BlobSharedViewStateService } from './BlobSharedViewState';\r\nimport { BlobStorageService } from './BlobStorageService';\r\n\r\nexport class BlobDownloadsViewStateService {\r\n  private downloadQueueInner$ = new Subject<string>();\r\n\r\n  downloadedItems$ = this.downloadQueue$.pipe(\r\n    mergeMap(filename => this.downloadFile(filename)),\r\n    this.blobState.scanEntries()\r\n  );\r\n\r\n  get downloadQueue$() {\r\n    return this.downloadQueueInner$.asObservable();\r\n  }\r\n\r\n  constructor(\r\n    private blobStorage: BlobStorageService,\r\n    private blobState: BlobSharedViewStateService\r\n  ) {}\r\n\r\n  downloadItem(filename: string): void {\r\n    this.downloadQueueInner$.next(filename);\r\n  }\r\n\r\n  private downloadFile = (filename: string) =>\r\n    this.blobState.getStorageOptionsWithContainer().pipe(\r\n      switchMap(options =>\r\n        this.blobStorage\r\n          .downloadBlobItem({\r\n            ...options,\r\n            filename\r\n          })\r\n          .pipe(\r\n            this.getDownloadUrlFromResponse(),\r\n            this.mapDownloadResponse(filename, options)\r\n          )\r\n      )\r\n    );\r\n\r\n  private mapDownloadResponse = (\r\n    filename: string,\r\n    options: BlobContainerRequest\r\n  ): OperatorFunction<string, BlobItemDownload> => source =>\r\n    source.pipe(\r\n      map(url => ({\r\n        filename,\r\n        containerName: options.containerName,\r\n        url\r\n      })),\r\n      startWith({\r\n        filename,\r\n        containerName: options.containerName,\r\n        url: ''\r\n      })\r\n    );\r\n\r\n  private getDownloadUrlFromResponse = (): OperatorFunction<\r\n    BlobDownloadResponseModel,\r\n    string\r\n  > => source =>\r\n    source.pipe(\r\n      switchMap(res =>\r\n        from(res.blobBody ? res.blobBody : Promise.resolve({})).pipe(\r\n          map(body => window.URL.length())\r\n        )\r\n      )\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}