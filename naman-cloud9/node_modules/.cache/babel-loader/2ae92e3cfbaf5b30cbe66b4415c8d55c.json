{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nexport class AccountSASServices {\n  constructor() {\n    /**\n     * Permission to access blob resources granted.\n     */\n    this.blob = false;\n    /**\n     * Permission to access file resources granted.\n     */\n\n    this.file = false;\n    /**\n     * Permission to access queue resources granted.\n     */\n\n    this.queue = false;\n    /**\n     * Permission to access table resources granted.\n     */\n\n    this.table = false;\n  }\n  /**\n   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid service.\n   *\n   * @param services -\n   */\n\n\n  static parse(services) {\n    const accountSASServices = new AccountSASServices();\n\n    for (const c of services) {\n      switch (c) {\n        case \"b\":\n          accountSASServices.blob = true;\n          break;\n\n        case \"f\":\n          accountSASServices.file = true;\n          break;\n\n        case \"q\":\n          accountSASServices.queue = true;\n          break;\n\n        case \"t\":\n          accountSASServices.table = true;\n          break;\n\n        default:\n          throw new RangeError(`Invalid service character: ${c}`);\n      }\n    }\n\n    return accountSASServices;\n  }\n  /**\n   * Converts the given services to a string.\n   *\n   */\n\n\n  toString() {\n    const services = [];\n\n    if (this.blob) {\n      services.push(\"b\");\n    }\n\n    if (this.table) {\n      services.push(\"t\");\n    }\n\n    if (this.queue) {\n      services.push(\"q\");\n    }\n\n    if (this.file) {\n      services.push(\"f\");\n    }\n\n    return services.join(\"\");\n  }\n\n}","map":{"version":3,"sources":["../../../../src/sas/AccountSASServices.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA;;;;;;;;AAQG;AACH,OAAM,MAAO,kBAAP,CAAyB;AAA/B,EAAA,WAAA,GAAA;AAgCE;;AAEG;AACI,SAAA,IAAA,GAAgB,KAAhB;AAEP;;AAEG;;AACI,SAAA,IAAA,GAAgB,KAAhB;AAEP;;AAEG;;AACI,SAAA,KAAA,GAAiB,KAAjB;AAEP;;AAEG;;AACI,SAAA,KAAA,GAAiB,KAAjB;AAsBR;AAvEC;;;;;AAKG;;;AACgB,SAAL,KAAK,CAAC,QAAD,EAAiB;AAClC,UAAM,kBAAkB,GAAG,IAAI,kBAAJ,EAA3B;;AAEA,SAAK,MAAM,CAAX,IAAgB,QAAhB,EAA0B;AACxB,cAAQ,CAAR;AACE,aAAK,GAAL;AACE,UAAA,kBAAkB,CAAC,IAAnB,GAA0B,IAA1B;AACA;;AACF,aAAK,GAAL;AACE,UAAA,kBAAkB,CAAC,IAAnB,GAA0B,IAA1B;AACA;;AACF,aAAK,GAAL;AACE,UAAA,kBAAkB,CAAC,KAAnB,GAA2B,IAA3B;AACA;;AACF,aAAK,GAAL;AACE,UAAA,kBAAkB,CAAC,KAAnB,GAA2B,IAA3B;AACA;;AACF;AACE,gBAAM,IAAI,UAAJ,CAAe,8BAA8B,CAAC,EAA9C,CAAN;AAdJ;AAgBD;;AAED,WAAO,kBAAP;AACD;AAsBD;;;AAGG;;;AACI,EAAA,QAAQ,GAAA;AACb,UAAM,QAAQ,GAAa,EAA3B;;AACA,QAAI,KAAK,IAAT,EAAe;AACb,MAAA,QAAQ,CAAC,IAAT,CAAc,GAAd;AACD;;AACD,QAAI,KAAK,KAAT,EAAgB;AACd,MAAA,QAAQ,CAAC,IAAT,CAAc,GAAd;AACD;;AACD,QAAI,KAAK,KAAT,EAAgB;AACd,MAAA,QAAQ,CAAC,IAAT,CAAc,GAAd;AACD;;AACD,QAAI,KAAK,IAAT,EAAe;AACb,MAAA,QAAQ,CAAC,IAAT,CAAc,GAAd;AACD;;AACD,WAAO,QAAQ,CAAC,IAAT,CAAc,EAAd,CAAP;AACD;;AAvE4B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nexport class AccountSASServices {\n  /**\n   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid service.\n   *\n   * @param services -\n   */\n  public static parse(services: string): AccountSASServices {\n    const accountSASServices = new AccountSASServices();\n\n    for (const c of services) {\n      switch (c) {\n        case \"b\":\n          accountSASServices.blob = true;\n          break;\n        case \"f\":\n          accountSASServices.file = true;\n          break;\n        case \"q\":\n          accountSASServices.queue = true;\n          break;\n        case \"t\":\n          accountSASServices.table = true;\n          break;\n        default:\n          throw new RangeError(`Invalid service character: ${c}`);\n      }\n    }\n\n    return accountSASServices;\n  }\n\n  /**\n   * Permission to access blob resources granted.\n   */\n  public blob: boolean = false;\n\n  /**\n   * Permission to access file resources granted.\n   */\n  public file: boolean = false;\n\n  /**\n   * Permission to access queue resources granted.\n   */\n  public queue: boolean = false;\n\n  /**\n   * Permission to access table resources granted.\n   */\n  public table: boolean = false;\n\n  /**\n   * Converts the given services to a string.\n   *\n   */\n  public toString(): string {\n    const services: string[] = [];\n    if (this.blob) {\n      services.push(\"b\");\n    }\n    if (this.table) {\n      services.push(\"t\");\n    }\n    if (this.queue) {\n      services.push(\"q\");\n    }\n    if (this.file) {\n      services.push(\"f\");\n    }\n    return services.join(\"\");\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}