{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { BaseRequestPolicy } from \"@azure/core-http\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\n\nexport function NewRetryPolicyFactory(retryOptions) {\n  return {\n    create: (nextPolicy, options) => {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    }\n  };\n}\n/**\n * RetryPolicy types.\n */\n\nexport var StorageRetryPolicyType;\n\n(function (StorageRetryPolicyType) {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n\n  StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {})); // Default values of StorageRetryOptions\n\n\nconst DEFAULT_RETRY_OPTIONS = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined // Use server side default timeout strategy\n\n};\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\n\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param retryOptions -\n   */\n  constructor(nextPolicy, options) {\n    let retryOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETRY_OPTIONS;\n    super(nextPolicy, options); // Initialize retry options\n\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n      maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS.maxTries,\n      tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n      retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n      maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n      secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS.secondaryHost\n    };\n  }\n  /**\n   * Sends request.\n   *\n   * @param request -\n   */\n\n\n  async sendRequest(request) {\n    return this.attemptSendRequest(request, false, 1);\n  }\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @param request -\n   * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   */\n\n\n  async attemptSendRequest(request, secondaryHas404, attempt) {\n    const newRequest = request.clone();\n    const isPrimaryRetry = secondaryHas404 || !this.retryOptions.secondaryHost || !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") || attempt % 2 === 1;\n\n    if (!isPrimaryRetry) {\n      newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost);\n    } // Set the server-side timeout query parameter \"timeout=[seconds]\"\n\n\n    if (this.retryOptions.tryTimeoutInMs) {\n      newRequest.url = setURLParameter(newRequest.url, URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());\n    }\n\n    let response;\n\n    try {\n      logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n      response = await this._nextPolicy.sendRequest(newRequest);\n\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n        return response;\n      }\n\n      secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;\n    } catch (err) {\n      logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n        throw err;\n      }\n    }\n\n    await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n    return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n  }\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param response -\n   * @param err -\n   */\n\n\n  shouldRetry(isPrimaryRetry, attempt, response, err) {\n    if (attempt >= this.retryOptions.maxTries) {\n      logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions.maxTries}, no further try.`);\n      return false;\n    } // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n\n\n    const retriableErrors = [\"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\", \"ENOENT\", \"ENOTFOUND\", \"TIMEOUT\", \"EPIPE\", \"REQUEST_SEND_ERROR\" // For default xhr based http client provided in ms-rest-js\n    ];\n\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) {\n          logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n          return true;\n        }\n      }\n    } // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n\n\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n\n      if (!isPrimaryRetry && statusCode === 404) {\n        logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      } // Server internal error or server timeout\n\n\n      if (statusCode === 503 || statusCode === 500) {\n        logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n        return true;\n      }\n    }\n\n    if ((err === null || err === void 0 ? void 0 : err.code) === \"PARSE_ERROR\" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n      logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param abortSignal -\n   */\n\n\n  async delay(isPrimaryRetry, attempt, abortSignal) {\n    let delayTimeInMs = 0;\n\n    if (isPrimaryRetry) {\n      switch (this.retryOptions.retryPolicyType) {\n        case StorageRetryPolicyType.EXPONENTIAL:\n          delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);\n          break;\n\n        case StorageRetryPolicyType.FIXED:\n          delayTimeInMs = this.retryOptions.retryDelayInMs;\n          break;\n      }\n    } else {\n      delayTimeInMs = Math.random() * 1000;\n    }\n\n    logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n    return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n  }\n\n}","map":{"version":3,"sources":["../../../../src/policies/StorageRetryPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\n\nimport {\n  AbortSignalLike,\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  RestError,\n  WebResource,\n} from \"@azure/core-http\";\n\nimport { StorageRetryOptions } from \"../StorageRetryPolicyFactory\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nexport function NewRetryPolicyFactory(retryOptions?: StorageRetryOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageRetryPolicy => {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    },\n  };\n}\n\n/**\n * RetryPolicy types.\n */\nexport enum StorageRetryPolicyType {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  EXPONENTIAL,\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n  FIXED,\n}\n\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS: StorageRetryOptions = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\n\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n  /**\n   * RetryOptions.\n   */\n  private readonly retryOptions: StorageRetryOptions;\n\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param retryOptions -\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryOptions: StorageRetryOptions = DEFAULT_RETRY_OPTIONS\n  ) {\n    super(nextPolicy, options);\n\n    // Initialize retry options\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType\n        ? retryOptions.retryPolicyType\n        : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n\n      maxTries:\n        retryOptions.maxTries && retryOptions.maxTries >= 1\n          ? Math.floor(retryOptions.maxTries)\n          : DEFAULT_RETRY_OPTIONS.maxTries,\n\n      tryTimeoutInMs:\n        retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n          ? retryOptions.tryTimeoutInMs\n          : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n\n      retryDelayInMs:\n        retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n          ? Math.min(\n              retryOptions.retryDelayInMs,\n              retryOptions.maxRetryDelayInMs\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs!\n            )\n          : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n\n      maxRetryDelayInMs:\n        retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n          ? retryOptions.maxRetryDelayInMs\n          : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n\n      secondaryHost: retryOptions.secondaryHost\n        ? retryOptions.secondaryHost\n        : DEFAULT_RETRY_OPTIONS.secondaryHost,\n    };\n  }\n\n  /**\n   * Sends request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.attemptSendRequest(request, false, 1);\n  }\n\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @param request -\n   * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   */\n  protected async attemptSendRequest(\n    request: WebResource,\n    secondaryHas404: boolean,\n    attempt: number\n  ): Promise<HttpOperationResponse> {\n    const newRequest: WebResource = request.clone();\n\n    const isPrimaryRetry =\n      secondaryHas404 ||\n      !this.retryOptions.secondaryHost ||\n      !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n      attempt % 2 === 1;\n\n    if (!isPrimaryRetry) {\n      newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost!);\n    }\n\n    // Set the server-side timeout query parameter \"timeout=[seconds]\"\n    if (this.retryOptions.tryTimeoutInMs) {\n      newRequest.url = setURLParameter(\n        newRequest.url,\n        URLConstants.Parameters.TIMEOUT,\n        Math.floor(this.retryOptions.tryTimeoutInMs! / 1000).toString()\n      );\n    }\n\n    let response: HttpOperationResponse | undefined;\n    try {\n      logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n      response = await this._nextPolicy.sendRequest(newRequest);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n        return response;\n      }\n\n      secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n    } catch (err: any) {\n      logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n        throw err;\n      }\n    }\n\n    await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n    return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n  }\n\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param response -\n   * @param err -\n   */\n  protected shouldRetry(\n    isPrimaryRetry: boolean,\n    attempt: number,\n    response?: HttpOperationResponse,\n    err?: RestError\n  ): boolean {\n    if (attempt >= this.retryOptions.maxTries!) {\n      logger.info(\n        `RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n          .maxTries!}, no further try.`\n      );\n      return false;\n    }\n\n    // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n    const retriableErrors = [\n      \"ETIMEDOUT\",\n      \"ESOCKETTIMEDOUT\",\n      \"ECONNREFUSED\",\n      \"ECONNRESET\",\n      \"ENOENT\",\n      \"ENOTFOUND\",\n      \"TIMEOUT\",\n      \"EPIPE\",\n      \"REQUEST_SEND_ERROR\", // For default xhr based http client provided in ms-rest-js\n    ];\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (\n          err.name.toUpperCase().includes(retriableError) ||\n          err.message.toUpperCase().includes(retriableError) ||\n          (err.code && err.code.toString().toUpperCase() === retriableError)\n        ) {\n          logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n          return true;\n        }\n      }\n    }\n\n    // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n      if (!isPrimaryRetry && statusCode === 404) {\n        logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      }\n\n      // Server internal error or server timeout\n      if (statusCode === 503 || statusCode === 500) {\n        logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n        return true;\n      }\n    }\n\n    if (err?.code === \"PARSE_ERROR\" && err?.message.startsWith(`Error \"Error: Unclosed root tag`)) {\n      logger.info(\n        \"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\"\n      );\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param abortSignal -\n   */\n  private async delay(isPrimaryRetry: boolean, attempt: number, abortSignal?: AbortSignalLike) {\n    let delayTimeInMs: number = 0;\n\n    if (isPrimaryRetry) {\n      switch (this.retryOptions.retryPolicyType) {\n        case StorageRetryPolicyType.EXPONENTIAL:\n          delayTimeInMs = Math.min(\n            (Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs!,\n            this.retryOptions.maxRetryDelayInMs!\n          );\n          break;\n        case StorageRetryPolicyType.FIXED:\n          delayTimeInMs = this.retryOptions.retryDelayInMs!;\n          break;\n      }\n    } else {\n      delayTimeInMs = Math.random() * 1000;\n    }\n\n    logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n    return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}