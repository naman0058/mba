{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { log } from \"./log\";\nconst debugEnvVariable = typeof process !== \"undefined\" && process.env && process.env.DEBUG || undefined;\nlet enabledString;\nlet enabledNamespaces = [];\nlet skippedNamespaces = [];\nconst debuggers = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nconst debugObj = Object.assign(namespace => {\n  return createDebugger(namespace);\n}, {\n  enable,\n  enabled,\n  disable,\n  log\n});\n\nfunction enable(namespaces) {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map(ns => ns.trim().replace(wildcard, \".*?\"));\n\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\n\nfunction enabled(namespace) {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n\n  for (const enabledNamespace of enabledNamespaces) {\n    if (enabledNamespace.test(namespace)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction disable() {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace) {\n  const newDebugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend\n  });\n\n  function debug() {\n    if (!newDebugger.enabled) {\n      return;\n    }\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n\n    newDebugger.log(...args);\n  }\n\n  debuggers.push(newDebugger);\n  return newDebugger;\n}\n\nfunction destroy() {\n  const index = debuggers.indexOf(this);\n\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(namespace) {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nexport default debugObj;","map":{"version":3,"sources":["../../src/debug.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { log } from \"./log\";\n\n/**\n * A simple mechanism for enabling logging.\n * Intended to mimic the publicly available `debug` package.\n */\nexport interface Debug {\n  /**\n   * Creates a new logger with the given namespace.\n   */\n  (namespace: string): Debugger;\n  /**\n   * The default log method (defaults to console)\n   */\n  log: (...args: any[]) => void;\n  /**\n   * Enables a particular set of namespaces.\n   * To enable multiple separate them with commas, e.g. \"info,debug\".\n   * Supports wildcards, e.g. \"azure:*\"\n   * Supports skip syntax, e.g. \"azure:*,-azure:storage:*\" will enable\n   * everything under azure except for things under azure:storage.\n   */\n  enable: (namespaces: string) => void;\n  /**\n   * Checks if a particular namespace is enabled.\n   */\n  enabled: (namespace: string) => boolean;\n  /**\n   * Disables all logging, returns what was previously enabled.\n   */\n  disable: () => string;\n}\n\n/**\n * A log function that can be dynamically enabled and redirected.\n */\nexport interface Debugger {\n  /**\n   * Logs the given arguments to the `log` method.\n   */\n  (...args: any[]): void;\n  /**\n   * True if this logger is active and logging.\n   */\n  enabled: boolean;\n  /**\n   * Used to cleanup/remove this logger.\n   */\n  destroy: () => boolean;\n  /**\n   * The current log method. Can be overridden to redirect output.\n   */\n  log: (...args: any[]) => void;\n  /**\n   * The namespace of this logger.\n   */\n  namespace: string;\n  /**\n   * Extends this logger with a child namespace.\n   * Namespaces are separated with a ':' character.\n   */\n  extend: (namespace: string) => Debugger;\n}\n\nconst debugEnvVariable =\n  (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\n\nlet enabledString: string | undefined;\nlet enabledNamespaces: RegExp[] = [];\nlet skippedNamespaces: RegExp[] = [];\nconst debuggers: Debugger[] = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nconst debugObj: Debug = Object.assign(\n  (namespace: string): Debugger => {\n    return createDebugger(namespace);\n  },\n  {\n    enable,\n    enabled,\n    disable,\n    log,\n  }\n);\n\nfunction enable(namespaces: string): void {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\n\nfunction enabled(namespace: string): boolean {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n  for (const enabledNamespace of enabledNamespaces) {\n    if (enabledNamespace.test(namespace)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction disable(): string {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace: string): Debugger {\n  const newDebugger: Debugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend,\n  });\n\n  function debug(...args: any[]): void {\n    if (!newDebugger.enabled) {\n      return;\n    }\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n    newDebugger.log(...args);\n  }\n\n  debuggers.push(newDebugger);\n\n  return newDebugger;\n}\n\nfunction destroy(this: Debugger): boolean {\n  const index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\n\nfunction extend(this: Debugger, namespace: string): Debugger {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nexport default debugObj;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}