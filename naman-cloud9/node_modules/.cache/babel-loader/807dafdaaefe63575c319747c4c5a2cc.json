{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class ContainerSASPermissions {\n  constructor() {\n    /**\n     * Specifies Read access granted.\n     */\n    this.read = false;\n    /**\n     * Specifies Add access granted.\n     */\n\n    this.add = false;\n    /**\n     * Specifies Create access granted.\n     */\n\n    this.create = false;\n    /**\n     * Specifies Write access granted.\n     */\n\n    this.write = false;\n    /**\n     * Specifies Delete access granted.\n     */\n\n    this.delete = false;\n    /**\n     * Specifies Delete version access granted.\n     */\n\n    this.deleteVersion = false;\n    /**\n     * Specifies List access granted.\n     */\n\n    this.list = false;\n    /**\n     * Specfies Tag access granted.\n     */\n\n    this.tag = false;\n    /**\n     * Specifies Move access granted.\n     */\n\n    this.move = false;\n    /**\n     * Specifies Execute access granted.\n     */\n\n    this.execute = false;\n    /**\n     * Specifies SetImmutabilityPolicy access granted.\n     */\n\n    this.setImmutabilityPolicy = false;\n    /**\n     * Specifies that Permanent Delete is permitted.\n     */\n\n    this.permanentDelete = false;\n    /**\n     * Specifies that Filter Blobs by Tags is permitted.\n     */\n\n    this.filterByTags = false;\n  }\n  /**\n   * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n\n\n  static parse(permissions) {\n    const containerSASPermissions = new ContainerSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          containerSASPermissions.read = true;\n          break;\n\n        case \"a\":\n          containerSASPermissions.add = true;\n          break;\n\n        case \"c\":\n          containerSASPermissions.create = true;\n          break;\n\n        case \"w\":\n          containerSASPermissions.write = true;\n          break;\n\n        case \"d\":\n          containerSASPermissions.delete = true;\n          break;\n\n        case \"l\":\n          containerSASPermissions.list = true;\n          break;\n\n        case \"t\":\n          containerSASPermissions.tag = true;\n          break;\n\n        case \"x\":\n          containerSASPermissions.deleteVersion = true;\n          break;\n\n        case \"m\":\n          containerSASPermissions.move = true;\n          break;\n\n        case \"e\":\n          containerSASPermissions.execute = true;\n          break;\n\n        case \"i\":\n          containerSASPermissions.setImmutabilityPolicy = true;\n          break;\n\n        case \"y\":\n          containerSASPermissions.permanentDelete = true;\n          break;\n\n        case \"f\":\n          containerSASPermissions.filterByTags = true;\n          break;\n\n        default:\n          throw new RangeError(`Invalid permission ${char}`);\n      }\n    }\n\n    return containerSASPermissions;\n  }\n  /**\n   * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n\n\n  static from(permissionLike) {\n    const containerSASPermissions = new ContainerSASPermissions();\n\n    if (permissionLike.read) {\n      containerSASPermissions.read = true;\n    }\n\n    if (permissionLike.add) {\n      containerSASPermissions.add = true;\n    }\n\n    if (permissionLike.create) {\n      containerSASPermissions.create = true;\n    }\n\n    if (permissionLike.write) {\n      containerSASPermissions.write = true;\n    }\n\n    if (permissionLike.delete) {\n      containerSASPermissions.delete = true;\n    }\n\n    if (permissionLike.list) {\n      containerSASPermissions.list = true;\n    }\n\n    if (permissionLike.deleteVersion) {\n      containerSASPermissions.deleteVersion = true;\n    }\n\n    if (permissionLike.tag) {\n      containerSASPermissions.tag = true;\n    }\n\n    if (permissionLike.move) {\n      containerSASPermissions.move = true;\n    }\n\n    if (permissionLike.execute) {\n      containerSASPermissions.execute = true;\n    }\n\n    if (permissionLike.setImmutabilityPolicy) {\n      containerSASPermissions.setImmutabilityPolicy = true;\n    }\n\n    if (permissionLike.permanentDelete) {\n      containerSASPermissions.permanentDelete = true;\n    }\n\n    if (permissionLike.filterByTags) {\n      containerSASPermissions.filterByTags = true;\n    }\n\n    return containerSASPermissions;\n  }\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * The order of the characters should be as specified here to ensure correctness.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   */\n\n\n  toString() {\n    const permissions = [];\n\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n\n    if (this.filterByTags) {\n      permissions.push(\"f\");\n    }\n\n    return permissions.join(\"\");\n  }\n\n}","map":{"version":3,"sources":["../../../../src/sas/ContainerSASPermissions.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class ContainerSASPermissions {\n  /**\n   * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): ContainerSASPermissions {\n    const containerSASPermissions = new ContainerSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          containerSASPermissions.read = true;\n          break;\n        case \"a\":\n          containerSASPermissions.add = true;\n          break;\n        case \"c\":\n          containerSASPermissions.create = true;\n          break;\n        case \"w\":\n          containerSASPermissions.write = true;\n          break;\n        case \"d\":\n          containerSASPermissions.delete = true;\n          break;\n        case \"l\":\n          containerSASPermissions.list = true;\n          break;\n        case \"t\":\n          containerSASPermissions.tag = true;\n          break;\n        case \"x\":\n          containerSASPermissions.deleteVersion = true;\n          break;\n        case \"m\":\n          containerSASPermissions.move = true;\n          break;\n        case \"e\":\n          containerSASPermissions.execute = true;\n          break;\n        case \"i\":\n          containerSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          containerSASPermissions.permanentDelete = true;\n          break;\n        case \"f\":\n          containerSASPermissions.filterByTags = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission ${char}`);\n      }\n    }\n\n    return containerSASPermissions;\n  }\n\n  /**\n   * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  public static from(permissionLike: ContainerSASPermissionsLike): ContainerSASPermissions {\n    const containerSASPermissions = new ContainerSASPermissions();\n    if (permissionLike.read) {\n      containerSASPermissions.read = true;\n    }\n    if (permissionLike.add) {\n      containerSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      containerSASPermissions.create = true;\n    }\n    if (permissionLike.write) {\n      containerSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      containerSASPermissions.delete = true;\n    }\n    if (permissionLike.list) {\n      containerSASPermissions.list = true;\n    }\n    if (permissionLike.deleteVersion) {\n      containerSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.tag) {\n      containerSASPermissions.tag = true;\n    }\n    if (permissionLike.move) {\n      containerSASPermissions.move = true;\n    }\n    if (permissionLike.execute) {\n      containerSASPermissions.execute = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      containerSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      containerSASPermissions.permanentDelete = true;\n    }\n    if (permissionLike.filterByTags) {\n      containerSASPermissions.filterByTags = true;\n    }\n    return containerSASPermissions;\n  }\n\n  /**\n   * Specifies Read access granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Specifies Add access granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Specifies Create access granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Specifies Write access granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  public deleteVersion: boolean = false;\n\n  /**\n   * Specifies List access granted.\n   */\n  public list: boolean = false;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  public tag: boolean = false;\n\n  /**\n   * Specifies Move access granted.\n   */\n  public move: boolean = false;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  public execute: boolean = false;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  public setImmutabilityPolicy: boolean = false;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  public permanentDelete: boolean = false;\n\n  /**\n   * Specifies that Filter Blobs by Tags is permitted.\n   */\n  public filterByTags: boolean = false;\n\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * The order of the characters should be as specified here to ensure correctness.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   */\n  public toString(): string {\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    if (this.filterByTags) {\n      permissions.push(\"f\");\n    }\n    return permissions.join(\"\");\n  }\n}\n\n/**\n * A type that looks like a Container SAS permission.\n * Used in {@link ContainerSASPermissions} to parse SAS permissions from raw objects.\n */\nexport interface ContainerSASPermissionsLike {\n  /**\n   * Specifies Read access granted.\n   */\n  read?: boolean;\n\n  /**\n   * Specifies Add access granted.\n   */\n  add?: boolean;\n\n  /**\n   * Specifies Create access granted.\n   */\n  create?: boolean;\n\n  /**\n   * Specifies Write access granted.\n   */\n  write?: boolean;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  delete?: boolean;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  deleteVersion?: boolean;\n\n  /**\n   * Specifies List access granted.\n   */\n  list?: boolean;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  tag?: boolean;\n\n  /**\n   * Specifies Move access granted.\n   */\n  move?: boolean;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  execute?: boolean;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  setImmutabilityPolicy?: boolean;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  permanentDelete?: boolean;\n\n  /**\n   * Specifies that Filter Blobs by Tags is permitted.\n   */\n  filterByTags?: boolean;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}