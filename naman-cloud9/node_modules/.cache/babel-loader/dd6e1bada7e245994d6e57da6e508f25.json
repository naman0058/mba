{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Map an optional value through a function\n * @internal\n */\nconst maybemap = (value, f) => value === undefined ? undefined : f(value);\n\nconst INTERRUPTED = new Error(\"The poller is already stopped\");\n/**\n * A promise that delays resolution until a certain amount of time (in milliseconds) has passed, with facilities for\n * robust cancellation.\n *\n * ### Example:\n *\n * ```javascript\n * let toCancel;\n *\n * // Wait 20 seconds, and optionally allow the function to be cancelled.\n * await delayMs(20000, (cancel) => { toCancel = cancel });\n *\n * // ... if `toCancel` is called before the 20 second timer expires, then the delayMs promise will reject.\n * ```\n *\n * @internal\n * @param ms - the number of milliseconds to wait before resolving\n * @param cb - a callback that can provide the caller with a cancellation function\n */\n\nexport function delayMs(ms) {\n  let aborted = false;\n  let toReject;\n  return Object.assign(new Promise((resolve, reject) => {\n    let token;\n\n    toReject = () => {\n      maybemap(token, clearTimeout);\n      reject(INTERRUPTED);\n    }; // In the rare case that the operation is _already_ aborted, we will reject instantly. This could happen, for\n    // example, if the user calls the cancellation function immediately without yielding execution.\n\n\n    if (aborted) {\n      toReject();\n    } else {\n      token = setTimeout(resolve, ms);\n    }\n  }), {\n    cancel: () => {\n      aborted = true;\n      toReject === null || toReject === void 0 ? void 0 : toReject();\n    }\n  });\n}","map":{"version":3,"sources":["../../../../src/poller/util/delayMs.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA;;;AAGG;AACH,MAAM,QAAQ,GAAG,CAAS,KAAT,EAAgC,CAAhC,KACf,KAAK,KAAK,SAAV,GAAsB,SAAtB,GAAkC,CAAC,CAAC,KAAD,CADrC;;AAKA,MAAM,WAAW,GAAG,IAAI,KAAJ,CAAU,+BAAV,CAApB;AAaA;;;;;;;;;;;;;;;;;;AAkBG;;AACH,OAAM,SAAU,OAAV,CAAkB,EAAlB,EAA4B;AAChC,MAAI,OAAO,GAAG,KAAd;AACA,MAAI,QAAJ;AAEA,SAAO,MAAM,CAAC,MAAP,CACL,IAAI,OAAJ,CAAkB,CAAC,OAAD,EAAU,MAAV,KAAoB;AACpC,QAAI,KAAJ;;AACA,IAAA,QAAQ,GAAG,MAAK;AACd,MAAA,QAAQ,CAAC,KAAD,EAAQ,YAAR,CAAR;AACA,MAAA,MAAM,CAAC,WAAD,CAAN;AACD,KAHD,CAFoC,CAOpC;AACA;;;AACA,QAAI,OAAJ,EAAa;AACX,MAAA,QAAQ;AACT,KAFD,MAEO;AACL,MAAA,KAAK,GAAG,UAAU,CAAC,OAAD,EAAU,EAAV,CAAlB;AACD;AACF,GAdD,CADK,EAgBL;AACE,IAAA,MAAM,EAAE,MAAK;AACX,MAAA,OAAO,GAAG,IAAV;AACA,MAAA,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,EAAR;AACD;AAJH,GAhBK,CAAP;AAuBD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Map an optional value through a function\n * @internal\n */\nconst maybemap = <T1, T2>(value: T1 | undefined, f: (v: T1) => T2): T2 | undefined =>\n  value === undefined ? undefined : f(value);\n\ntype CancellationToken = Parameters<typeof clearTimeout>[0];\n\nconst INTERRUPTED = new Error(\"The poller is already stopped\");\n\n/**\n * A PromiseLike object that supports cancellation.\n * @internal\n */\ninterface CancelablePromiseLike<T> extends PromiseLike<T> {\n  /**\n   * Cancel the promise (cause it to reject).\n   */\n  cancel(): void;\n}\n\n/**\n * A promise that delays resolution until a certain amount of time (in milliseconds) has passed, with facilities for\n * robust cancellation.\n *\n * ### Example:\n *\n * ```javascript\n * let toCancel;\n *\n * // Wait 20 seconds, and optionally allow the function to be cancelled.\n * await delayMs(20000, (cancel) => { toCancel = cancel });\n *\n * // ... if `toCancel` is called before the 20 second timer expires, then the delayMs promise will reject.\n * ```\n *\n * @internal\n * @param ms - the number of milliseconds to wait before resolving\n * @param cb - a callback that can provide the caller with a cancellation function\n */\nexport function delayMs(ms: number): CancelablePromiseLike<void> {\n  let aborted = false;\n  let toReject: (() => void) | undefined;\n\n  return Object.assign(\n    new Promise<void>((resolve, reject) => {\n      let token: CancellationToken | undefined;\n      toReject = () => {\n        maybemap(token, clearTimeout);\n        reject(INTERRUPTED);\n      };\n\n      // In the rare case that the operation is _already_ aborted, we will reject instantly. This could happen, for\n      // example, if the user calls the cancellation function immediately without yielding execution.\n      if (aborted) {\n        toReject();\n      } else {\n        token = setTimeout(resolve, ms);\n      }\n    }),\n    {\n      cancel: () => {\n        aborted = true;\n        toReject?.();\n      },\n    }\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}