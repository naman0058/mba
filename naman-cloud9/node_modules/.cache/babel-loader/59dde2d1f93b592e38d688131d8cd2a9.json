{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy, isNode } from \"@azure/core-http\";\nimport { HeaderConstants, URLConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n */\n\nexport class StorageBrowserPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of StorageBrowserPolicy.\n   * @param nextPolicy -\n   * @param options -\n   */\n  // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n\n  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n  constructor(nextPolicy, options) {\n    super(nextPolicy, options);\n  }\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n\n\n  async sendRequest(request) {\n    if (isNode) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n      request.url = setURLParameter(request.url, URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n    }\n\n    request.headers.remove(HeaderConstants.COOKIE); // According to XHR standards, content-length should be fully controlled by browsers\n\n    request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n    return this._nextPolicy.sendRequest(request);\n  }\n\n}","map":{"version":3,"sources":["../../../../src/policies/StorageBrowserPolicy.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SACE,iBADF,EAGE,MAHF,QAOO,kBAPP;AASA,SAAS,eAAT,EAA0B,YAA1B,QAA8C,oBAA9C;AACA,SAAS,eAAT,QAAgC,uBAAhC;AAEA;;;;;;;;;;AAUG;;AACH,OAAM,MAAO,oBAAP,SAAoC,iBAApC,CAAqD;AACzD;;;;AAIG;AACH;;AACA;AACA,EAAA,WAAA,CAAY,UAAZ,EAAuC,OAAvC,EAAoE;AAClE,UAAM,UAAN,EAAkB,OAAlB;AACD;AAED;;;;AAIG;;;AACqB,QAAX,WAAW,CAAC,OAAD,EAAqB;AAC3C,QAAI,MAAJ,EAAY;AACV,aAAO,KAAK,WAAL,CAAiB,WAAjB,CAA6B,OAA7B,CAAP;AACD;;AAED,QAAI,OAAO,CAAC,MAAR,CAAe,WAAf,OAAiC,KAAjC,IAA0C,OAAO,CAAC,MAAR,CAAe,WAAf,OAAiC,MAA/E,EAAuF;AACrF,MAAA,OAAO,CAAC,GAAR,GAAc,eAAe,CAC3B,OAAO,CAAC,GADmB,EAE3B,YAAY,CAAC,UAAb,CAAwB,sBAFG,EAG3B,IAAI,IAAJ,GAAW,OAAX,GAAqB,QAArB,EAH2B,CAA7B;AAKD;;AAED,IAAA,OAAO,CAAC,OAAR,CAAgB,MAAhB,CAAuB,eAAe,CAAC,MAAvC,EAb2C,CAe3C;;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,MAAhB,CAAuB,eAAe,CAAC,cAAvC;AAEA,WAAO,KAAK,WAAL,CAAiB,WAAjB,CAA6B,OAA7B,CAAP;AACD;;AApCwD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource,\n} from \"@azure/core-http\";\n\nimport { HeaderConstants, URLConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n */\nexport class StorageBrowserPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of StorageBrowserPolicy.\n   * @param nextPolicy -\n   * @param options -\n   */\n  // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n      request.url = setURLParameter(\n        request.url,\n        URLConstants.Parameters.FORCE_BROWSER_NO_CACHE,\n        new Date().getTime().toString()\n      );\n    }\n\n    request.headers.remove(HeaderConstants.COOKIE);\n\n    // According to XHR standards, content-length should be fully controlled by browsers\n    request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}