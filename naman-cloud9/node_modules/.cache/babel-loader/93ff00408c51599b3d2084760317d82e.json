{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AccountSASPermissions } from \"./AccountSASPermissions\";\nimport { AccountSASResourceTypes } from \"./AccountSASResourceTypes\";\nimport { AccountSASServices } from \"./AccountSASServices\";\nimport { ipRangeToString } from \"./SasIPRange\";\nimport { SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual\n * REST request.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n * @param accountSASSignatureValues -\n * @param sharedKeyCredential -\n */\n\nexport function generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {\n  const version = accountSASSignatureValues.version ? accountSASSignatureValues.version : SERVICE_VERSION;\n\n  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.setImmutabilityPolicy && version < \"2020-08-04\") {\n    throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n  }\n\n  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.deleteVersion && version < \"2019-10-10\") {\n    throw RangeError(\"'version' must be >= '2019-10-10' when provided 'x' permission.\");\n  }\n\n  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.permanentDelete && version < \"2019-10-10\") {\n    throw RangeError(\"'version' must be >= '2019-10-10' when provided 'y' permission.\");\n  }\n\n  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.tag && version < \"2019-12-12\") {\n    throw RangeError(\"'version' must be >= '2019-12-12' when provided 't' permission.\");\n  }\n\n  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.filter && version < \"2019-12-12\") {\n    throw RangeError(\"'version' must be >= '2019-12-12' when provided 'f' permission.\");\n  }\n\n  if (accountSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n    throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n  }\n\n  const parsedPermissions = AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString());\n  const parsedServices = AccountSASServices.parse(accountSASSignatureValues.services).toString();\n  const parsedResourceTypes = AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();\n  let stringToSign;\n\n  if (version >= \"2020-12-06\") {\n    stringToSign = [sharedKeyCredential.accountName, parsedPermissions, parsedServices, parsedResourceTypes, accountSASSignatureValues.startsOn ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false) : \"\", truncatedISO8061Date(accountSASSignatureValues.expiresOn, false), accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\", accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\", version, accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : \"\", \"\" // Account SAS requires an additional newline character\n    ].join(\"\\n\");\n  } else {\n    stringToSign = [sharedKeyCredential.accountName, parsedPermissions, parsedServices, parsedResourceTypes, accountSASSignatureValues.startsOn ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false) : \"\", truncatedISO8061Date(accountSASSignatureValues.expiresOn, false), accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\", accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\", version, \"\" // Account SAS requires an additional newline character\n    ].join(\"\\n\");\n  }\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(version, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, accountSASSignatureValues.encryptionScope);\n}","map":{"version":3,"sources":["../../../../src/sas/AccountSASSignatureValues.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccountSASPermissions } from \"./AccountSASPermissions\";\nimport { AccountSASResourceTypes } from \"./AccountSASResourceTypes\";\nimport { AccountSASServices } from \"./AccountSASServices\";\nimport { StorageSharedKeyCredential } from \"../credentials/StorageSharedKeyCredential\";\nimport { SasIPRange, ipRangeToString } from \"./SasIPRange\";\nimport { SASProtocol, SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * AccountSASSignatureValues is used to generate a Shared Access Signature (SAS) for an Azure Storage account. Once\n * all the values here are set appropriately, call {@link generateAccountSASQueryParameters} to obtain a representation\n * of the SAS which can actually be applied to blob urls. Note: that both this class and {@link SASQueryParameters}\n * exist because the former is mutable and a logical representation while the latter is immutable and used to generate\n * actual REST requests.\n *\n * @see https://docs.microsoft.com/en-us/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n * for more conceptual information on SAS\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n * for descriptions of the parameters, including which are required\n */\nexport interface AccountSASSignatureValues {\n  /**\n   * If not provided, this defaults to the service version targeted by this version of the library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols allowed.\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * The time after which the SAS will no longer work.\n   */\n  expiresOn: Date;\n\n  /**\n   * Specifies which operations the SAS user may perform. Please refer to {@link AccountSASPermissions} for help\n   * constructing the permissions string.\n   */\n  permissions: AccountSASPermissions;\n\n  /**\n   * Optional. IP range allowed.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * The values that indicate the services accessible with this SAS. Please refer to {@link AccountSASServices} to\n   * construct this value.\n   */\n  services: string;\n\n  /**\n   * The values that indicate the resource types accessible with this SAS. Please refer\n   * to {@link AccountSASResourceTypes} to construct this value.\n   */\n  resourceTypes: string;\n\n  /**\n   * Optional. Encryption scope to use when sending requests authorized with this SAS URI.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual\n * REST request.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n * @param accountSASSignatureValues -\n * @param sharedKeyCredential -\n */\nexport function generateAccountSASQueryParameters(\n  accountSASSignatureValues: AccountSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  const version = accountSASSignatureValues.version\n    ? accountSASSignatureValues.version\n    : SERVICE_VERSION;\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.setImmutabilityPolicy &&\n    version < \"2020-08-04\"\n  ) {\n    throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n  }\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.deleteVersion &&\n    version < \"2019-10-10\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-10-10' when provided 'x' permission.\");\n  }\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.permanentDelete &&\n    version < \"2019-10-10\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-10-10' when provided 'y' permission.\");\n  }\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.tag &&\n    version < \"2019-12-12\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-12-12' when provided 't' permission.\");\n  }\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.filter &&\n    version < \"2019-12-12\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-12-12' when provided 'f' permission.\");\n  }\n\n  if (accountSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n    throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n  }\n\n  const parsedPermissions = AccountSASPermissions.parse(\n    accountSASSignatureValues.permissions.toString()\n  );\n  const parsedServices = AccountSASServices.parse(accountSASSignatureValues.services).toString();\n  const parsedResourceTypes = AccountSASResourceTypes.parse(\n    accountSASSignatureValues.resourceTypes\n  ).toString();\n\n  let stringToSign: string;\n\n  if (version >= \"2020-12-06\") {\n    stringToSign = [\n      sharedKeyCredential.accountName,\n      parsedPermissions,\n      parsedServices,\n      parsedResourceTypes,\n      accountSASSignatureValues.startsOn\n        ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false)\n        : \"\",\n      truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),\n      accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\",\n      accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n      version,\n      accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : \"\",\n      \"\", // Account SAS requires an additional newline character\n    ].join(\"\\n\");\n  } else {\n    stringToSign = [\n      sharedKeyCredential.accountName,\n      parsedPermissions,\n      parsedServices,\n      parsedResourceTypes,\n      accountSASSignatureValues.startsOn\n        ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false)\n        : \"\",\n      truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),\n      accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\",\n      accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n      version,\n      \"\", // Account SAS requires an additional newline character\n    ].join(\"\\n\");\n  }\n\n  const signature: string = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    parsedPermissions.toString(),\n    parsedServices,\n    parsedResourceTypes,\n    accountSASSignatureValues.protocol,\n    accountSASSignatureValues.startsOn,\n    accountSASSignatureValues.expiresOn,\n    accountSASSignatureValues.ipRange,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    accountSASSignatureValues.encryptionScope\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}