{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Converts a base64 string into a byte array.\n * @param content - The base64 string to convert.\n * @internal\n */\nexport function base64ToBytes(content) {\n  if (typeof atob !== \"function\") {\n    throw new Error(`Your browser environment is missing the global \"atob\" function.`);\n  }\n\n  const binary = atob(content);\n  const bytes = new Uint8Array(binary.length);\n\n  for (let i = 0; i < binary.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n\n  return bytes;\n}\n/**\n * Converts an ArrayBuffer to base64 string.\n * @param buffer - Raw binary data.\n * @internal\n */\n\nexport function bufferToBase64(buffer) {\n  if (typeof btoa !== \"function\") {\n    throw new Error(`Your browser environment is missing the global \"btoa\" function.`);\n  }\n\n  const bytes = new Uint8Array(buffer);\n  let binary = \"\";\n\n  for (const byte of bytes) {\n    binary += String.fromCharCode(byte);\n  }\n\n  return btoa(binary);\n}","map":{"version":3,"sources":["../../src/base64.browser.ts"],"names":[],"mappings":"AAAA;AACA;;AAQA;;;;AAIG;AACH,OAAM,SAAU,aAAV,CAAwB,OAAxB,EAAuC;AAC3C,MAAI,OAAO,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAM,IAAI,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAED,QAAM,MAAM,GAAG,IAAI,CAAC,OAAD,CAAnB;AACA,QAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,MAAM,CAAC,MAAtB,CAAd;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,IAAA,KAAK,CAAC,CAAD,CAAL,GAAW,MAAM,CAAC,UAAP,CAAkB,CAAlB,CAAX;AACD;;AAED,SAAO,KAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,cAAV,CAAyB,MAAzB,EAA4C;AAChD,MAAI,OAAO,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAM,IAAI,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAED,QAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,MAAf,CAAd;AACA,MAAI,MAAM,GAAG,EAAb;;AACA,OAAK,MAAM,IAAX,IAAmB,KAAnB,EAA0B;AACxB,IAAA,MAAM,IAAI,MAAM,CAAC,YAAP,CAAoB,IAApB,CAAV;AACD;;AACD,SAAO,IAAI,CAAC,MAAD,CAAX;AACD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare global {\n  // stub these out for the browser\n  function btoa(input: string): string;\n  function atob(input: string): string;\n}\n\n/**\n * Converts a base64 string into a byte array.\n * @param content - The base64 string to convert.\n * @internal\n */\nexport function base64ToBytes(content: string): Uint8Array {\n  if (typeof atob !== \"function\") {\n    throw new Error(`Your browser environment is missing the global \"atob\" function.`);\n  }\n\n  const binary = atob(content);\n  const bytes = new Uint8Array(binary.length);\n  for (let i = 0; i < binary.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n\n  return bytes;\n}\n\n/**\n * Converts an ArrayBuffer to base64 string.\n * @param buffer - Raw binary data.\n * @internal\n */\nexport function bufferToBase64(buffer: ArrayBuffer): string {\n  if (typeof btoa !== \"function\") {\n    throw new Error(`Your browser environment is missing the global \"btoa\" function.`);\n  }\n\n  const bytes = new Uint8Array(buffer);\n  let binary = \"\";\n  for (const byte of bytes) {\n    binary += String.fromCharCode(byte);\n  }\n  return btoa(binary);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}