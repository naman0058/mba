{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\n/**\n * Creates an abortable promise.\n * @param buildPromise - A function that takes the resolve and reject functions as parameters.\n * @param options - The options for the abortable promise.\n * @returns A promise that can be aborted.\n */\n\nexport function createAbortablePromise(buildPromise, options) {\n  const {\n    cleanupBeforeAbort,\n    abortSignal,\n    abortErrorMsg\n  } = options !== null && options !== void 0 ? options : {};\n  return new Promise((resolve, reject) => {\n    function rejectOnAbort() {\n      reject(new AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : \"The operation was aborted.\"));\n    }\n\n    function removeListeners() {\n      abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener(\"abort\", onAbort);\n    }\n\n    function onAbort() {\n      cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();\n      removeListeners();\n      rejectOnAbort();\n    }\n\n    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n      return rejectOnAbort();\n    }\n\n    try {\n      buildPromise(x => {\n        removeListeners();\n        resolve(x);\n      }, x => {\n        removeListeners();\n        reject(x);\n      });\n    } catch (err) {\n      reject(err);\n    }\n\n    abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener(\"abort\", onAbort);\n  });\n}","map":{"version":3,"sources":["../../src/createAbortablePromise.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,UAAT,QAA4C,yBAA5C;AAcA;;;;;AAKG;;AACH,OAAM,SAAU,sBAAV,CACJ,YADI,EAKJ,OALI,EAKmC;AAEvC,QAAM;AAAE,IAAA,kBAAF;AAAsB,IAAA,WAAtB;AAAmC,IAAA;AAAnC,MAAqD,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAA,OAAA,GAAW,EAAtE;AACA,SAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,aAAS,aAAT,GAAsB;AACpB,MAAA,MAAM,CAAC,IAAI,UAAJ,CAAe,aAAa,KAAA,IAAb,IAAA,aAAa,KAAA,KAAA,CAAb,GAAA,aAAA,GAAiB,4BAAhC,CAAD,CAAN;AACD;;AACD,aAAS,eAAT,GAAwB;AACtB,MAAA,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAE,mBAAb,CAAiC,OAAjC,EAA0C,OAA1C,CAAA;AACD;;AACD,aAAS,OAAT,GAAgB;AACd,MAAA,kBAAkB,KAAA,IAAlB,IAAA,kBAAkB,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAA,kBAAkB,EAAlB;AACA,MAAA,eAAe;AACf,MAAA,aAAa;AACd;;AACD,QAAI,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAE,OAAjB,EAA0B;AACxB,aAAO,aAAa,EAApB;AACD;;AACD,QAAI;AACF,MAAA,YAAY,CACT,CAAD,IAAM;AACJ,QAAA,eAAe;AACf,QAAA,OAAO,CAAC,CAAD,CAAP;AACD,OAJS,EAKT,CAAD,IAAM;AACJ,QAAA,eAAe;AACf,QAAA,MAAM,CAAC,CAAD,CAAN;AACD,OARS,CAAZ;AAUD,KAXD,CAWE,OAAO,GAAP,EAAY;AACZ,MAAA,MAAM,CAAC,GAAD,CAAN;AACD;;AACD,IAAA,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAE,gBAAb,CAA8B,OAA9B,EAAuC,OAAvC,CAAA;AACD,GA9BM,CAAP;AA+BD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError, AbortSignalLike } from \"@azure/abort-controller\";\n\n/**\n * Options for the createAbortablePromise function.\n */\nexport interface CreateAbortablePromiseOptions {\n  /** A function to be called if the promise was aborted */\n  cleanupBeforeAbort?: () => void;\n  /** An abort signal */\n  abortSignal?: AbortSignalLike;\n  /** An abort error message */\n  abortErrorMsg?: string;\n}\n\n/**\n * Creates an abortable promise.\n * @param buildPromise - A function that takes the resolve and reject functions as parameters.\n * @param options - The options for the abortable promise.\n * @returns A promise that can be aborted.\n */\nexport function createAbortablePromise<T>(\n  buildPromise: (\n    resolve: (value: T | PromiseLike<T>) => void,\n    reject: (reason?: any) => void\n  ) => void,\n  options?: CreateAbortablePromiseOptions\n): Promise<T> {\n  const { cleanupBeforeAbort, abortSignal, abortErrorMsg } = options ?? {};\n  return new Promise((resolve, reject) => {\n    function rejectOnAbort(): void {\n      reject(new AbortError(abortErrorMsg ?? \"The operation was aborted.\"));\n    }\n    function removeListeners(): void {\n      abortSignal?.removeEventListener(\"abort\", onAbort);\n    }\n    function onAbort(): void {\n      cleanupBeforeAbort?.();\n      removeListeners();\n      rejectOnAbort();\n    }\n    if (abortSignal?.aborted) {\n      return rejectOnAbort();\n    }\n    try {\n      buildPromise(\n        (x) => {\n          removeListeners();\n          resolve(x);\n        },\n        (x) => {\n          removeListeners();\n          reject(x);\n        }\n      );\n    } catch (err) {\n      reject(err);\n    }\n    abortSignal?.addEventListener(\"abort\", onAbort);\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}