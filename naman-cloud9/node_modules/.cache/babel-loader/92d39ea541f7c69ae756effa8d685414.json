{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"../policies/requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"@azure/core-util\"; // Default options for the cycler if none are provided\n\nexport const DEFAULT_CYCLER_OPTIONS = {\n  forcedRefreshWindowInMs: 1000,\n  retryIntervalInMs: 3000,\n  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\n\nasync function beginRefresh(getAccessToken, retryIntervalInMs, timeoutInMs) {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken() {\n    if (Date.now() < timeoutInMs) {\n      try {\n        return await getAccessToken();\n      } catch (_a) {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken(); // Timeout is up, so throw if it's still null\n\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\n\n\nfunction createTokenCycler(credential, scopes, tokenCyclerOptions) {\n  let refreshWorker = null;\n  let token = null;\n  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing() {\n      return refreshWorker !== null;\n    },\n\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh() {\n      var _a;\n\n      return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n    },\n\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh() {\n      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();\n    }\n\n  };\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n\n  function refresh(getTokenOptions) {\n    var _a;\n\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions); // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n\n\n      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, // If we don't have a token, then we should timeout immediately\n      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(_token => {\n        refreshWorker = null;\n        token = _token;\n        return token;\n      }).catch(reason => {\n        // We also should reset the refresher if we enter a failed state.  All\n        // existing awaiters will throw, but subsequent requests will start a\n        // new retry chain.\n        refreshWorker = null;\n        token = null;\n        throw reason;\n      });\n    }\n\n    return refreshWorker;\n  }\n\n  return async tokenOptions => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n    if (cycler.mustRefresh) return refresh(tokenOptions);\n\n    if (cycler.shouldRefresh) {\n      refresh(tokenOptions);\n    }\n\n    return token;\n  };\n} // #endregion\n\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\n\n\nexport function bearerTokenAuthenticationPolicy(credential, scopes) {\n  // This simple function encapsulates the entire process of reliably retrieving the token\n  const getToken = createTokenCycler(credential, scopes\n  /* , options */\n  );\n\n  class BearerTokenAuthenticationPolicy extends BaseRequestPolicy {\n    constructor(nextPolicy, options) {\n      super(nextPolicy, options);\n    }\n\n    async sendRequest(webResource) {\n      if (!webResource.url.toLowerCase().startsWith(\"https://\")) {\n        throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n      }\n\n      const {\n        token\n      } = await getToken({\n        abortSignal: webResource.abortSignal,\n        tracingOptions: {\n          tracingContext: webResource.tracingContext\n        }\n      });\n      webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n      return this._nextPolicy.sendRequest(webResource);\n    }\n\n  }\n\n  return {\n    create: (nextPolicy, options) => {\n      return new BearerTokenAuthenticationPolicy(nextPolicy, options);\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/policies/bearerTokenAuthenticationPolicy.ts"],"names":[],"mappings":"AAAA;AACA;AAGA,SACE,iBADF,QAKO,2BALP;AAMA,SAAS,SAAT,QAA0B,mBAA1B;AAGA,SAAS,KAAT,QAAsB,kBAAtB,C,CAiCA;;AACA,OAAO,MAAM,sBAAsB,GAAuB;AACxD,EAAA,uBAAuB,EAAE,IAD+B;AAExD,EAAA,iBAAiB,EAAE,IAFqC;AAGxD,EAAA,iBAAiB,EAAE,OAAO,EAAP,GAAY,CAHyB,CAGtB;;AAHsB,CAAnD;AAMP;;;;;;;;;;;;AAYG;;AACH,eAAe,YAAf,CACE,cADF,EAEE,iBAFF,EAGE,WAHF,EAGqB;AAEnB;AACA;AACA,iBAAe,iBAAf,GAAgC;AAC9B,QAAI,IAAI,CAAC,GAAL,KAAa,WAAjB,EAA8B;AAC5B,UAAI;AACF,eAAO,MAAM,cAAc,EAA3B;AACD,OAFD,CAEE,OAAA,EAAA,EAAM;AACN,eAAO,IAAP;AACD;AACF,KAND,MAMO;AACL,YAAM,UAAU,GAAG,MAAM,cAAc,EAAvC,CADK,CAGL;;AACA,UAAI,UAAU,KAAK,IAAnB,EAAyB;AACvB,cAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,aAAO,UAAP;AACD;AACF;;AAED,MAAI,KAAK,GAAuB,MAAM,iBAAiB,EAAvD;;AAEA,SAAO,KAAK,KAAK,IAAjB,EAAuB;AACrB,UAAM,KAAK,CAAC,iBAAD,CAAX;AAEA,IAAA,KAAK,GAAG,MAAM,iBAAiB,EAA/B;AACD;;AAED,SAAO,KAAP;AACD;AAED;;;;;;;;;;;;;;AAcG;;;AACH,SAAS,iBAAT,CACE,UADF,EAEE,MAFF,EAGE,kBAHF,EAGkD;AAEhD,MAAI,aAAa,GAAgC,IAAjD;AACA,MAAI,KAAK,GAAuB,IAAhC;AAEA,QAAM,OAAO,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACR,sBADQ,CAAA,EAER,kBAFQ,CAAb;AAKA;;;AAGG;;AACH,QAAM,MAAM,GAAG;AACb;;AAEG;AACH,QAAI,YAAJ,GAAgB;AACd,aAAO,aAAa,KAAK,IAAzB;AACD,KANY;;AAOb;;;AAGG;AACH,QAAI,aAAJ,GAAiB;;;AACf,aACE,CAAC,MAAM,CAAC,YAAR,IACA,CAAC,CAAA,EAAA,GAAA,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,kBAAP,MAAyB,IAAzB,IAAyB,EAAA,KAAA,KAAA,CAAzB,GAAyB,EAAzB,GAA6B,CAA9B,IAAmC,OAAO,CAAC,iBAA3C,GAA+D,IAAI,CAAC,GAAL,EAFjE;AAID,KAhBY;;AAiBb;;;AAGG;AACH,QAAI,WAAJ,GAAe;AACb,aACE,KAAK,KAAK,IAAV,IAAkB,KAAK,CAAC,kBAAN,GAA2B,OAAO,CAAC,uBAAnC,GAA6D,IAAI,CAAC,GAAL,EADjF;AAGD;;AAzBY,GAAf;AA4BA;;;AAGG;;AACH,WAAS,OAAT,CAAiB,eAAjB,EAAiD;;;AAC/C,QAAI,CAAC,MAAM,CAAC,YAAZ,EAA0B;AACxB;AACA,YAAM,iBAAiB,GAAG,MACxB,UAAU,CAAC,QAAX,CAAoB,MAApB,EAA4B,eAA5B,CADF,CAFwB,CAKxB;AACA;;;AACA,MAAA,aAAa,GAAG,YAAY,CAC1B,iBAD0B,EAE1B,OAAO,CAAC,iBAFkB,EAG1B;AACA,OAAA,EAAA,GAAA,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,kBAAP,MAAyB,IAAzB,IAAyB,EAAA,KAAA,KAAA,CAAzB,GAAyB,EAAzB,GAA6B,IAAI,CAAC,GAAL,EAJH,CAAZ,CAMb,IANa,CAMP,MAAD,IAAW;AACf,QAAA,aAAa,GAAG,IAAhB;AACA,QAAA,KAAK,GAAG,MAAR;AACA,eAAO,KAAP;AACD,OAVa,EAWb,KAXa,CAWN,MAAD,IAAW;AAChB;AACA;AACA;AACA,QAAA,aAAa,GAAG,IAAhB;AACA,QAAA,KAAK,GAAG,IAAR;AACA,cAAM,MAAN;AACD,OAlBa,CAAhB;AAmBD;;AAED,WAAO,aAAP;AACD;;AAED,SAAO,MAAO,YAAP,IAA8D;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAI,MAAM,CAAC,WAAX,EAAwB,OAAO,OAAO,CAAC,YAAD,CAAd;;AAExB,QAAI,MAAM,CAAC,aAAX,EAA0B;AACxB,MAAA,OAAO,CAAC,YAAD,CAAP;AACD;;AAED,WAAO,KAAP;AACD,GAlBD;AAmBD,C,CAED;;AAEA;;;;;;AAMG;;;AACH,OAAM,SAAU,+BAAV,CACJ,UADI,EAEJ,MAFI,EAEqB;AAEzB;AACA,QAAM,QAAQ,GAAG,iBAAiB,CAAC,UAAD,EAAa;AAAO;AAApB,GAAlC;;AAEA,QAAM,+BAAN,SAA8C,iBAA9C,CAA+D;AAC7D,IAAA,WAAA,CAAmB,UAAnB,EAA8C,OAA9C,EAA2E;AACzE,YAAM,UAAN,EAAkB,OAAlB;AACD;;AAEuB,UAAX,WAAW,CAAC,WAAD,EAA6B;AACnD,UAAI,CAAC,WAAW,CAAC,GAAZ,CAAgB,WAAhB,GAA8B,UAA9B,CAAyC,UAAzC,CAAL,EAA2D;AACzD,cAAM,IAAI,KAAJ,CACJ,sFADI,CAAN;AAGD;;AAED,YAAM;AAAE,QAAA;AAAF,UAAY,MAAM,QAAQ,CAAC;AAC/B,QAAA,WAAW,EAAE,WAAW,CAAC,WADM;AAE/B,QAAA,cAAc,EAAE;AACd,UAAA,cAAc,EAAE,WAAW,CAAC;AADd;AAFe,OAAD,CAAhC;AAMA,MAAA,WAAW,CAAC,OAAZ,CAAoB,GAApB,CAAwB,SAAS,CAAC,eAAV,CAA0B,aAAlD,EAAiE,UAAU,KAAK,EAAhF;AACA,aAAO,KAAK,WAAL,CAAiB,WAAjB,CAA6B,WAA7B,CAAP;AACD;;AApB4D;;AAuB/D,SAAO;AACL,IAAA,MAAM,EAAE,CAAC,UAAD,EAA4B,OAA5B,KAA6D;AACnE,aAAO,IAAI,+BAAJ,CAAoC,UAApC,EAAgD,OAAhD,CAAP;AACD;AAHI,GAAP;AAKD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"../policies/requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"@azure/core-util\";\n\n// #region Access Token Cycler\n\n/**\n * A function that gets a promise of an access token and allows providing\n * options.\n *\n * @param options - the options to pass to the underlying token provider\n */\ntype AccessTokenGetter = (options: GetTokenOptions) => Promise<AccessToken>;\n\ninterface TokenCyclerOptions {\n  /**\n   * The window of time before token expiration during which the token will be\n   * considered unusable due to risk of the token expiring before sending the\n   * request.\n   *\n   * This will only become meaningful if the refresh fails for over\n   * (refreshWindow - forcedRefreshWindow) milliseconds.\n   */\n  forcedRefreshWindowInMs: number;\n  /**\n   * Interval in milliseconds to retry failed token refreshes.\n   */\n  retryIntervalInMs: number;\n  /**\n   * The window of time before token expiration during which\n   * we will attempt to refresh the token.\n   */\n  refreshWindowInMs: number;\n}\n\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS: TokenCyclerOptions = {\n  forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\nasync function beginRefresh(\n  getAccessToken: () => Promise<AccessToken | null>,\n  retryIntervalInMs: number,\n  timeoutInMs: number\n): Promise<AccessToken> {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken(): Promise<AccessToken | null> {\n    if (Date.now() < timeoutInMs) {\n      try {\n        return await getAccessToken();\n      } catch {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token: AccessToken | null = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(\n  credential: TokenCredential,\n  scopes: string | string[],\n  tokenCyclerOptions?: Partial<TokenCyclerOptions>\n): AccessTokenGetter {\n  let refreshWorker: Promise<AccessToken> | null = null;\n  let token: AccessToken | null = null;\n\n  const options = {\n    ...DEFAULT_CYCLER_OPTIONS,\n    ...tokenCyclerOptions,\n  };\n\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing(): boolean {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh(): boolean {\n      return (\n        !cycler.isRefreshing &&\n        (token?.expiresOnTimestamp ?? 0) - options.refreshWindowInMs < Date.now()\n      );\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh(): boolean {\n      return (\n        token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now()\n      );\n    },\n  };\n\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(getTokenOptions: GetTokenOptions): Promise<AccessToken> {\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = (): Promise<AccessToken | null> =>\n        credential.getToken(scopes, getTokenOptions);\n\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(\n        tryGetAccessToken,\n        options.retryIntervalInMs,\n        // If we don't have a token, then we should timeout immediately\n        token?.expiresOnTimestamp ?? Date.now()\n      )\n        .then((_token) => {\n          refreshWorker = null;\n          token = _token;\n          return token;\n        })\n        .catch((reason) => {\n          // We also should reset the refresher if we enter a failed state.  All\n          // existing awaiters will throw, but subsequent requests will start a\n          // new retry chain.\n          refreshWorker = null;\n          token = null;\n          throw reason;\n        });\n    }\n\n    return refreshWorker as Promise<AccessToken>;\n  }\n\n  return async (tokenOptions: GetTokenOptions): Promise<AccessToken> => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n\n    if (cycler.mustRefresh) return refresh(tokenOptions);\n\n    if (cycler.shouldRefresh) {\n      refresh(tokenOptions);\n    }\n\n    return token as AccessToken;\n  };\n}\n\n// #endregion\n\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\nexport function bearerTokenAuthenticationPolicy(\n  credential: TokenCredential,\n  scopes: string | string[]\n): RequestPolicyFactory {\n  // This simple function encapsulates the entire process of reliably retrieving the token\n  const getToken = createTokenCycler(credential, scopes /* , options */);\n\n  class BearerTokenAuthenticationPolicy extends BaseRequestPolicy {\n    public constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      super(nextPolicy, options);\n    }\n\n    public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n      if (!webResource.url.toLowerCase().startsWith(\"https://\")) {\n        throw new Error(\n          \"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\"\n        );\n      }\n\n      const { token } = await getToken({\n        abortSignal: webResource.abortSignal,\n        tracingOptions: {\n          tracingContext: webResource.tracingContext,\n        },\n      });\n      webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n      return this._nextPolicy.sendRequest(webResource);\n    }\n  }\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new BearerTokenAuthenticationPolicy(nextPolicy, options);\n    },\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}