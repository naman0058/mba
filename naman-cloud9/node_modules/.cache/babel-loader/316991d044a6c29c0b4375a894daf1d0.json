{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class BlobSASPermissions {\n  constructor() {\n    /**\n     * Specifies Read access granted.\n     */\n    this.read = false;\n    /**\n     * Specifies Add access granted.\n     */\n\n    this.add = false;\n    /**\n     * Specifies Create access granted.\n     */\n\n    this.create = false;\n    /**\n     * Specifies Write access granted.\n     */\n\n    this.write = false;\n    /**\n     * Specifies Delete access granted.\n     */\n\n    this.delete = false;\n    /**\n     * Specifies Delete version access granted.\n     */\n\n    this.deleteVersion = false;\n    /**\n     * Specfies Tag access granted.\n     */\n\n    this.tag = false;\n    /**\n     * Specifies Move access granted.\n     */\n\n    this.move = false;\n    /**\n     * Specifies Execute access granted.\n     */\n\n    this.execute = false;\n    /**\n     * Specifies SetImmutabilityPolicy access granted.\n     */\n\n    this.setImmutabilityPolicy = false;\n    /**\n     * Specifies that Permanent Delete is permitted.\n     */\n\n    this.permanentDelete = false;\n  }\n  /**\n   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n\n\n  static parse(permissions) {\n    const blobSASPermissions = new BlobSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          blobSASPermissions.read = true;\n          break;\n\n        case \"a\":\n          blobSASPermissions.add = true;\n          break;\n\n        case \"c\":\n          blobSASPermissions.create = true;\n          break;\n\n        case \"w\":\n          blobSASPermissions.write = true;\n          break;\n\n        case \"d\":\n          blobSASPermissions.delete = true;\n          break;\n\n        case \"x\":\n          blobSASPermissions.deleteVersion = true;\n          break;\n\n        case \"t\":\n          blobSASPermissions.tag = true;\n          break;\n\n        case \"m\":\n          blobSASPermissions.move = true;\n          break;\n\n        case \"e\":\n          blobSASPermissions.execute = true;\n          break;\n\n        case \"i\":\n          blobSASPermissions.setImmutabilityPolicy = true;\n          break;\n\n        case \"y\":\n          blobSASPermissions.permanentDelete = true;\n          break;\n\n        default:\n          throw new RangeError(`Invalid permission: ${char}`);\n      }\n    }\n\n    return blobSASPermissions;\n  }\n  /**\n   * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n\n\n  static from(permissionLike) {\n    const blobSASPermissions = new BlobSASPermissions();\n\n    if (permissionLike.read) {\n      blobSASPermissions.read = true;\n    }\n\n    if (permissionLike.add) {\n      blobSASPermissions.add = true;\n    }\n\n    if (permissionLike.create) {\n      blobSASPermissions.create = true;\n    }\n\n    if (permissionLike.write) {\n      blobSASPermissions.write = true;\n    }\n\n    if (permissionLike.delete) {\n      blobSASPermissions.delete = true;\n    }\n\n    if (permissionLike.deleteVersion) {\n      blobSASPermissions.deleteVersion = true;\n    }\n\n    if (permissionLike.tag) {\n      blobSASPermissions.tag = true;\n    }\n\n    if (permissionLike.move) {\n      blobSASPermissions.move = true;\n    }\n\n    if (permissionLike.execute) {\n      blobSASPermissions.execute = true;\n    }\n\n    if (permissionLike.setImmutabilityPolicy) {\n      blobSASPermissions.setImmutabilityPolicy = true;\n    }\n\n    if (permissionLike.permanentDelete) {\n      blobSASPermissions.permanentDelete = true;\n    }\n\n    return blobSASPermissions;\n  }\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * @returns A string which represents the BlobSASPermissions\n   */\n\n\n  toString() {\n    const permissions = [];\n\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n\n    return permissions.join(\"\");\n  }\n\n}","map":{"version":3,"sources":["../../../../src/sas/BlobSASPermissions.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class BlobSASPermissions {\n  /**\n   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): BlobSASPermissions {\n    const blobSASPermissions = new BlobSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          blobSASPermissions.read = true;\n          break;\n        case \"a\":\n          blobSASPermissions.add = true;\n          break;\n        case \"c\":\n          blobSASPermissions.create = true;\n          break;\n        case \"w\":\n          blobSASPermissions.write = true;\n          break;\n        case \"d\":\n          blobSASPermissions.delete = true;\n          break;\n        case \"x\":\n          blobSASPermissions.deleteVersion = true;\n          break;\n        case \"t\":\n          blobSASPermissions.tag = true;\n          break;\n        case \"m\":\n          blobSASPermissions.move = true;\n          break;\n        case \"e\":\n          blobSASPermissions.execute = true;\n          break;\n        case \"i\":\n          blobSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          blobSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission: ${char}`);\n      }\n    }\n\n    return blobSASPermissions;\n  }\n\n  /**\n   * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  public static from(permissionLike: BlobSASPermissionsLike): BlobSASPermissions {\n    const blobSASPermissions = new BlobSASPermissions();\n    if (permissionLike.read) {\n      blobSASPermissions.read = true;\n    }\n    if (permissionLike.add) {\n      blobSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      blobSASPermissions.create = true;\n    }\n    if (permissionLike.write) {\n      blobSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      blobSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      blobSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.tag) {\n      blobSASPermissions.tag = true;\n    }\n    if (permissionLike.move) {\n      blobSASPermissions.move = true;\n    }\n    if (permissionLike.execute) {\n      blobSASPermissions.execute = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      blobSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      blobSASPermissions.permanentDelete = true;\n    }\n    return blobSASPermissions;\n  }\n\n  /**\n   * Specifies Read access granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Specifies Add access granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Specifies Create access granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Specifies Write access granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  public deleteVersion: boolean = false;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  public tag: boolean = false;\n\n  /**\n   * Specifies Move access granted.\n   */\n  public move: boolean = false;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  public execute: boolean = false;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  public setImmutabilityPolicy: boolean = false;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  public permanentDelete: boolean = false;\n\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * @returns A string which represents the BlobSASPermissions\n   */\n  public toString(): string {\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}\n\n/**\n * A type that looks like a Blob SAS permission.\n * Used in {@link BlobSASPermissions} to parse SAS permissions from raw objects.\n */\nexport interface BlobSASPermissionsLike {\n  /**\n   * Specifies Read access granted.\n   */\n  read?: boolean;\n\n  /**\n   * Specifies Add access granted.\n   */\n  add?: boolean;\n\n  /**\n   * Specifies Create access granted.\n   */\n  create?: boolean;\n\n  /**\n   * Specifies Write access granted.\n   */\n  write?: boolean;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  delete?: boolean;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  deleteVersion?: boolean;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  tag?: boolean;\n\n  /**\n   * Specifies Move access granted.\n   */\n  move?: boolean;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  execute?: boolean;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  setImmutabilityPolicy?: boolean;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  permanentDelete?: boolean;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}