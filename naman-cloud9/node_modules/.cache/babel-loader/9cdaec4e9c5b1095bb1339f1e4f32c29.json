{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObjectWithProperties } from \"./typeguards\";\n/**\n * A static name/key-based credential that supports updating\n * the underlying name and key values.\n */\n\nexport class AzureNamedKeyCredential {\n  /**\n   * Create an instance of an AzureNamedKeyCredential for use\n   * with a service client.\n   *\n   * @param name - The initial value of the name to use in authentication.\n   * @param key - The initial value of the key to use in authentication.\n   */\n  constructor(name, key) {\n    if (!name || !key) {\n      throw new TypeError(\"name and key must be non-empty strings\");\n    }\n\n    this._name = name;\n    this._key = key;\n  }\n  /**\n   * The value of the key to be used in authentication.\n   */\n\n\n  get key() {\n    return this._key;\n  }\n  /**\n   * The value of the name to be used in authentication.\n   */\n\n\n  get name() {\n    return this._name;\n  }\n  /**\n   * Change the value of the key.\n   *\n   * Updates will take effect upon the next request after\n   * updating the key value.\n   *\n   * @param newName - The new name value to be used.\n   * @param newKey - The new key value to be used.\n   */\n\n\n  update(newName, newKey) {\n    if (!newName || !newKey) {\n      throw new TypeError(\"newName and newKey must be non-empty strings\");\n    }\n\n    this._name = newName;\n    this._key = newKey;\n  }\n\n}\n/**\n * Tests an object to determine whether it implements NamedKeyCredential.\n *\n * @param credential - The assumed NamedKeyCredential to be tested.\n */\n\nexport function isNamedKeyCredential(credential) {\n  return isObjectWithProperties(credential, [\"name\", \"key\"]) && typeof credential.key === \"string\" && typeof credential.name === \"string\";\n}","map":{"version":3,"sources":["../../src/azureNamedKeyCredential.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,sBAAT,QAAuC,cAAvC;AAgBA;;;AAGG;;AACH,OAAM,MAAO,uBAAP,CAA8B;AAkBlC;;;;;;AAMG;AACH,EAAA,WAAA,CAAY,IAAZ,EAA0B,GAA1B,EAAqC;AACnC,QAAI,CAAC,IAAD,IAAS,CAAC,GAAd,EAAmB;AACjB,YAAM,IAAI,SAAJ,CAAc,wCAAd,CAAN;AACD;;AAED,SAAK,KAAL,GAAa,IAAb;AACA,SAAK,IAAL,GAAY,GAAZ;AACD;AA5BD;;AAEG;;;AACW,MAAH,GAAG,GAAA;AACZ,WAAO,KAAK,IAAZ;AACD;AAED;;AAEG;;;AACY,MAAJ,IAAI,GAAA;AACb,WAAO,KAAK,KAAZ;AACD;AAkBD;;;;;;;;AAQG;;;AACI,EAAA,MAAM,CAAC,OAAD,EAAkB,MAAlB,EAAgC;AAC3C,QAAI,CAAC,OAAD,IAAY,CAAC,MAAjB,EAAyB;AACvB,YAAM,IAAI,SAAJ,CAAc,8CAAd,CAAN;AACD;;AAED,SAAK,KAAL,GAAa,OAAb;AACA,SAAK,IAAL,GAAY,MAAZ;AACD;;AAlDiC;AAqDpC;;;;AAIG;;AACH,OAAM,SAAU,oBAAV,CAA+B,UAA/B,EAAkD;AACtD,SACE,sBAAsB,CAAC,UAAD,EAAa,CAAC,MAAD,EAAS,KAAT,CAAb,CAAtB,IACA,OAAO,UAAU,CAAC,GAAlB,KAA0B,QAD1B,IAEA,OAAO,UAAU,CAAC,IAAlB,KAA2B,QAH7B;AAKD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isObjectWithProperties } from \"./typeguards\";\n\n/**\n * Represents a credential defined by a static API name and key.\n */\nexport interface NamedKeyCredential {\n  /**\n   * The value of the API key represented as a string\n   */\n  readonly key: string;\n  /**\n   * The value of the API name represented as a string.\n   */\n  readonly name: string;\n}\n\n/**\n * A static name/key-based credential that supports updating\n * the underlying name and key values.\n */\nexport class AzureNamedKeyCredential implements NamedKeyCredential {\n  private _key: string;\n  private _name: string;\n\n  /**\n   * The value of the key to be used in authentication.\n   */\n  public get key(): string {\n    return this._key;\n  }\n\n  /**\n   * The value of the name to be used in authentication.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Create an instance of an AzureNamedKeyCredential for use\n   * with a service client.\n   *\n   * @param name - The initial value of the name to use in authentication.\n   * @param key - The initial value of the key to use in authentication.\n   */\n  constructor(name: string, key: string) {\n    if (!name || !key) {\n      throw new TypeError(\"name and key must be non-empty strings\");\n    }\n\n    this._name = name;\n    this._key = key;\n  }\n\n  /**\n   * Change the value of the key.\n   *\n   * Updates will take effect upon the next request after\n   * updating the key value.\n   *\n   * @param newName - The new name value to be used.\n   * @param newKey - The new key value to be used.\n   */\n  public update(newName: string, newKey: string): void {\n    if (!newName || !newKey) {\n      throw new TypeError(\"newName and newKey must be non-empty strings\");\n    }\n\n    this._name = newName;\n    this._key = newKey;\n  }\n}\n\n/**\n * Tests an object to determine whether it implements NamedKeyCredential.\n *\n * @param credential - The assumed NamedKeyCredential to be tested.\n */\nexport function isNamedKeyCredential(credential: unknown): credential is NamedKeyCredential {\n  return (\n    isObjectWithProperties(credential, [\"name\", \"key\"]) &&\n    typeof credential.key === \"string\" &&\n    typeof credential.name === \"string\"\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}