{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { baggageEntryMetadataFromString } from './baggage/utils'; // Context APIs\n\nexport { createContextKey, ROOT_CONTEXT } from './context/context'; // Diag APIs\n\nexport { DiagConsoleLogger } from './diag/consoleLogger';\nexport { DiagLogLevel } from './diag/types'; // Metrics APIs\n\nexport { createNoopMeter } from './metrics/NoopMeter';\nexport { ValueType } from './metrics/Metric'; // Propagation APIs\n\nexport { defaultTextMapGetter, defaultTextMapSetter } from './propagation/TextMapPropagator';\nexport { ProxyTracer } from './trace/ProxyTracer';\nexport { ProxyTracerProvider } from './trace/ProxyTracerProvider';\nexport { SamplingDecision } from './trace/SamplingResult';\nexport { SpanKind } from './trace/span_kind';\nexport { SpanStatusCode } from './trace/status';\nexport { TraceFlags } from './trace/trace_flags';\nexport { createTraceState } from './trace/internal/utils';\nexport { isSpanContextValid, isValidTraceId, isValidSpanId } from './trace/spancontext-utils';\nexport { INVALID_SPANID, INVALID_TRACEID, INVALID_SPAN_CONTEXT } from './trace/invalid-span-constants'; // Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\nimport { context } from './context-api';\nimport { diag } from './diag-api';\nimport { metrics } from './metrics-api';\nimport { propagation } from './propagation-api';\nimport { trace } from './trace-api'; // Named export.\n\nexport { context, diag, metrics, propagation, trace }; // Default export.\n\nexport default {\n  context: context,\n  diag: diag,\n  metrics: metrics,\n  propagation: propagation,\n  trace: trace\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAGH,SAAS,8BAAT,QAA+C,iBAA/C,C,CAKA;;AACA,SAAS,gBAAT,EAA2B,YAA3B,QAA+C,mBAA/C,C,CAIA;;AACA,SAAS,iBAAT,QAAkC,sBAAlC;AACA,SAGE,YAHF,QAMO,cANP,C,CASA;;AACA,SAAS,eAAT,QAAgC,qBAAhC;AAGA,SACE,SADF,QAcO,kBAdP,C,CAqBA;;AACA,SAIE,oBAJF,EAKE,oBALF,QAMO,iCANP;AAYA,SAAS,WAAT,QAA6C,qBAA7C;AACA,SAAS,mBAAT,QAAoC,6BAApC;AAEA,SAAS,gBAAT,QAAiD,wBAAjD;AAEA,SAAS,QAAT,QAAyB,mBAAzB;AAGA,SAAqB,cAArB,QAA2C,gBAA3C;AACA,SAAS,UAAT,QAA2B,qBAA3B;AAEA,SAAS,gBAAT,QAAiC,wBAAjC;AAIA,SACE,kBADF,EAEE,cAFF,EAGE,aAHF,QAIO,2BAJP;AAKA,SACE,cADF,EAEE,eAFF,EAGE,oBAHF,QAIO,gCAJP,C,CAOA;AACA;;AACA,SAAS,OAAT,QAAwB,eAAxB;AACA,SAAS,IAAT,QAAqB,YAArB;AACA,SAAS,OAAT,QAAwB,eAAxB;AACA,SAAS,WAAT,QAA4B,mBAA5B;AACA,SAAS,KAAT,QAAsB,aAAtB,C,CAEA;;AACA,SAAS,OAAT,EAAkB,IAAlB,EAAwB,OAAxB,EAAiC,WAAjC,EAA8C,KAA9C,G,CACA;;AACA,eAAe;AACb,EAAA,OAAO,EAAA,OADM;AAEb,EAAA,IAAI,EAAA,IAFS;AAGb,EAAA,OAAO,EAAA,OAHM;AAIb,EAAA,WAAW,EAAA,WAJE;AAKb,EAAA,KAAK,EAAA;AALQ,CAAf","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { BaggageEntry, BaggageEntryMetadata, Baggage } from './baggage/types';\nexport { baggageEntryMetadataFromString } from './baggage/utils';\nexport { Exception } from './common/Exception';\nexport { HrTime, TimeInput } from './common/Time';\nexport { Attributes, AttributeValue } from './common/Attributes';\n\n// Context APIs\nexport { createContextKey, ROOT_CONTEXT } from './context/context';\nexport { Context, ContextManager } from './context/types';\nexport type { ContextAPI } from './api/context';\n\n// Diag APIs\nexport { DiagConsoleLogger } from './diag/consoleLogger';\nexport {\n  DiagLogFunction,\n  DiagLogger,\n  DiagLogLevel,\n  ComponentLoggerOptions,\n  DiagLoggerOptions,\n} from './diag/types';\nexport type { DiagAPI } from './api/diag';\n\n// Metrics APIs\nexport { createNoopMeter } from './metrics/NoopMeter';\nexport { MeterOptions, Meter } from './metrics/Meter';\nexport { MeterProvider } from './metrics/MeterProvider';\nexport {\n  ValueType,\n  Counter,\n  Histogram,\n  MetricOptions,\n  Observable,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n  UpDownCounter,\n  BatchObservableCallback,\n  MetricAttributes,\n  MetricAttributeValue,\n  ObservableCallback,\n} from './metrics/Metric';\nexport {\n  BatchObservableResult,\n  ObservableResult,\n} from './metrics/ObservableResult';\nexport type { MetricsAPI } from './api/metrics';\n\n// Propagation APIs\nexport {\n  TextMapPropagator,\n  TextMapSetter,\n  TextMapGetter,\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n} from './propagation/TextMapPropagator';\nexport type { PropagationAPI } from './api/propagation';\n\n// Trace APIs\nexport { SpanAttributes, SpanAttributeValue } from './trace/attributes';\nexport { Link } from './trace/link';\nexport { ProxyTracer, TracerDelegator } from './trace/ProxyTracer';\nexport { ProxyTracerProvider } from './trace/ProxyTracerProvider';\nexport { Sampler } from './trace/Sampler';\nexport { SamplingDecision, SamplingResult } from './trace/SamplingResult';\nexport { SpanContext } from './trace/span_context';\nexport { SpanKind } from './trace/span_kind';\nexport { Span } from './trace/span';\nexport { SpanOptions } from './trace/SpanOptions';\nexport { SpanStatus, SpanStatusCode } from './trace/status';\nexport { TraceFlags } from './trace/trace_flags';\nexport { TraceState } from './trace/trace_state';\nexport { createTraceState } from './trace/internal/utils';\nexport { TracerProvider } from './trace/tracer_provider';\nexport { Tracer } from './trace/tracer';\nexport { TracerOptions } from './trace/tracer_options';\nexport {\n  isSpanContextValid,\n  isValidTraceId,\n  isValidSpanId,\n} from './trace/spancontext-utils';\nexport {\n  INVALID_SPANID,\n  INVALID_TRACEID,\n  INVALID_SPAN_CONTEXT,\n} from './trace/invalid-span-constants';\nexport type { TraceAPI } from './api/trace';\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { context } from './context-api';\nimport { diag } from './diag-api';\nimport { metrics } from './metrics-api';\nimport { propagation } from './propagation-api';\nimport { trace } from './trace-api';\n\n// Named export.\nexport { context, diag, metrics, propagation, trace };\n// Default export.\nexport default {\n  context,\n  diag,\n  metrics,\n  propagation,\n  trace,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}