{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpHeaders } from \"../httpHeaders\";\n\nfunction getRuntimeInfo() {\n  const msRestRuntime = {\n    key: \"core-http\",\n    value: Constants.coreHttpVersion\n  };\n  return [msRestRuntime];\n}\n\nfunction getUserAgentString(telemetryInfo) {\n  let keySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \" \";\n  let valueSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"/\";\n  return telemetryInfo.map(info => {\n    const value = info.value ? `${valueSeparator}${info.value}` : \"\";\n    return `${info.key}${value}`;\n  }).join(keySeparator);\n}\n\nexport const getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\n/**\n * The default approach to generate user agents.\n * Uses static information from this package, plus system information available from the runtime.\n */\n\nexport function getDefaultUserAgentValue() {\n  const runtimeInfo = getRuntimeInfo();\n  const platformSpecificData = getPlatformSpecificData();\n  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\n/**\n * Returns a policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.\n * @param userAgentData - Telemetry information.\n * @returns A new {@link UserAgentPolicy}.\n */\n\nexport function userAgentPolicy(userAgentData) {\n  const key = !userAgentData || userAgentData.key === undefined || userAgentData.key === null ? getDefaultUserAgentKey() : userAgentData.key;\n  const value = !userAgentData || userAgentData.value === undefined || userAgentData.value === null ? getDefaultUserAgentValue() : userAgentData.value;\n  return {\n    create: (nextPolicy, options) => {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    }\n  };\n}\n/**\n * A policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.\n */\n\nexport class UserAgentPolicy extends BaseRequestPolicy {\n  constructor(_nextPolicy, _options, headerKey, headerValue) {\n    super(_nextPolicy, _options);\n    this._nextPolicy = _nextPolicy;\n    this._options = _options;\n    this.headerKey = headerKey;\n    this.headerValue = headerValue;\n  }\n\n  sendRequest(request) {\n    this.addUserAgentHeader(request);\n    return this._nextPolicy.sendRequest(request);\n  }\n  /**\n   * Adds the user agent header to the outgoing request.\n   */\n\n\n  addUserAgentHeader(request) {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    if (!request.headers.get(this.headerKey) && this.headerValue) {\n      request.headers.set(this.headerKey, this.headerValue);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/policies/userAgentPolicy.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SACE,iBADF,QAKO,iBALP;AAMA,SAAS,sBAAT,EAAiC,uBAAjC,QAAgE,yBAAhE;AACA,SAAS,SAAT,QAA0B,mBAA1B;AACA,SAAS,WAAT,QAA4B,gBAA5B;;AAoBA,SAAS,cAAT,GAAuB;AACrB,QAAM,aAAa,GAAG;AACpB,IAAA,GAAG,EAAE,WADe;AAEpB,IAAA,KAAK,EAAE,SAAS,CAAC;AAFG,GAAtB;AAKA,SAAO,CAAC,aAAD,CAAP;AACD;;AAED,SAAS,kBAAT,CACE,aADF,EAGsB;AAAA,MADpB,YACoB,uEADL,GACK;AAAA,MAApB,cAAoB,uEAAH,GAAG;AAEpB,SAAO,aAAa,CACjB,GADI,CACC,IAAD,IAAS;AACZ,UAAM,KAAK,GAAG,IAAI,CAAC,KAAL,GAAa,GAAG,cAAc,GAAG,IAAI,CAAC,KAAK,EAA3C,GAAgD,EAA9D;AACA,WAAO,GAAG,IAAI,CAAC,GAAG,GAAG,KAAK,EAA1B;AACD,GAJI,EAKJ,IALI,CAKC,YALD,CAAP;AAMD;;AAED,OAAO,MAAM,6BAA6B,GAAG,sBAAtC;AAEP;;;AAGG;;AACH,OAAM,SAAU,wBAAV,GAAkC;AACtC,QAAM,WAAW,GAAG,cAAc,EAAlC;AACA,QAAM,oBAAoB,GAAG,uBAAuB,EAApD;AACA,QAAM,SAAS,GAAG,kBAAkB,CAAC,WAAW,CAAC,MAAZ,CAAmB,oBAAnB,CAAD,CAApC;AACA,SAAO,SAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,eAAV,CAA0B,aAA1B,EAAuD;AAC3D,QAAM,GAAG,GACP,CAAC,aAAD,IAAkB,aAAa,CAAC,GAAd,KAAsB,SAAxC,IAAqD,aAAa,CAAC,GAAd,KAAsB,IAA3E,GACI,sBAAsB,EAD1B,GAEI,aAAa,CAAC,GAHpB;AAIA,QAAM,KAAK,GACT,CAAC,aAAD,IAAkB,aAAa,CAAC,KAAd,KAAwB,SAA1C,IAAuD,aAAa,CAAC,KAAd,KAAwB,IAA/E,GACI,wBAAwB,EAD5B,GAEI,aAAa,CAAC,KAHpB;AAKA,SAAO;AACL,IAAA,MAAM,EAAE,CAAC,UAAD,EAA4B,OAA5B,KAA6D;AACnE,aAAO,IAAI,eAAJ,CAAoB,UAApB,EAAgC,OAAhC,EAAyC,GAAzC,EAA8C,KAA9C,CAAP;AACD;AAHI,GAAP;AAKD;AAED;;AAEG;;AACH,OAAM,MAAO,eAAP,SAA+B,iBAA/B,CAAgD;AACpD,EAAA,WAAA,CACW,WADX,EAEW,QAFX,EAGY,SAHZ,EAIY,WAJZ,EAI+B;AAE7B,UAAM,WAAN,EAAmB,QAAnB;AALS,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACC,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,WAAA,GAAA,WAAA;AAGX;;AAED,EAAA,WAAW,CAAC,OAAD,EAAyB;AAClC,SAAK,kBAAL,CAAwB,OAAxB;AACA,WAAO,KAAK,WAAL,CAAiB,WAAjB,CAA6B,OAA7B,CAAP;AACD;AAED;;AAEG;;;AACH,EAAA,kBAAkB,CAAC,OAAD,EAAyB;AACzC,QAAI,CAAC,OAAO,CAAC,OAAb,EAAsB;AACpB,MAAA,OAAO,CAAC,OAAR,GAAkB,IAAI,WAAJ,EAAlB;AACD;;AAED,QAAI,CAAC,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,KAAK,SAAzB,CAAD,IAAwC,KAAK,WAAjD,EAA8D;AAC5D,MAAA,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,KAAK,SAAzB,EAAoC,KAAK,WAAzC;AACD;AACF;;AA1BmD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Telemetry information. Key/value pairs to include inside the User-Agent string.\n */\nexport type TelemetryInfo = { key?: string; value?: string };\n\n/**\n * Options for adding user agent details to outgoing requests.\n */\nexport interface UserAgentOptions {\n  /**\n   * String prefix to add to the user agent for outgoing requests.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n}\n\nfunction getRuntimeInfo(): TelemetryInfo[] {\n  const msRestRuntime = {\n    key: \"core-http\",\n    value: Constants.coreHttpVersion,\n  };\n\n  return [msRestRuntime];\n}\n\nfunction getUserAgentString(\n  telemetryInfo: TelemetryInfo[],\n  keySeparator = \" \",\n  valueSeparator = \"/\"\n): string {\n  return telemetryInfo\n    .map((info) => {\n      const value = info.value ? `${valueSeparator}${info.value}` : \"\";\n      return `${info.key}${value}`;\n    })\n    .join(keySeparator);\n}\n\nexport const getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\n\n/**\n * The default approach to generate user agents.\n * Uses static information from this package, plus system information available from the runtime.\n */\nexport function getDefaultUserAgentValue(): string {\n  const runtimeInfo = getRuntimeInfo();\n  const platformSpecificData = getPlatformSpecificData();\n  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\n\n/**\n * Returns a policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.\n * @param userAgentData - Telemetry information.\n * @returns A new {@link UserAgentPolicy}.\n */\nexport function userAgentPolicy(userAgentData?: TelemetryInfo): RequestPolicyFactory {\n  const key: string =\n    !userAgentData || userAgentData.key === undefined || userAgentData.key === null\n      ? getDefaultUserAgentKey()\n      : userAgentData.key;\n  const value: string =\n    !userAgentData || userAgentData.value === undefined || userAgentData.value === null\n      ? getDefaultUserAgentValue()\n      : userAgentData.value;\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    },\n  };\n}\n\n/**\n * A policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.\n */\nexport class UserAgentPolicy extends BaseRequestPolicy {\n  constructor(\n    readonly _nextPolicy: RequestPolicy,\n    readonly _options: RequestPolicyOptions,\n    protected headerKey: string,\n    protected headerValue: string\n  ) {\n    super(_nextPolicy, _options);\n  }\n\n  sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    this.addUserAgentHeader(request);\n    return this._nextPolicy.sendRequest(request);\n  }\n\n  /**\n   * Adds the user agent header to the outgoing request.\n   */\n  addUserAgentHeader(request: WebResourceLike): void {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    if (!request.headers.get(this.headerKey) && this.headerValue) {\n      request.headers.set(this.headerKey, this.headerValue);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}