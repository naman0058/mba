{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\n/**\n * The base class from which all request policies derive.\n */\n\nexport class BaseRequestPolicy {\n  /**\n   * The main method to implement that manipulates a request/response.\n   */\n  constructor(\n  /**\n   * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.\n   */\n  _nextPolicy,\n  /**\n   * The options that can be passed to a given request policy.\n   */\n  _options) {\n    this._nextPolicy = _nextPolicy;\n    this._options = _options;\n  }\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n\n\n  shouldLog(logLevel) {\n    return this._options.shouldLog(logLevel);\n  }\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n\n\n  log(logLevel, message) {\n    this._options.log(logLevel, message);\n  }\n\n}\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\n\nexport class RequestPolicyOptions {\n  constructor(_logger) {\n    this._logger = _logger;\n  }\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n\n\n  shouldLog(logLevel) {\n    return !!this._logger && logLevel !== HttpPipelineLogLevel.OFF && logLevel <= this._logger.minimumLogLevel;\n  }\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meet the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n\n\n  log(logLevel, message) {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/policies/requestPolicy.ts"],"names":[],"mappings":"AAAA;AACA;AAGA,SAAS,oBAAT,QAAqC,yBAArC;AAsBA;;AAEG;;AACH,OAAM,MAAgB,iBAAhB,CAAiC;AACrC;;AAEG;AACH,EAAA,WAAA;AACE;;AAEG;AACM,EAAA,WAJX;AAKE;;AAEG;AACM,EAAA,QARX,EAQ6C;AAJlC,SAAA,WAAA,GAAA,WAAA;AAIA,SAAA,QAAA,GAAA,QAAA;AACP;AAQJ;;;;AAIG;;;AACI,EAAA,SAAS,CAAC,QAAD,EAA+B;AAC7C,WAAO,KAAK,QAAL,CAAc,SAAd,CAAwB,QAAxB,CAAP;AACD;AAED;;;;;AAKG;;;AACI,EAAA,GAAG,CAAC,QAAD,EAAiC,OAAjC,EAAgD;AACxD,SAAK,QAAL,CAAc,GAAd,CAAkB,QAAlB,EAA4B,OAA5B;AACD;;AAtCoC;AA6DvC;;AAEG;;AACH,OAAM,MAAO,oBAAP,CAA2B;AAC/B,EAAA,WAAA,CAAoB,OAApB,EAAgD;AAA5B,SAAA,OAAA,GAAA,OAAA;AAAgC;AAEpD;;;;AAIG;;;AACI,EAAA,SAAS,CAAC,QAAD,EAA+B;AAC7C,WACE,CAAC,CAAC,KAAK,OAAP,IACA,QAAQ,KAAK,oBAAoB,CAAC,GADlC,IAEA,QAAQ,IAAI,KAAK,OAAL,CAAa,eAH3B;AAKD;AAED;;;;;AAKG;;;AACI,EAAA,GAAG,CAAC,QAAD,EAAiC,OAAjC,EAAgD;AACxD,QAAI,KAAK,OAAL,IAAgB,KAAK,SAAL,CAAe,QAAf,CAApB,EAA8C;AAC5C,WAAK,OAAL,CAAa,GAAb,CAAiB,QAAjB,EAA2B,OAA3B;AACD;AACF;;AA1B8B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\nimport { HttpPipelineLogger } from \"../httpPipelineLogger\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Creates a new RequestPolicy per-request that uses the provided nextPolicy.\n */\nexport type RequestPolicyFactory = {\n  create(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike): RequestPolicy;\n};\n\n/**\n * The underlying structure of a request policy.\n */\nexport interface RequestPolicy {\n  /**\n   * A method that retrieves an {@link HttpOperationResponse} given a {@link WebResourceLike} describing the request to be made.\n   * @param httpRequest - {@link WebResourceLike} describing the request to be made.\n   */\n  sendRequest(httpRequest: WebResourceLike): Promise<HttpOperationResponse>;\n}\n\n/**\n * The base class from which all request policies derive.\n */\nexport abstract class BaseRequestPolicy implements RequestPolicy {\n  /**\n   * The main method to implement that manipulates a request/response.\n   */\n  protected constructor(\n    /**\n     * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.\n     */\n    readonly _nextPolicy: RequestPolicy,\n    /**\n     * The options that can be passed to a given request policy.\n     */\n    readonly _options: RequestPolicyOptionsLike\n  ) {}\n\n  /**\n   * Sends a network request based on the given web resource.\n   * @param webResource - A {@link WebResourceLike} that describes a HTTP request to be made.\n   */\n  public abstract sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse>;\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return this._options.shouldLog(logLevel);\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    this._options.log(logLevel, message);\n  }\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport interface RequestPolicyOptionsLike {\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  shouldLog(logLevel: HttpPipelineLogLevel): boolean;\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meet the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n  log(logLevel: HttpPipelineLogLevel, message: string): void;\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport class RequestPolicyOptions {\n  constructor(private _logger?: HttpPipelineLogger) {}\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return (\n      !!this._logger &&\n      logLevel !== HttpPipelineLogLevel.OFF &&\n      logLevel <= this._logger.minimumLogLevel\n    );\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meet the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}