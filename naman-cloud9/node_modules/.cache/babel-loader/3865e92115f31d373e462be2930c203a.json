{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\n/**\n * returns an async iterator that iterates over results. It also has a `byPage`\n * method that returns pages of items at once.\n *\n * @param pagedResult - an object that specifies how to get pages.\n * @returns a paged async iterator that iterates over results.\n */\n\nexport function getPagedAsyncIterator(pagedResult) {\n  var _a;\n\n  const iter = getItemAsyncIterator(pagedResult);\n  return {\n    next() {\n      return iter.next();\n    },\n\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n\n    byPage: (_a = pagedResult === null || pagedResult === void 0 ? void 0 : pagedResult.byPage) !== null && _a !== void 0 ? _a : settings => {\n      const {\n        continuationToken,\n        maxPageSize\n      } = settings !== null && settings !== void 0 ? settings : {};\n      return getPageAsyncIterator(pagedResult, {\n        pageLink: continuationToken,\n        maxPageSize\n      });\n    }\n  };\n}\n\nfunction getItemAsyncIterator(pagedResult) {\n  return __asyncGenerator(this, arguments, function* getItemAsyncIterator_1() {\n    var e_1, _a, e_2, _b;\n\n    const pages = getPageAsyncIterator(pagedResult);\n    const firstVal = yield __await(pages.next()); // if the result does not have an array shape, i.e. TPage = TElement, then we return it as is\n\n    if (!Array.isArray(firstVal.value)) {\n      // can extract elements from this page\n      const {\n        toElements\n      } = pagedResult;\n\n      if (toElements) {\n        yield __await(yield* __asyncDelegator(__asyncValues(toElements(firstVal.value))));\n\n        try {\n          for (var pages_1 = __asyncValues(pages), pages_1_1; pages_1_1 = yield __await(pages_1.next()), !pages_1_1.done;) {\n            const page = pages_1_1.value;\n            yield __await(yield* __asyncDelegator(__asyncValues(toElements(page))));\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (pages_1_1 && !pages_1_1.done && (_a = pages_1.return)) yield __await(_a.call(pages_1));\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      } else {\n        yield yield __await(firstVal.value); // `pages` is of type `AsyncIterableIterator<TPage>` but TPage = TElement in this case\n\n        yield __await(yield* __asyncDelegator(__asyncValues(pages)));\n      }\n    } else {\n      yield __await(yield* __asyncDelegator(__asyncValues(firstVal.value)));\n\n      try {\n        for (var pages_2 = __asyncValues(pages), pages_2_1; pages_2_1 = yield __await(pages_2.next()), !pages_2_1.done;) {\n          const page = pages_2_1.value; // pages is of type `AsyncIterableIterator<TPage>` so `page` is of type `TPage`. In this branch,\n          // it must be the case that `TPage = TElement[]`\n\n          yield __await(yield* __asyncDelegator(__asyncValues(page)));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (pages_2_1 && !pages_2_1.done && (_b = pages_2.return)) yield __await(_b.call(pages_2));\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n  });\n}\n\nfunction getPageAsyncIterator(pagedResult) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __asyncGenerator(this, arguments, function* getPageAsyncIterator_1() {\n    const {\n      pageLink,\n      maxPageSize\n    } = options;\n    let response = yield __await(pagedResult.getPage(pageLink !== null && pageLink !== void 0 ? pageLink : pagedResult.firstPageLink, maxPageSize));\n\n    if (!response) {\n      return yield __await(void 0);\n    }\n\n    yield yield __await(response.page);\n\n    while (response.nextPageLink) {\n      response = yield __await(pagedResult.getPage(response.nextPageLink, maxPageSize));\n\n      if (!response) {\n        return yield __await(void 0);\n      }\n\n      yield yield __await(response.page);\n    }\n  });\n}","map":{"version":3,"sources":["../../src/getPagedAsyncIterator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PageSettings, PagedAsyncIterableIterator, PagedResult } from \"./models\";\n\n/**\n * returns an async iterator that iterates over results. It also has a `byPage`\n * method that returns pages of items at once.\n *\n * @param pagedResult - an object that specifies how to get pages.\n * @returns a paged async iterator that iterates over results.\n */\n\nexport function getPagedAsyncIterator<\n  TElement,\n  TPage = TElement[],\n  TPageSettings = PageSettings,\n  TLink = string\n>(\n  pagedResult: PagedResult<TPage, TPageSettings, TLink>\n): PagedAsyncIterableIterator<TElement, TPage, TPageSettings> {\n  const iter = getItemAsyncIterator<TElement, TPage, TLink, TPageSettings>(pagedResult);\n  return {\n    next() {\n      return iter.next();\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n    byPage:\n      pagedResult?.byPage ??\n      (((settings?: PageSettings) => {\n        const { continuationToken, maxPageSize } = settings ?? {};\n        return getPageAsyncIterator(pagedResult, {\n          pageLink: continuationToken as unknown as TLink | undefined,\n          maxPageSize,\n        });\n      }) as unknown as (settings?: TPageSettings) => AsyncIterableIterator<TPage>),\n  };\n}\n\nasync function* getItemAsyncIterator<TElement, TPage, TLink, TPageSettings>(\n  pagedResult: PagedResult<TPage, TPageSettings, TLink>\n): AsyncIterableIterator<TElement> {\n  const pages = getPageAsyncIterator(pagedResult);\n  const firstVal = await pages.next();\n  // if the result does not have an array shape, i.e. TPage = TElement, then we return it as is\n  if (!Array.isArray(firstVal.value)) {\n    // can extract elements from this page\n    const { toElements } = pagedResult;\n    if (toElements) {\n      yield* toElements(firstVal.value) as TElement[];\n      for await (const page of pages) {\n        yield* toElements(page) as TElement[];\n      }\n    } else {\n      yield firstVal.value;\n      // `pages` is of type `AsyncIterableIterator<TPage>` but TPage = TElement in this case\n      yield* pages as unknown as AsyncIterableIterator<TElement>;\n    }\n  } else {\n    yield* firstVal.value;\n    for await (const page of pages) {\n      // pages is of type `AsyncIterableIterator<TPage>` so `page` is of type `TPage`. In this branch,\n      // it must be the case that `TPage = TElement[]`\n      yield* page as unknown as TElement[];\n    }\n  }\n}\n\nasync function* getPageAsyncIterator<TPage, TLink, TPageSettings>(\n  pagedResult: PagedResult<TPage, TPageSettings, TLink>,\n  options: {\n    maxPageSize?: number;\n    pageLink?: TLink;\n  } = {}\n): AsyncIterableIterator<TPage> {\n  const { pageLink, maxPageSize } = options;\n  let response = await pagedResult.getPage(pageLink ?? pagedResult.firstPageLink, maxPageSize);\n  if (!response) {\n    return;\n  }\n  yield response.page;\n  while (response.nextPageLink) {\n    response = await pagedResult.getPage(response.nextPageLink, maxPageSize);\n    if (!response) {\n      return;\n    }\n    yield response.page;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}