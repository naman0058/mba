{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\n/**\n * Creates a policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n * @param authenticationProvider - The authentication provider.\n * @returns An instance of the {@link SigningPolicy}.\n */\n\nexport function signingPolicy(authenticationProvider) {\n  return {\n    create: (nextPolicy, options) => {\n      return new SigningPolicy(nextPolicy, options, authenticationProvider);\n    }\n  };\n}\n/**\n * A policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n */\n\nexport class SigningPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options, authenticationProvider) {\n    super(nextPolicy, options);\n    this.authenticationProvider = authenticationProvider;\n  }\n\n  signRequest(request) {\n    return this.authenticationProvider.signRequest(request);\n  }\n\n  sendRequest(request) {\n    return this.signRequest(request).then(nextRequest => this._nextPolicy.sendRequest(nextRequest));\n  }\n\n}","map":{"version":3,"sources":["../../../src/policies/signingPolicy.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SACE,iBADF,QAKO,iBALP;AAUA;;;;AAIG;;AACH,OAAM,SAAU,aAAV,CACJ,sBADI,EAC4C;AAEhD,SAAO;AACL,IAAA,MAAM,EAAE,CAAC,UAAD,EAA4B,OAA5B,KAA6D;AACnE,aAAO,IAAI,aAAJ,CAAkB,UAAlB,EAA8B,OAA9B,EAAuC,sBAAvC,CAAP;AACD;AAHI,GAAP;AAKD;AAED;;AAEG;;AACH,OAAM,MAAO,aAAP,SAA6B,iBAA7B,CAA8C;AAClD,EAAA,WAAA,CACE,UADF,EAEE,OAFF,EAGS,sBAHT,EAGyD;AAEvD,UAAM,UAAN,EAAkB,OAAlB;AAFO,SAAA,sBAAA,GAAA,sBAAA;AAGR;;AAED,EAAA,WAAW,CAAC,OAAD,EAAyB;AAClC,WAAO,KAAK,sBAAL,CAA4B,WAA5B,CAAwC,OAAxC,CAAP;AACD;;AAEM,EAAA,WAAW,CAAC,OAAD,EAAyB;AACzC,WAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,IAA1B,CAAgC,WAAD,IACpC,KAAK,WAAL,CAAiB,WAAjB,CAA6B,WAA7B,CADK,CAAP;AAGD;;AAjBiD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { ServiceClientCredentials } from \"../credentials/serviceClientCredentials\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Creates a policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n * @param authenticationProvider - The authentication provider.\n * @returns An instance of the {@link SigningPolicy}.\n */\nexport function signingPolicy(\n  authenticationProvider: ServiceClientCredentials\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SigningPolicy(nextPolicy, options, authenticationProvider);\n    },\n  };\n}\n\n/**\n * A policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n */\nexport class SigningPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    public authenticationProvider: ServiceClientCredentials\n  ) {\n    super(nextPolicy, options);\n  }\n\n  signRequest(request: WebResourceLike): Promise<WebResourceLike> {\n    return this.authenticationProvider.signRequest(request);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this.signRequest(request).then((nextRequest) =>\n      this._nextPolicy.sendRequest(nextRequest)\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}