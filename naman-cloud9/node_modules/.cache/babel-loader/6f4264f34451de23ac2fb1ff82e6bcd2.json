{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createAbortablePromise } from \"./createAbortablePromise\";\nconst StandardAbortMessage = \"The delay was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\n\nexport function delay(timeInMs, options) {\n  let token;\n  const {\n    abortSignal,\n    abortErrorMsg\n  } = options !== null && options !== void 0 ? options : {};\n  return createAbortablePromise(resolve => {\n    token = setTimeout(resolve, timeInMs);\n  }, {\n    cleanupBeforeAbort: () => clearTimeout(token),\n    abortSignal,\n    abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage\n  });\n}","map":{"version":3,"sources":["../../src/delay.ts"],"names":[],"mappings":"AAAA;AACA;AAGA,SAAS,sBAAT,QAAuC,0BAAvC;AAEA,MAAM,oBAAoB,GAAG,wBAA7B;AAgBA;;;;;AAKG;;AACH,OAAM,SAAU,KAAV,CAAgB,QAAhB,EAAkC,OAAlC,EAAwD;AAC5D,MAAI,KAAJ;AACA,QAAM;AAAE,IAAA,WAAF;AAAe,IAAA;AAAf,MAAiC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAA,OAAA,GAAW,EAAlD;AACA,SAAO,sBAAsB,CAC1B,OAAD,IAAY;AACV,IAAA,KAAK,GAAG,UAAU,CAAC,OAAD,EAAU,QAAV,CAAlB;AACD,GAH0B,EAI3B;AACE,IAAA,kBAAkB,EAAE,MAAM,YAAY,CAAC,KAAD,CADxC;AAEE,IAAA,WAFF;AAGE,IAAA,aAAa,EAAE,aAAa,KAAA,IAAb,IAAA,aAAa,KAAA,KAAA,CAAb,GAAA,aAAA,GAAiB;AAHlC,GAJ2B,CAA7B;AAUD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { createAbortablePromise } from \"./createAbortablePromise\";\n\nconst StandardAbortMessage = \"The delay was aborted.\";\n\n/**\n * Options for support abort functionality for the delay method\n */\nexport interface DelayOptions {\n  /**\n   * The abortSignal associated with containing operation.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * The abort error message associated with containing operation.\n   */\n  abortErrorMsg?: string;\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs: number, options?: DelayOptions): Promise<void> {\n  let token: ReturnType<typeof setTimeout>;\n  const { abortSignal, abortErrorMsg } = options ?? {};\n  return createAbortablePromise(\n    (resolve) => {\n      token = setTimeout(resolve, timeInMs);\n    },\n    {\n      cleanupBeforeAbort: () => clearTimeout(token),\n      abortSignal,\n      abortErrorMsg: abortErrorMsg ?? StandardAbortMessage,\n    }\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}