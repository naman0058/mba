{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { XML_CHARKEY } from \"../util/serializer.common\";\nimport { MapperType } from \"../serializer\";\nimport { RestError } from \"../restError\";\nimport { parseXML } from \"../util/xml\";\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\n\nexport function deserializationPolicy(deserializationContentTypes, parsingOptions) {\n  return {\n    create: (nextPolicy, options) => {\n      return new DeserializationPolicy(nextPolicy, options, deserializationContentTypes, parsingOptions);\n    }\n  };\n}\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\nexport const DefaultDeserializationOptions = {\n  expectedContentTypes: {\n    json: defaultJsonContentTypes,\n    xml: defaultXmlContentTypes\n  }\n};\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\n\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, requestPolicyOptions, deserializationContentTypes) {\n    let parsingOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    var _a;\n\n    super(nextPolicy, requestPolicyOptions);\n    this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;\n    this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;\n    this.xmlCharKey = (_a = parsingOptions.xmlCharKey) !== null && _a !== void 0 ? _a : XML_CHARKEY;\n  }\n\n  async sendRequest(request) {\n    return this._nextPolicy.sendRequest(request).then(response => deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response, {\n      xmlCharKey: this.xmlCharKey\n    }));\n  }\n\n}\n\nfunction getOperationResponse(parsedResponse) {\n  let result;\n  const request = parsedResponse.request;\n  const operationSpec = request.operationSpec;\n\n  if (operationSpec) {\n    const operationResponseGetter = request.operationResponseGetter;\n\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse) {\n  const shouldDeserialize = parsedResponse.request.shouldDeserialize;\n  let result;\n\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n\n  return result;\n}\n/**\n * Given a particular set of content types to parse as either JSON or XML, consumes the HTTP response to produce the result object defined by the request's {@link OperationSpec}.\n * @param jsonContentTypes - Response content types to parse the body as JSON.\n * @param xmlContentTypes  - Response content types to parse the body as XML.\n * @param response - HTTP Response from the pipeline.\n * @param options  - Options to the serializer, mostly for configuring the XML parser if needed.\n * @returns A parsed {@link HttpOperationResponse} object that can be returned by the {@link ServiceClient}.\n */\n\n\nexport function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var _a, _b, _c;\n\n  const updatedOptions = {\n    rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : \"\",\n    includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,\n    xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n  };\n  return parse(jsonContentTypes, xmlContentTypes, response, updatedOptions).then(parsedResponse => {\n    if (!shouldDeserializeResponse(parsedResponse)) {\n      return parsedResponse;\n    }\n\n    const operationSpec = parsedResponse.request.operationSpec;\n\n    if (!operationSpec || !operationSpec.responses) {\n      return parsedResponse;\n    }\n\n    const responseSpec = getOperationResponse(parsedResponse);\n    const {\n      error,\n      shouldReturnResponse\n    } = handleErrorResponse(parsedResponse, operationSpec, responseSpec);\n\n    if (error) {\n      throw error;\n    } else if (shouldReturnResponse) {\n      return parsedResponse;\n    } // An operation response spec does exist for current status code, so\n    // use it to deserialize the response.\n\n\n    if (responseSpec) {\n      if (responseSpec.bodyMapper) {\n        let valueToDeserialize = parsedResponse.parsedBody;\n\n        if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize = typeof valueToDeserialize === \"object\" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];\n        }\n\n        try {\n          parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\", options);\n        } catch (innerError) {\n          const restError = new RestError(`Error ${innerError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, undefined, parsedResponse.status, parsedResponse.request, parsedResponse);\n          throw restError;\n        }\n      } else if (operationSpec.httpMethod === \"HEAD\") {\n        // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n        parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n      }\n\n      if (responseSpec.headersMapper) {\n        parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJson(), \"operationRes.parsedHeaders\", options);\n      }\n    }\n\n    return parsedResponse;\n  });\n}\n\nfunction isOperationSpecEmpty(operationSpec) {\n  const expectedStatusCodes = Object.keys(operationSpec.responses);\n  return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\";\n}\n\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec) {\n  var _a;\n\n  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  const isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;\n\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return {\n          error: null,\n          shouldReturnResponse: false\n        };\n      }\n    } else {\n      return {\n        error: null,\n        shouldReturnResponse: false\n      };\n    }\n  }\n\n  const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n  const streaming = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status)) || parsedResponse.request.streamResponseBody;\n  const initialErrorMessage = streaming ? `Unexpected status code: ${parsedResponse.status}` : parsedResponse.bodyAsText;\n  const error = new RestError(initialErrorMessage, undefined, parsedResponse.status, parsedResponse.request, parsedResponse); // If the item failed but there's no error spec or default spec to deserialize the error,\n  // we should fail so we just throw the parsed response\n\n  if (!errorResponseSpec) {\n    throw error;\n  }\n\n  const defaultBodyMapper = errorResponseSpec.bodyMapper;\n  const defaultHeadersMapper = errorResponseSpec.headersMapper;\n\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      const parsedBody = parsedResponse.parsedBody;\n      let parsedError;\n\n      if (defaultBodyMapper) {\n        let valueToDeserialize = parsedBody;\n\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize = typeof parsedBody === \"object\" ? parsedBody[defaultBodyMapper.xmlElementName] : [];\n        }\n\n        parsedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\");\n      }\n\n      const internalError = parsedBody.error || parsedError || parsedBody;\n      error.code = internalError.code;\n\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n\n      if (defaultBodyMapper) {\n        error.response.parsedBody = parsedError;\n      }\n    } // If error response has headers, try to deserialize it using default header mapper\n\n\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJson(), \"operationRes.parsedHeaders\");\n    }\n  } catch (defaultError) {\n    error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n  }\n\n  return {\n    error,\n    shouldReturnResponse: false\n  };\n}\n\nfunction parse(jsonContentTypes, xmlContentTypes, operationResponse, opts) {\n  var _a;\n\n  const errorHandler = err => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse);\n    return Promise.reject(e);\n  };\n\n  const streaming = ((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) || operationResponse.request.streamResponseBody;\n\n  if (!streaming && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents = !contentType ? [] : contentType.split(\";\").map(component => component.toLowerCase());\n\n    if (contentComponents.length === 0 || contentComponents.some(component => jsonContentTypes.indexOf(component) !== -1)) {\n      return new Promise(resolve => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some(component => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text, opts).then(body => {\n        operationResponse.parsedBody = body;\n        return operationResponse;\n      }).catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}","map":{"version":3,"sources":["../../../src/policies/deserializationPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { SerializerOptions, XML_CHARKEY } from \"../util/serializer.common\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { MapperType } from \"../serializer\";\nimport { OperationResponse } from \"../operationResponse\";\nimport { OperationSpec } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { WebResourceLike } from \"../webResource\";\nimport { parseXML } from \"../util/xml\";\n\n/**\n * Options to configure API response deserialization.\n */\nexport interface DeserializationOptions {\n  /**\n   * Configures the expected content types for the deserialization of\n   * JSON and XML response bodies.\n   */\n  expectedContentTypes: DeserializationContentTypes;\n}\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(\n  deserializationContentTypes?: DeserializationContentTypes,\n  parsingOptions?: SerializerOptions\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new DeserializationPolicy(\n        nextPolicy,\n        options,\n        deserializationContentTypes,\n        parsingOptions\n      );\n    },\n  };\n}\n\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\nexport const DefaultDeserializationOptions: DeserializationOptions = {\n  expectedContentTypes: {\n    json: defaultJsonContentTypes,\n    xml: defaultXmlContentTypes,\n  },\n};\n\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  public readonly jsonContentTypes: string[];\n  public readonly xmlContentTypes: string[];\n  public readonly xmlCharKey: string;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    requestPolicyOptions: RequestPolicyOptions,\n    deserializationContentTypes?: DeserializationContentTypes,\n    parsingOptions: SerializerOptions = {}\n  ) {\n    super(nextPolicy, requestPolicyOptions);\n\n    this.jsonContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.json) || defaultJsonContentTypes;\n    this.xmlContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.xml) || defaultXmlContentTypes;\n    this.xmlCharKey = parsingOptions.xmlCharKey ?? XML_CHARKEY;\n  }\n\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then((response: HttpOperationResponse) =>\n      deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response, {\n        xmlCharKey: this.xmlCharKey,\n      })\n    );\n  }\n}\n\nfunction getOperationResponse(\n  parsedResponse: HttpOperationResponse\n): undefined | OperationResponse {\n  let result: OperationResponse | undefined;\n  const request: WebResourceLike = parsedResponse.request;\n  const operationSpec: OperationSpec | undefined = request.operationSpec;\n  if (operationSpec) {\n    const operationResponseGetter:\n      | undefined\n      | ((\n          operationSpec: OperationSpec,\n          response: HttpOperationResponse\n        ) => undefined | OperationResponse) = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: HttpOperationResponse): boolean {\n  const shouldDeserialize: undefined | boolean | ((response: HttpOperationResponse) => boolean) =\n    parsedResponse.request.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\n/**\n * Given a particular set of content types to parse as either JSON or XML, consumes the HTTP response to produce the result object defined by the request's {@link OperationSpec}.\n * @param jsonContentTypes - Response content types to parse the body as JSON.\n * @param xmlContentTypes  - Response content types to parse the body as XML.\n * @param response - HTTP Response from the pipeline.\n * @param options  - Options to the serializer, mostly for configuring the XML parser if needed.\n * @returns A parsed {@link HttpOperationResponse} object that can be returned by the {@link ServiceClient}.\n */\nexport function deserializeResponseBody(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  response: HttpOperationResponse,\n  options: SerializerOptions = {}\n): Promise<HttpOperationResponse> {\n  const updatedOptions: Required<SerializerOptions> = {\n    rootName: options.rootName ?? \"\",\n    includeRoot: options.includeRoot ?? false,\n    xmlCharKey: options.xmlCharKey ?? XML_CHARKEY,\n  };\n  return parse(jsonContentTypes, xmlContentTypes, response, updatedOptions).then(\n    (parsedResponse) => {\n      if (!shouldDeserializeResponse(parsedResponse)) {\n        return parsedResponse;\n      }\n\n      const operationSpec = parsedResponse.request.operationSpec;\n      if (!operationSpec || !operationSpec.responses) {\n        return parsedResponse;\n      }\n\n      const responseSpec = getOperationResponse(parsedResponse);\n\n      const { error, shouldReturnResponse } = handleErrorResponse(\n        parsedResponse,\n        operationSpec,\n        responseSpec\n      );\n      if (error) {\n        throw error;\n      } else if (shouldReturnResponse) {\n        return parsedResponse;\n      }\n\n      // An operation response spec does exist for current status code, so\n      // use it to deserialize the response.\n      if (responseSpec) {\n        if (responseSpec.bodyMapper) {\n          let valueToDeserialize: any = parsedResponse.parsedBody;\n          if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n            valueToDeserialize =\n              typeof valueToDeserialize === \"object\"\n                ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!]\n                : [];\n          }\n          try {\n            parsedResponse.parsedBody = operationSpec.serializer.deserialize(\n              responseSpec.bodyMapper,\n              valueToDeserialize,\n              \"operationRes.parsedBody\",\n              options\n            );\n          } catch (innerError: any) {\n            const restError = new RestError(\n              `Error ${innerError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`,\n              undefined,\n              parsedResponse.status,\n              parsedResponse.request,\n              parsedResponse\n            );\n            throw restError;\n          }\n        } else if (operationSpec.httpMethod === \"HEAD\") {\n          // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n          parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n        }\n\n        if (responseSpec.headersMapper) {\n          parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(\n            responseSpec.headersMapper,\n            parsedResponse.headers.toJson(),\n            \"operationRes.parsedHeaders\",\n            options\n          );\n        }\n      }\n\n      return parsedResponse;\n    }\n  );\n}\n\nfunction isOperationSpecEmpty(operationSpec: OperationSpec): boolean {\n  const expectedStatusCodes = Object.keys(operationSpec.responses);\n  return (\n    expectedStatusCodes.length === 0 ||\n    (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\")\n  );\n}\n\nfunction handleErrorResponse(\n  parsedResponse: HttpOperationResponse,\n  operationSpec: OperationSpec,\n  responseSpec: OperationResponse | undefined\n): { error: RestError | null; shouldReturnResponse: boolean } {\n  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  const isExpectedStatusCode: boolean = isOperationSpecEmpty(operationSpec)\n    ? isSuccessByStatus\n    : !!responseSpec;\n\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return { error: null, shouldReturnResponse: false };\n      }\n    } else {\n      return { error: null, shouldReturnResponse: false };\n    }\n  }\n\n  const errorResponseSpec = responseSpec ?? operationSpec.responses.default;\n  const streaming =\n    parsedResponse.request.streamResponseStatusCodes?.has(parsedResponse.status) ||\n    parsedResponse.request.streamResponseBody;\n  const initialErrorMessage = streaming\n    ? `Unexpected status code: ${parsedResponse.status}`\n    : (parsedResponse.bodyAsText as string);\n\n  const error = new RestError(\n    initialErrorMessage,\n    undefined,\n    parsedResponse.status,\n    parsedResponse.request,\n    parsedResponse\n  );\n\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // we should fail so we just throw the parsed response\n  if (!errorResponseSpec) {\n    throw error;\n  }\n\n  const defaultBodyMapper = errorResponseSpec.bodyMapper;\n  const defaultHeadersMapper = errorResponseSpec.headersMapper;\n\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      const parsedBody = parsedResponse.parsedBody;\n      let parsedError;\n      if (defaultBodyMapper) {\n        let valueToDeserialize: any = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize =\n            typeof parsedBody === \"object\" ? parsedBody[defaultBodyMapper.xmlElementName!] : [];\n        }\n        parsedError = operationSpec.serializer.deserialize(\n          defaultBodyMapper,\n          valueToDeserialize,\n          \"error.response.parsedBody\"\n        );\n      }\n\n      const internalError: any = parsedBody.error || parsedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n\n      if (defaultBodyMapper) {\n        error.response!.parsedBody = parsedError;\n      }\n    }\n\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      error.response!.parsedHeaders = operationSpec.serializer.deserialize(\n        defaultHeadersMapper,\n        parsedResponse.headers.toJson(),\n        \"operationRes.parsedHeaders\"\n      );\n    }\n  } catch (defaultError: any) {\n    error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n  }\n\n  return { error, shouldReturnResponse: false };\n}\n\nfunction parse(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  operationResponse: HttpOperationResponse,\n  opts: Required<SerializerOptions>\n): Promise<HttpOperationResponse> {\n  const errorHandler = (err: Error & { code: string }): Promise<never> => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(\n      msg,\n      errCode,\n      operationResponse.status,\n      operationResponse.request,\n      operationResponse\n    );\n    return Promise.reject(e);\n  };\n\n  const streaming =\n    operationResponse.request.streamResponseStatusCodes?.has(operationResponse.status) ||\n    operationResponse.request.streamResponseBody;\n  if (!streaming && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType\n      ? []\n      : contentType.split(\";\").map((component) => component.toLowerCase());\n    if (\n      contentComponents.length === 0 ||\n      contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)\n    ) {\n      return new Promise<HttpOperationResponse>((resolve) => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text, opts)\n        .then((body) => {\n          operationResponse.parsedBody = body;\n          return operationResponse;\n        })\n        .catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}