{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObjectWithProperties } from \"./typeguards\";\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\n\nexport class AzureSASCredential {\n  /**\n   * Create an instance of an AzureSASCredential for use\n   * with a service client.\n   *\n   * @param signature - The initial value of the shared access signature to use in authentication\n   */\n  constructor(signature) {\n    if (!signature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n\n    this._signature = signature;\n  }\n  /**\n   * The value of the shared access signature to be used in authentication\n   */\n\n\n  get signature() {\n    return this._signature;\n  }\n  /**\n   * Change the value of the signature.\n   *\n   * Updates will take effect upon the next request after\n   * updating the signature value.\n   *\n   * @param newSignature - The new shared access signature value to be used\n   */\n\n\n  update(newSignature) {\n    if (!newSignature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n\n    this._signature = newSignature;\n  }\n\n}\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\n\nexport function isSASCredential(credential) {\n  return isObjectWithProperties(credential, [\"signature\"]) && typeof credential.signature === \"string\";\n}","map":{"version":3,"sources":["../../src/azureSASCredential.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,sBAAT,QAAuC,cAAvC;AAYA;;;AAGG;;AACH,OAAM,MAAO,kBAAP,CAAyB;AAU7B;;;;;AAKG;AACH,EAAA,WAAA,CAAY,SAAZ,EAA6B;AAC3B,QAAI,CAAC,SAAL,EAAgB;AACd,YAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,SAAK,UAAL,GAAkB,SAAlB;AACD;AAnBD;;AAEG;;;AACiB,MAAT,SAAS,GAAA;AAClB,WAAO,KAAK,UAAZ;AACD;AAgBD;;;;;;;AAOG;;;AACI,EAAA,MAAM,CAAC,YAAD,EAAqB;AAChC,QAAI,CAAC,YAAL,EAAmB;AACjB,YAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,SAAK,UAAL,GAAkB,YAAlB;AACD;;AAtC4B;AAyC/B;;;;AAIG;;AACH,OAAM,SAAU,eAAV,CAA0B,UAA1B,EAA6C;AACjD,SACE,sBAAsB,CAAC,UAAD,EAAa,CAAC,WAAD,CAAb,CAAtB,IAAqD,OAAO,UAAU,CAAC,SAAlB,KAAgC,QADvF;AAGD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isObjectWithProperties } from \"./typeguards\";\n\n/**\n * Represents a credential defined by a static shared access signature.\n */\nexport interface SASCredential {\n  /**\n   * The value of the shared access signature represented as a string\n   */\n  readonly signature: string;\n}\n\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\nexport class AzureSASCredential implements SASCredential {\n  private _signature: string;\n\n  /**\n   * The value of the shared access signature to be used in authentication\n   */\n  public get signature(): string {\n    return this._signature;\n  }\n\n  /**\n   * Create an instance of an AzureSASCredential for use\n   * with a service client.\n   *\n   * @param signature - The initial value of the shared access signature to use in authentication\n   */\n  constructor(signature: string) {\n    if (!signature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n\n    this._signature = signature;\n  }\n\n  /**\n   * Change the value of the signature.\n   *\n   * Updates will take effect upon the next request after\n   * updating the signature value.\n   *\n   * @param newSignature - The new shared access signature value to be used\n   */\n  public update(newSignature: string): void {\n    if (!newSignature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n\n    this._signature = newSignature;\n  }\n}\n\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\nexport function isSASCredential(credential: unknown): credential is SASCredential {\n  return (\n    isObjectWithProperties(credential, [\"signature\"]) && typeof credential.signature === \"string\"\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}