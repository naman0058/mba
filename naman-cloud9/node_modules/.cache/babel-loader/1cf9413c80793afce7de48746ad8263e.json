{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { URLBuilder, URLQuery } from \"../url\";\nimport { isObject } from \"./utils\";\nconst RedactedString = \"REDACTED\";\nconst defaultAllowedHeaderNames = [\"x-ms-client-request-id\", \"x-ms-return-client-request-id\", \"x-ms-useragent\", \"x-ms-correlation-request-id\", \"x-ms-request-id\", \"client-request-id\", \"ms-cv\", \"return-client-request-id\", \"traceparent\", \"Access-Control-Allow-Credentials\", \"Access-Control-Allow-Headers\", \"Access-Control-Allow-Methods\", \"Access-Control-Allow-Origin\", \"Access-Control-Expose-Headers\", \"Access-Control-Max-Age\", \"Access-Control-Request-Headers\", \"Access-Control-Request-Method\", \"Origin\", \"Accept\", \"Accept-Encoding\", \"Cache-Control\", \"Connection\", \"Content-Length\", \"Content-Type\", \"Date\", \"ETag\", \"Expires\", \"If-Match\", \"If-Modified-Since\", \"If-None-Match\", \"If-Unmodified-Since\", \"Last-Modified\", \"Pragma\", \"Request-Id\", \"Retry-After\", \"Server\", \"Transfer-Encoding\", \"User-Agent\", \"WWW-Authenticate\"];\nconst defaultAllowedQueryParameters = [\"api-version\"];\nexport class Sanitizer {\n  constructor() {\n    let {\n      allowedHeaderNames = [],\n      allowedQueryParameters = []\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    allowedHeaderNames = Array.isArray(allowedHeaderNames) ? defaultAllowedHeaderNames.concat(allowedHeaderNames) : defaultAllowedHeaderNames;\n    allowedQueryParameters = Array.isArray(allowedQueryParameters) ? defaultAllowedQueryParameters.concat(allowedQueryParameters) : defaultAllowedQueryParameters;\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map(n => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map(p => p.toLowerCase()));\n  }\n\n  sanitize(obj) {\n    const seen = new Set();\n    return JSON.stringify(obj, (key, value) => {\n      // Ensure Errors include their interesting non-enumerable members\n      if (value instanceof Error) {\n        return Object.assign(Object.assign({}, value), {\n          name: value.name,\n          message: value.message\n        });\n      }\n\n      if (key === \"_headersMap\") {\n        return this.sanitizeHeaders(value);\n      } else if (key === \"url\") {\n        return this.sanitizeUrl(value);\n      } else if (key === \"query\") {\n        return this.sanitizeQuery(value);\n      } else if (key === \"body\") {\n        // Don't log the request body\n        return undefined;\n      } else if (key === \"response\") {\n        // Don't log response again\n        return undefined;\n      } else if (key === \"operationSpec\") {\n        // When using sendOperationRequest, the request carries a massive\n        // field with the autorest spec. No need to log it.\n        return undefined;\n      } else if (Array.isArray(value) || isObject(value)) {\n        if (seen.has(value)) {\n          return \"[Circular]\";\n        }\n\n        seen.add(value);\n      }\n\n      return value;\n    }, 2);\n  }\n\n  sanitizeHeaders(value) {\n    return this.sanitizeObject(value, this.allowedHeaderNames, (v, k) => v[k].value);\n  }\n\n  sanitizeQuery(value) {\n    return this.sanitizeObject(value, this.allowedQueryParameters, (v, k) => v[k]);\n  }\n\n  sanitizeObject(value, allowedKeys, accessor) {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized = {};\n\n    for (const k of Object.keys(value)) {\n      if (allowedKeys.has(k.toLowerCase())) {\n        sanitized[k] = accessor(value, k);\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n\n  sanitizeUrl(value) {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n\n    const urlBuilder = URLBuilder.parse(value);\n    const queryString = urlBuilder.getQuery();\n\n    if (!queryString) {\n      return value;\n    }\n\n    const query = URLQuery.parse(queryString);\n\n    for (const k of query.keys()) {\n      if (!this.allowedQueryParameters.has(k.toLowerCase())) {\n        query.set(k, RedactedString);\n      }\n    }\n\n    urlBuilder.setQuery(query.toString());\n    return urlBuilder.toString();\n  }\n\n}","map":{"version":3,"sources":["../../../src/util/sanitizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { URLBuilder, URLQuery } from \"../url\";\nimport { UnknownObject, isObject } from \"./utils\";\n\nexport interface SanitizerOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n}\n\nconst RedactedString = \"REDACTED\";\n\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-useragent\",\n  \"x-ms-correlation-request-id\",\n  \"x-ms-request-id\",\n  \"client-request-id\",\n  \"ms-cv\",\n  \"return-client-request-id\",\n  \"traceparent\",\n\n  \"Access-Control-Allow-Credentials\",\n  \"Access-Control-Allow-Headers\",\n  \"Access-Control-Allow-Methods\",\n  \"Access-Control-Allow-Origin\",\n  \"Access-Control-Expose-Headers\",\n  \"Access-Control-Max-Age\",\n  \"Access-Control-Request-Headers\",\n  \"Access-Control-Request-Method\",\n  \"Origin\",\n\n  \"Accept\",\n  \"Accept-Encoding\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"WWW-Authenticate\",\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\nexport class Sanitizer {\n  public allowedHeaderNames: Set<string>;\n  public allowedQueryParameters: Set<string>;\n\n  constructor({ allowedHeaderNames = [], allowedQueryParameters = [] }: SanitizerOptions = {}) {\n    allowedHeaderNames = Array.isArray(allowedHeaderNames)\n      ? defaultAllowedHeaderNames.concat(allowedHeaderNames)\n      : defaultAllowedHeaderNames;\n\n    allowedQueryParameters = Array.isArray(allowedQueryParameters)\n      ? defaultAllowedQueryParameters.concat(allowedQueryParameters)\n      : defaultAllowedQueryParameters;\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n  }\n\n  public sanitize(obj: unknown): string {\n    const seen = new Set<unknown>();\n    return JSON.stringify(\n      obj,\n      (key: string, value: unknown) => {\n        // Ensure Errors include their interesting non-enumerable members\n        if (value instanceof Error) {\n          return {\n            ...value,\n            name: value.name,\n            message: value.message,\n          };\n        }\n\n        if (key === \"_headersMap\") {\n          return this.sanitizeHeaders(value as UnknownObject);\n        } else if (key === \"url\") {\n          return this.sanitizeUrl(value as string);\n        } else if (key === \"query\") {\n          return this.sanitizeQuery(value as UnknownObject);\n        } else if (key === \"body\") {\n          // Don't log the request body\n          return undefined;\n        } else if (key === \"response\") {\n          // Don't log response again\n          return undefined;\n        } else if (key === \"operationSpec\") {\n          // When using sendOperationRequest, the request carries a massive\n          // field with the autorest spec. No need to log it.\n          return undefined;\n        } else if (Array.isArray(value) || isObject(value)) {\n          if (seen.has(value)) {\n            return \"[Circular]\";\n          }\n          seen.add(value);\n        }\n\n        return value;\n      },\n      2\n    );\n  }\n\n  private sanitizeHeaders(value: UnknownObject): UnknownObject {\n    return this.sanitizeObject(value, this.allowedHeaderNames, (v, k) => v[k].value);\n  }\n\n  private sanitizeQuery(value: UnknownObject): UnknownObject {\n    return this.sanitizeObject(value, this.allowedQueryParameters, (v, k) => v[k]);\n  }\n\n  private sanitizeObject(\n    value: UnknownObject,\n    allowedKeys: Set<string>,\n    accessor: (value: any, key: string) => any\n  ): UnknownObject {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: UnknownObject = {};\n\n    for (const k of Object.keys(value)) {\n      if (allowedKeys.has(k.toLowerCase())) {\n        sanitized[k] = accessor(value, k);\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n\n  private sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n\n    const urlBuilder = URLBuilder.parse(value);\n    const queryString = urlBuilder.getQuery();\n\n    if (!queryString) {\n      return value;\n    }\n\n    const query = URLQuery.parse(queryString);\n    for (const k of query.keys()) {\n      if (!this.allowedQueryParameters.has(k.toLowerCase())) {\n        query.set(k, RedactedString);\n      }\n    }\n\n    urlBuilder.setQuery(query.toString());\n    return urlBuilder.toString();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}