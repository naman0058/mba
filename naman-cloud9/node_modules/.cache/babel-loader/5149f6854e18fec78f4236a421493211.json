{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'metrics';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\n\nvar MetricsAPI =\n/** @class */\nfunction () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function MetricsAPI() {}\n  /** Get the singleton instance of the Metrics API */\n\n\n  MetricsAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n\n    return this._instance;\n  };\n  /**\n   * Set the current global meter provider.\n   * Returns true if the meter provider was successfully registered, else false.\n   */\n\n\n  MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n    return registerGlobal(API_NAME, provider, DiagAPI.instance());\n  };\n  /**\n   * Returns the global meter provider.\n   */\n\n\n  MetricsAPI.prototype.getMeterProvider = function () {\n    return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n  };\n  /**\n   * Returns a meter from the global meter provider.\n   */\n\n\n  MetricsAPI.prototype.getMeter = function (name, version, options) {\n    return this.getMeterProvider().getMeter(name, version, options);\n  };\n  /** Remove the global meter provider */\n\n\n  MetricsAPI.prototype.disable = function () {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  };\n\n  return MetricsAPI;\n}();\n\nexport { MetricsAPI };","map":{"version":3,"sources":["../../../src/api/metrics.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAIH,SAAS,mBAAT,QAAoC,8BAApC;AACA,SACE,SADF,EAEE,cAFF,EAGE,gBAHF,QAIO,0BAJP;AAKA,SAAS,OAAT,QAAwB,QAAxB;AAEA,IAAM,QAAQ,GAAG,SAAjB;AAEA;;AAEG;;AACH,IAAA,UAAA;AAAA;AAAA,YAAA;AAGE;AACA,WAAA,UAAA,GAAA,CAAwB;AAExB;;;AACc,EAAA,UAAA,CAAA,WAAA,GAAd,YAAA;AACE,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,WAAK,SAAL,GAAiB,IAAI,UAAJ,EAAjB;AACD;;AAED,WAAO,KAAK,SAAZ;AACD,GANa;AAQd;;;AAGG;;;AACI,EAAA,UAAA,CAAA,SAAA,CAAA,sBAAA,GAAP,UAA8B,QAA9B,EAAqD;AACnD,WAAO,cAAc,CAAC,QAAD,EAAW,QAAX,EAAqB,OAAO,CAAC,QAAR,EAArB,CAArB;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,UAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,YAAA;AACE,WAAO,SAAS,CAAC,QAAD,CAAT,IAAuB,mBAA9B;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UACE,IADF,EAEE,OAFF,EAGE,OAHF,EAGwB;AAEtB,WAAO,KAAK,gBAAL,GAAwB,QAAxB,CAAiC,IAAjC,EAAuC,OAAvC,EAAgD,OAAhD,CAAP;AACD,GANM;AAQP;;;AACO,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACE,IAAA,gBAAgB,CAAC,QAAD,EAAW,OAAO,CAAC,QAAR,EAAX,CAAhB;AACD,GAFM;;AAGT,SAAA,UAAA;AAAC,CA7CD,EAAA","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterOptions } from '../metrics/Meter';\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'metrics';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nexport class MetricsAPI {\n  private static _instance?: MetricsAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Metrics API */\n  public static getInstance(): MetricsAPI {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global meter provider.\n   * Returns true if the meter provider was successfully registered, else false.\n   */\n  public setGlobalMeterProvider(provider: MeterProvider): boolean {\n    return registerGlobal(API_NAME, provider, DiagAPI.instance());\n  }\n\n  /**\n   * Returns the global meter provider.\n   */\n  public getMeterProvider(): MeterProvider {\n    return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n  }\n\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  public getMeter(\n    name: string,\n    version?: string,\n    options?: MeterOptions\n  ): Meter {\n    return this.getMeterProvider().getMeter(name, version, options);\n  }\n\n  /** Remove the global meter provider */\n  public disable(): void {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}