{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { GenericPollOperation } from \"./operation\";\nimport { POLL_INTERVAL_IN_MS } from \"../../poller/constants\";\nimport { Poller } from \"../poller\";\nimport { deserializeState } from \"../../poller/operation\";\n/**\n * The LRO Engine, a class that performs polling.\n */\n\nexport class LroEngine extends Poller {\n  constructor(lro, options) {\n    const {\n      intervalInMs = POLL_INTERVAL_IN_MS,\n      resumeFrom,\n      resolveOnUnsuccessful = false,\n      isDone,\n      lroResourceLocationConfig,\n      processResult,\n      updateState\n    } = options || {};\n    const state = resumeFrom ? deserializeState(resumeFrom) : {};\n    const operation = new GenericPollOperation(state, lro, !resolveOnUnsuccessful, lroResourceLocationConfig, processResult, updateState, isDone);\n    super(operation);\n    this.resolveOnUnsuccessful = resolveOnUnsuccessful;\n    this.config = {\n      intervalInMs: intervalInMs\n    };\n    operation.setPollerConfig(this.config);\n  }\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n\n\n  delay() {\n    return new Promise(resolve => setTimeout(() => resolve(), this.config.intervalInMs));\n  }\n\n}","map":{"version":3,"sources":["../../../../src/legacy/lroEngine/lroEngine.ts"],"names":[],"mappings":"AAAA;AACA;AAGA,SAAS,oBAAT,QAAqC,aAArC;AAEA,SAAS,mBAAT,QAAoC,wBAApC;AAEA,SAAS,MAAT,QAAuB,WAAvB;AAEA,SAAS,gBAAT,QAAiC,wBAAjC;AAEA;;AAEG;;AACH,OAAM,MAAO,SAAP,SAA8E,MAA9E,CAGL;AAGC,EAAA,WAAA,CAAY,GAAZ,EAAgD,OAAhD,EAA2F;AACzF,UAAM;AACJ,MAAA,YAAY,GAAG,mBADX;AAEJ,MAAA,UAFI;AAGJ,MAAA,qBAAqB,GAAG,KAHpB;AAIJ,MAAA,MAJI;AAKJ,MAAA,yBALI;AAMJ,MAAA,aANI;AAOJ,MAAA;AAPI,QAQF,OAAO,IAAI,EARf;AASA,UAAM,KAAK,GAAqC,UAAU,GACtD,gBAAgB,CAAC,UAAD,CADsC,GAErD,EAFL;AAGA,UAAM,SAAS,GAAG,IAAI,oBAAJ,CAChB,KADgB,EAEhB,GAFgB,EAGhB,CAAC,qBAHe,EAIhB,yBAJgB,EAKhB,aALgB,EAMhB,WANgB,EAOhB,MAPgB,CAAlB;AASA,UAAM,SAAN;AACA,SAAK,qBAAL,GAA6B,qBAA7B;AAEA,SAAK,MAAL,GAAc;AAAE,MAAA,YAAY,EAAE;AAAhB,KAAd;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,MAA/B;AACD;AAED;;AAEG;;;AACH,EAAA,KAAK,GAAA;AACH,WAAO,IAAI,OAAJ,CAAa,OAAD,IAAa,UAAU,CAAC,MAAM,OAAO,EAAd,EAAkB,KAAK,MAAL,CAAY,YAA9B,CAAnC,CAAP;AACD;;AArCF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LroEngineOptions, PollerConfig } from \"./models\";\nimport { GenericPollOperation } from \"./operation\";\nimport { LongRunningOperation } from \"../../http/models\";\nimport { POLL_INTERVAL_IN_MS } from \"../../poller/constants\";\nimport { PollOperationState } from \"../pollOperation\";\nimport { Poller } from \"../poller\";\nimport { RestorableOperationState } from \"../../poller/models\";\nimport { deserializeState } from \"../../poller/operation\";\n\n/**\n * The LRO Engine, a class that performs polling.\n */\nexport class LroEngine<TResult, TState extends PollOperationState<TResult>> extends Poller<\n  TState,\n  TResult\n> {\n  private config: PollerConfig;\n\n  constructor(lro: LongRunningOperation<TResult>, options?: LroEngineOptions<TResult, TState>) {\n    const {\n      intervalInMs = POLL_INTERVAL_IN_MS,\n      resumeFrom,\n      resolveOnUnsuccessful = false,\n      isDone,\n      lroResourceLocationConfig,\n      processResult,\n      updateState,\n    } = options || {};\n    const state: RestorableOperationState<TState> = resumeFrom\n      ? deserializeState(resumeFrom)\n      : ({} as RestorableOperationState<TState>);\n    const operation = new GenericPollOperation(\n      state,\n      lro,\n      !resolveOnUnsuccessful,\n      lroResourceLocationConfig,\n      processResult,\n      updateState,\n      isDone\n    );\n    super(operation);\n    this.resolveOnUnsuccessful = resolveOnUnsuccessful;\n\n    this.config = { intervalInMs: intervalInMs };\n    operation.setPollerConfig(this.config);\n  }\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  delay(): Promise<void> {\n    return new Promise((resolve) => setTimeout(() => resolve(), this.config.intervalInMs));\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}