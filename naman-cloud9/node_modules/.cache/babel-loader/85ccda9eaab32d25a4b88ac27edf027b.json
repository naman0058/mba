{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a Blob. */\n\nexport class Blob {\n  /**\n   * Initialize a new instance of the class Blob class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * The Download operation reads or downloads a blob from the system, including its metadata and\n   * properties. You can also call Download to read a snapshot.\n   * @param options The options parameters.\n   */\n\n\n  download(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, downloadOperationSpec);\n  }\n  /**\n   * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system\n   * properties for the blob. It does not return the content of the blob.\n   * @param options The options parameters.\n   */\n\n\n  getProperties(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec);\n  }\n  /**\n   * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n   * permanently removed from the storage account. If the storage account's soft delete feature is\n   * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n   * immediately. However, the blob service retains the blob or snapshot for the number of days specified\n   * by the DeleteRetentionPolicy section of [Storage service properties]\n   * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is\n   * permanently removed from the storage account. Note that you continue to be charged for the\n   * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the\n   * \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You\n   * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a\n   * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n   * (ResourceNotFound).\n   * @param options The options parameters.\n   */\n\n\n  delete(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, deleteOperationSpec);\n  }\n  /**\n   * Undelete a blob that was previously soft deleted\n   * @param options The options parameters.\n   */\n\n\n  undelete(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, undeleteOperationSpec);\n  }\n  /**\n   * Sets the time a blob will expire and be deleted.\n   * @param expiryOptions Required. Indicates mode of the expiry time\n   * @param options The options parameters.\n   */\n\n\n  setExpiry(expiryOptions, options) {\n    const operationArguments = {\n      expiryOptions,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setExpiryOperationSpec);\n  }\n  /**\n   * The Set HTTP Headers operation sets system properties on the blob\n   * @param options The options parameters.\n   */\n\n\n  setHttpHeaders(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setHttpHeadersOperationSpec);\n  }\n  /**\n   * The Set Immutability Policy operation sets the immutability policy on the blob\n   * @param options The options parameters.\n   */\n\n\n  setImmutabilityPolicy(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setImmutabilityPolicyOperationSpec);\n  }\n  /**\n   * The Delete Immutability Policy operation deletes the immutability policy on the blob\n   * @param options The options parameters.\n   */\n\n\n  deleteImmutabilityPolicy(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, deleteImmutabilityPolicyOperationSpec);\n  }\n  /**\n   * The Set Legal Hold operation sets a legal hold on the blob.\n   * @param legalHold Specified if a legal hold should be set on the blob.\n   * @param options The options parameters.\n   */\n\n\n  setLegalHold(legalHold, options) {\n    const operationArguments = {\n      legalHold,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setLegalHoldOperationSpec);\n  }\n  /**\n   * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n   * name-value pairs\n   * @param options The options parameters.\n   */\n\n\n  setMetadata(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setMetadataOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n\n\n  acquireLease(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, acquireLeaseOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n\n\n  releaseLease(leaseId, options) {\n    const operationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, releaseLeaseOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n\n\n  renewLease(leaseId, options) {\n    const operationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, renewLeaseOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   *                        (String) for a list of valid GUID string formats.\n   * @param options The options parameters.\n   */\n\n\n  changeLease(leaseId, proposedLeaseId, options) {\n    const operationArguments = {\n      leaseId,\n      proposedLeaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, changeLeaseOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n\n\n  breakLease(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, breakLeaseOperationSpec);\n  }\n  /**\n   * The Create Snapshot operation creates a read-only snapshot of a blob\n   * @param options The options parameters.\n   */\n\n\n  createSnapshot(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, createSnapshotOperationSpec);\n  }\n  /**\n   * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n\n\n  startCopyFromURL(copySource, options) {\n    const operationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, startCopyFromURLOperationSpec);\n  }\n  /**\n   * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return\n   * a response until the copy is complete.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n\n\n  copyFromURL(copySource, options) {\n    const operationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, copyFromURLOperationSpec);\n  }\n  /**\n   * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination\n   * blob with zero length and full metadata.\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n   *               operation.\n   * @param options The options parameters.\n   */\n\n\n  abortCopyFromURL(copyId, options) {\n    const operationArguments = {\n      copyId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, abortCopyFromURLOperationSpec);\n  }\n  /**\n   * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant storage only). A\n   * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block\n   * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's\n   * ETag.\n   * @param tier Indicates the tier to be set on the blob.\n   * @param options The options parameters.\n   */\n\n\n  setTier(tier, options) {\n    const operationArguments = {\n      tier,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setTierOperationSpec);\n  }\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n\n\n  getAccountInfo(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec);\n  }\n  /**\n   * The Query operation enables users to select/project on blob data by providing simple query\n   * expressions.\n   * @param options The options parameters.\n   */\n\n\n  query(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, queryOperationSpec);\n  }\n  /**\n   * The Get Tags operation enables users to get the tags associated with a blob.\n   * @param options The options parameters.\n   */\n\n\n  getTags(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getTagsOperationSpec);\n  }\n  /**\n   * The Set Tags operation enables users to set tags on a blob.\n   * @param options The options parameters.\n   */\n\n\n  setTags(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setTagsOperationSpec);\n  }\n\n} // Operation Specifications\n\nconst xmlSerializer = new coreHttp.Serializer(Mappers,\n/* isXml */\ntrue);\nconst downloadOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDownloadExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.rangeGetContentMD5, Parameters.rangeGetContentCRC64, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.blobDeleteType],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.deleteSnapshots],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst undeleteOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobUndeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobUndeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp8],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setExpiryOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetExpiryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetExpiryExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.expiryOptions, Parameters.expiresOn],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setHttpHeadersOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetHttpHeadersHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetHttpHeadersExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setImmutabilityPolicyOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetImmutabilityPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetImmutabilityPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifUnmodifiedSince, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteImmutabilityPolicyOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setLegalHoldOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetLegalHoldHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetLegalHoldExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp13],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.legalHold],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setMetadataOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetMetadataExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp6],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst acquireLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAcquireLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action, Parameters.duration, Parameters.proposedLeaseId, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst releaseLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobReleaseLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action1, Parameters.leaseId1, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renewLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobRenewLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action2, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst changeLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobChangeLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action4, Parameters.proposedLeaseId1, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst breakLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobBreakLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action3, Parameters.breakPeriod, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst createSnapshotOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobCreateSnapshotHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCreateSnapshotExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp14],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst startCopyFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobStartCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobStartCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.tier, Parameters.rehydratePriority, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceIfTags, Parameters.copySource, Parameters.blobTagsString, Parameters.sealBlob, Parameters.legalHold1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst copyFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.copySource, Parameters.blobTagsString, Parameters.legalHold1, Parameters.xMsRequiresSync, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.copySourceTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst abortCopyFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobAbortCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAbortCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp15, Parameters.copyId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.copyActionAbortConstant],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setTierOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    202: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTierExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp16],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags, Parameters.rehydratePriority, Parameters.tier1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst queryOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobQueryHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobQueryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobQueryExceptionHeaders\n    }\n  },\n  requestBody: Parameters.queryRequest,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.comp17],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getTagsOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobTags,\n      headersMapper: Mappers.BlobGetTagsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetTagsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp18],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setTagsOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobSetTagsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTagsExceptionHeaders\n    }\n  },\n  requestBody: Parameters.tags,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.versionId, Parameters.comp18],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.leaseId, Parameters.ifTags, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};","map":{"version":3,"sources":["../../../../../../src/generated/src/operations/blob.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  BlobDownloadOptionalParams,\n  BlobDownloadResponse,\n  BlobGetPropertiesOptionalParams,\n  BlobGetPropertiesResponse,\n  BlobDeleteOptionalParams,\n  BlobDeleteResponse,\n  BlobUndeleteOptionalParams,\n  BlobUndeleteResponse,\n  BlobExpiryOptions,\n  BlobSetExpiryOptionalParams,\n  BlobSetExpiryResponse,\n  BlobSetHttpHeadersOptionalParams,\n  BlobSetHttpHeadersResponse,\n  BlobSetImmutabilityPolicyOptionalParams,\n  BlobSetImmutabilityPolicyResponse,\n  BlobDeleteImmutabilityPolicyOptionalParams,\n  BlobDeleteImmutabilityPolicyResponse,\n  BlobSetLegalHoldOptionalParams,\n  BlobSetLegalHoldResponse,\n  BlobSetMetadataOptionalParams,\n  BlobSetMetadataResponse,\n  BlobAcquireLeaseOptionalParams,\n  BlobAcquireLeaseResponse,\n  BlobReleaseLeaseOptionalParams,\n  BlobReleaseLeaseResponse,\n  BlobRenewLeaseOptionalParams,\n  BlobRenewLeaseResponse,\n  BlobChangeLeaseOptionalParams,\n  BlobChangeLeaseResponse,\n  BlobBreakLeaseOptionalParams,\n  BlobBreakLeaseResponse,\n  BlobCreateSnapshotOptionalParams,\n  BlobCreateSnapshotResponse,\n  BlobStartCopyFromURLOptionalParams,\n  BlobStartCopyFromURLResponse,\n  BlobCopyFromURLOptionalParams,\n  BlobCopyFromURLResponse,\n  BlobAbortCopyFromURLOptionalParams,\n  BlobAbortCopyFromURLResponse,\n  AccessTier,\n  BlobSetTierOptionalParams,\n  BlobSetTierResponse,\n  BlobGetAccountInfoResponse,\n  BlobQueryOptionalParams,\n  BlobQueryResponse,\n  BlobGetTagsOptionalParams,\n  BlobGetTagsResponse,\n  BlobSetTagsOptionalParams,\n  BlobSetTagsResponse\n} from \"../models\";\n\n/** Class representing a Blob. */\nexport class Blob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class Blob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Download operation reads or downloads a blob from the system, including its metadata and\n   * properties. You can also call Download to read a snapshot.\n   * @param options The options parameters.\n   */\n  download(\n    options?: BlobDownloadOptionalParams\n  ): Promise<BlobDownloadResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      downloadOperationSpec\n    ) as Promise<BlobDownloadResponse>;\n  }\n\n  /**\n   * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system\n   * properties for the blob. It does not return the content of the blob.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: BlobGetPropertiesOptionalParams\n  ): Promise<BlobGetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPropertiesOperationSpec\n    ) as Promise<BlobGetPropertiesResponse>;\n  }\n\n  /**\n   * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n   * permanently removed from the storage account. If the storage account's soft delete feature is\n   * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n   * immediately. However, the blob service retains the blob or snapshot for the number of days specified\n   * by the DeleteRetentionPolicy section of [Storage service properties]\n   * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is\n   * permanently removed from the storage account. Note that you continue to be charged for the\n   * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the\n   * \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You\n   * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a\n   * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n   * (ResourceNotFound).\n   * @param options The options parameters.\n   */\n  delete(options?: BlobDeleteOptionalParams): Promise<BlobDeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<BlobDeleteResponse>;\n  }\n\n  /**\n   * Undelete a blob that was previously soft deleted\n   * @param options The options parameters.\n   */\n  undelete(\n    options?: BlobUndeleteOptionalParams\n  ): Promise<BlobUndeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      undeleteOperationSpec\n    ) as Promise<BlobUndeleteResponse>;\n  }\n\n  /**\n   * Sets the time a blob will expire and be deleted.\n   * @param expiryOptions Required. Indicates mode of the expiry time\n   * @param options The options parameters.\n   */\n  setExpiry(\n    expiryOptions: BlobExpiryOptions,\n    options?: BlobSetExpiryOptionalParams\n  ): Promise<BlobSetExpiryResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      expiryOptions,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setExpiryOperationSpec\n    ) as Promise<BlobSetExpiryResponse>;\n  }\n\n  /**\n   * The Set HTTP Headers operation sets system properties on the blob\n   * @param options The options parameters.\n   */\n  setHttpHeaders(\n    options?: BlobSetHttpHeadersOptionalParams\n  ): Promise<BlobSetHttpHeadersResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setHttpHeadersOperationSpec\n    ) as Promise<BlobSetHttpHeadersResponse>;\n  }\n\n  /**\n   * The Set Immutability Policy operation sets the immutability policy on the blob\n   * @param options The options parameters.\n   */\n  setImmutabilityPolicy(\n    options?: BlobSetImmutabilityPolicyOptionalParams\n  ): Promise<BlobSetImmutabilityPolicyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setImmutabilityPolicyOperationSpec\n    ) as Promise<BlobSetImmutabilityPolicyResponse>;\n  }\n\n  /**\n   * The Delete Immutability Policy operation deletes the immutability policy on the blob\n   * @param options The options parameters.\n   */\n  deleteImmutabilityPolicy(\n    options?: BlobDeleteImmutabilityPolicyOptionalParams\n  ): Promise<BlobDeleteImmutabilityPolicyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteImmutabilityPolicyOperationSpec\n    ) as Promise<BlobDeleteImmutabilityPolicyResponse>;\n  }\n\n  /**\n   * The Set Legal Hold operation sets a legal hold on the blob.\n   * @param legalHold Specified if a legal hold should be set on the blob.\n   * @param options The options parameters.\n   */\n  setLegalHold(\n    legalHold: boolean,\n    options?: BlobSetLegalHoldOptionalParams\n  ): Promise<BlobSetLegalHoldResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      legalHold,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setLegalHoldOperationSpec\n    ) as Promise<BlobSetLegalHoldResponse>;\n  }\n\n  /**\n   * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n   * name-value pairs\n   * @param options The options parameters.\n   */\n  setMetadata(\n    options?: BlobSetMetadataOptionalParams\n  ): Promise<BlobSetMetadataResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setMetadataOperationSpec\n    ) as Promise<BlobSetMetadataResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  acquireLease(\n    options?: BlobAcquireLeaseOptionalParams\n  ): Promise<BlobAcquireLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      acquireLeaseOperationSpec\n    ) as Promise<BlobAcquireLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  releaseLease(\n    leaseId: string,\n    options?: BlobReleaseLeaseOptionalParams\n  ): Promise<BlobReleaseLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      releaseLeaseOperationSpec\n    ) as Promise<BlobReleaseLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  renewLease(\n    leaseId: string,\n    options?: BlobRenewLeaseOptionalParams\n  ): Promise<BlobRenewLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      renewLeaseOperationSpec\n    ) as Promise<BlobRenewLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   *                        (String) for a list of valid GUID string formats.\n   * @param options The options parameters.\n   */\n  changeLease(\n    leaseId: string,\n    proposedLeaseId: string,\n    options?: BlobChangeLeaseOptionalParams\n  ): Promise<BlobChangeLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      proposedLeaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      changeLeaseOperationSpec\n    ) as Promise<BlobChangeLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  breakLease(\n    options?: BlobBreakLeaseOptionalParams\n  ): Promise<BlobBreakLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      breakLeaseOperationSpec\n    ) as Promise<BlobBreakLeaseResponse>;\n  }\n\n  /**\n   * The Create Snapshot operation creates a read-only snapshot of a blob\n   * @param options The options parameters.\n   */\n  createSnapshot(\n    options?: BlobCreateSnapshotOptionalParams\n  ): Promise<BlobCreateSnapshotResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createSnapshotOperationSpec\n    ) as Promise<BlobCreateSnapshotResponse>;\n  }\n\n  /**\n   * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  startCopyFromURL(\n    copySource: string,\n    options?: BlobStartCopyFromURLOptionalParams\n  ): Promise<BlobStartCopyFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      startCopyFromURLOperationSpec\n    ) as Promise<BlobStartCopyFromURLResponse>;\n  }\n\n  /**\n   * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return\n   * a response until the copy is complete.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  copyFromURL(\n    copySource: string,\n    options?: BlobCopyFromURLOptionalParams\n  ): Promise<BlobCopyFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      copyFromURLOperationSpec\n    ) as Promise<BlobCopyFromURLResponse>;\n  }\n\n  /**\n   * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination\n   * blob with zero length and full metadata.\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n   *               operation.\n   * @param options The options parameters.\n   */\n  abortCopyFromURL(\n    copyId: string,\n    options?: BlobAbortCopyFromURLOptionalParams\n  ): Promise<BlobAbortCopyFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copyId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      abortCopyFromURLOperationSpec\n    ) as Promise<BlobAbortCopyFromURLResponse>;\n  }\n\n  /**\n   * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant storage only). A\n   * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block\n   * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's\n   * ETag.\n   * @param tier Indicates the tier to be set on the blob.\n   * @param options The options parameters.\n   */\n  setTier(\n    tier: AccessTier,\n    options?: BlobSetTierOptionalParams\n  ): Promise<BlobSetTierResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      tier,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setTierOperationSpec\n    ) as Promise<BlobSetTierResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(\n    options?: coreHttp.OperationOptions\n  ): Promise<BlobGetAccountInfoResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getAccountInfoOperationSpec\n    ) as Promise<BlobGetAccountInfoResponse>;\n  }\n\n  /**\n   * The Query operation enables users to select/project on blob data by providing simple query\n   * expressions.\n   * @param options The options parameters.\n   */\n  query(options?: BlobQueryOptionalParams): Promise<BlobQueryResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      queryOperationSpec\n    ) as Promise<BlobQueryResponse>;\n  }\n\n  /**\n   * The Get Tags operation enables users to get the tags associated with a blob.\n   * @param options The options parameters.\n   */\n  getTags(options?: BlobGetTagsOptionalParams): Promise<BlobGetTagsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getTagsOperationSpec\n    ) as Promise<BlobGetTagsResponse>;\n  }\n\n  /**\n   * The Set Tags operation enables users to set tags on a blob.\n   * @param options The options parameters.\n   */\n  setTags(options?: BlobSetTagsOptionalParams): Promise<BlobSetTagsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setTagsOperationSpec\n    ) as Promise<BlobSetTagsResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\n\nconst downloadOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDownloadExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.rangeGetContentMD5,\n    Parameters.rangeGetContentCRC64,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.blobDeleteType\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.deleteSnapshots\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst undeleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobUndeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobUndeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp8],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setExpiryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetExpiryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetExpiryExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.expiryOptions,\n    Parameters.expiresOn\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setHttpHeadersOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetHttpHeadersHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetHttpHeadersExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setImmutabilityPolicyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetImmutabilityPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetImmutabilityPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifUnmodifiedSince,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteImmutabilityPolicyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setLegalHoldOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetLegalHoldHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetLegalHoldExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp13],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.legalHold\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetMetadataExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp6],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst acquireLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAcquireLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action,\n    Parameters.duration,\n    Parameters.proposedLeaseId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst releaseLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobReleaseLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action1,\n    Parameters.leaseId1,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renewLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobRenewLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action2,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst changeLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobChangeLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action4,\n    Parameters.proposedLeaseId1,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst breakLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobBreakLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action3,\n    Parameters.breakPeriod,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst createSnapshotOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobCreateSnapshotHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCreateSnapshotExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp14],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst startCopyFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobStartCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobStartCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.tier,\n    Parameters.rehydratePriority,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceIfTags,\n    Parameters.copySource,\n    Parameters.blobTagsString,\n    Parameters.sealBlob,\n    Parameters.legalHold1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst copyFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.copySource,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.xMsRequiresSync,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.copySourceTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst abortCopyFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobAbortCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAbortCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp15,\n    Parameters.copyId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.copyActionAbortConstant\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setTierOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    202: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTierExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.comp16\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifTags,\n    Parameters.rehydratePriority,\n    Parameters.tier1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst queryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobQueryHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobQueryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobQueryExceptionHeaders\n    }\n  },\n  requestBody: Parameters.queryRequest,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.comp17\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getTagsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobTags,\n      headersMapper: Mappers.BlobGetTagsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetTagsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.comp18\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setTagsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobSetTagsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTagsExceptionHeaders\n    }\n  },\n  requestBody: Parameters.tags,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.versionId,\n    Parameters.comp18\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId,\n    Parameters.ifTags,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}