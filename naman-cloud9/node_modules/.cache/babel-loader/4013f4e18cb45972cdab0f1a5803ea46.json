{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { delay } from \"@azure/core-http\";\nimport { Poller } from \"@azure/core-lro\";\n/**\n * This is the poller returned by {@link BlobClient.beginCopyFromURL}.\n * This can not be instantiated directly outside of this package.\n *\n * @hidden\n */\n\nexport class BlobBeginCopyFromUrlPoller extends Poller {\n  constructor(options) {\n    const {\n      blobClient,\n      copySource,\n      intervalInMs = 15000,\n      onProgress,\n      resumeFrom,\n      startCopyFromURLOptions\n    } = options;\n    let state;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state), {\n      blobClient,\n      copySource,\n      startCopyFromURLOptions\n    }));\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  delay() {\n    return delay(this.intervalInMs);\n  }\n\n}\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\n\nconst cancel = async function cancel() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const state = this.state;\n  const {\n    copyId\n  } = state;\n\n  if (state.isCompleted) {\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  }\n\n  if (!copyId) {\n    state.isCancelled = true;\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  } // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call\n\n\n  await state.blobClient.abortCopyFromURL(copyId, {\n    abortSignal: options.abortSignal\n  });\n  state.isCancelled = true;\n  return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\n\n\nconst update = async function update() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const state = this.state;\n  const {\n    blobClient,\n    copySource,\n    startCopyFromURLOptions\n  } = state;\n\n  if (!state.isStarted) {\n    state.isStarted = true;\n    const result = await blobClient.startCopyFromURL(copySource, startCopyFromURLOptions); // copyId is needed to abort\n\n    state.copyId = result.copyId;\n\n    if (result.copyStatus === \"success\") {\n      state.result = result;\n      state.isCompleted = true;\n    }\n  } else if (!state.isCompleted) {\n    try {\n      const result = await state.blobClient.getProperties({\n        abortSignal: options.abortSignal\n      });\n      const {\n        copyStatus,\n        copyProgress\n      } = result;\n      const prevCopyProgress = state.copyProgress;\n\n      if (copyProgress) {\n        state.copyProgress = copyProgress;\n      }\n\n      if (copyStatus === \"pending\" && copyProgress !== prevCopyProgress && typeof options.fireProgress === \"function\") {\n        // trigger in setTimeout, or swallow error?\n        options.fireProgress(state);\n      } else if (copyStatus === \"success\") {\n        state.result = result;\n        state.isCompleted = true;\n      } else if (copyStatus === \"failed\") {\n        state.error = new Error(`Blob copy failed with reason: \"${result.copyStatusDescription || \"unknown\"}\"`);\n        state.isCompleted = true;\n      }\n    } catch (err) {\n      state.error = err;\n      state.isCompleted = true;\n    }\n  }\n\n  return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\n\n\nconst toString = function toString() {\n  return JSON.stringify({\n    state: this.state\n  }, (key, value) => {\n    // remove blobClient from serialized state since a client can't be hydrated from this info.\n    if (key === \"blobClient\") {\n      return undefined;\n    }\n\n    return value;\n  });\n};\n/**\n * Creates a poll operation given the provided state.\n * @hidden\n */\n\n\nfunction makeBlobBeginCopyFromURLPollOperation(state) {\n  return {\n    state: Object.assign({}, state),\n    cancel,\n    toString,\n    update\n  };\n}","map":{"version":3,"sources":["../../../../src/pollers/BlobStartCopyFromUrlPoller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay } from \"@azure/core-http\";\nimport { PollOperation, PollOperationState, Poller } from \"@azure/core-lro\";\nimport { BlobClient, BlobStartCopyFromURLOptions, BlobBeginCopyFromURLResponse } from \"../Clients\";\n\n/**\n * Defines the operations from a {@link BlobClient} that are needed for the poller\n * returned by {@link BlobClient.beginCopyFromURL} to work.\n */\nexport type CopyPollerBlobClient = Pick<BlobClient, \"abortCopyFromURL\" | \"getProperties\"> & {\n  startCopyFromURL(\n    copySource: string,\n    options?: BlobStartCopyFromURLOptions\n  ): Promise<BlobBeginCopyFromURLResponse>;\n};\n\n/**\n * The state used by the poller returned from {@link BlobClient.beginCopyFromURL}.\n *\n * This state is passed into the user-specified `onProgress` callback\n * whenever copy progress is detected.\n */\nexport interface BlobBeginCopyFromUrlPollState\n  extends PollOperationState<BlobBeginCopyFromURLResponse> {\n  /**\n   * The instance of {@link BlobClient} that was used when calling {@link BlobClient.beginCopyFromURL}.\n   */\n  readonly blobClient: CopyPollerBlobClient;\n  /**\n   * The copyId that identifies the in-progress blob copy.\n   */\n  copyId?: string;\n  /**\n   * the progress of the blob copy as reported by the service.\n   */\n  copyProgress?: string;\n  /**\n   * The source URL provided in {@link BlobClient.beginCopyFromURL}.\n   */\n  copySource: string;\n  /**\n   * The options that were passed to the initial {@link BlobClient.beginCopyFromURL} call.\n   * This is exposed for the poller and should not be modified directly.\n   */\n  readonly startCopyFromURLOptions?: BlobStartCopyFromURLOptions;\n}\n\n/**\n * The PollOperation responsible for:\n *  - performing the initial startCopyFromURL\n *  - checking the copy status via getProperties\n *  - cancellation via abortCopyFromURL\n * @hidden\n */\nexport interface BlobBeginCopyFromURLPollOperation\n  extends PollOperation<BlobBeginCopyFromUrlPollState, BlobBeginCopyFromURLResponse> {}\n\n/**\n * The set of options used to configure the poller.\n * This is an internal interface populated by {@link BlobClient.beginCopyFromURL}.\n *\n * @hidden\n */\nexport interface BlobBeginCopyFromUrlPollerOptions {\n  blobClient: CopyPollerBlobClient;\n  copySource: string;\n  intervalInMs?: number;\n  onProgress?: (state: BlobBeginCopyFromUrlPollState) => void;\n  resumeFrom?: string;\n  startCopyFromURLOptions?: BlobStartCopyFromURLOptions;\n}\n\n/**\n * This is the poller returned by {@link BlobClient.beginCopyFromURL}.\n * This can not be instantiated directly outside of this package.\n *\n * @hidden\n */\nexport class BlobBeginCopyFromUrlPoller extends Poller<\n  BlobBeginCopyFromUrlPollState,\n  BlobBeginCopyFromURLResponse\n> {\n  public intervalInMs: number;\n\n  constructor(options: BlobBeginCopyFromUrlPollerOptions) {\n    const {\n      blobClient,\n      copySource,\n      intervalInMs = 15000,\n      onProgress,\n      resumeFrom,\n      startCopyFromURLOptions,\n    } = options;\n\n    let state: BlobBeginCopyFromUrlPollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBlobBeginCopyFromURLPollOperation({\n      ...state,\n      blobClient,\n      copySource,\n      startCopyFromURLOptions,\n    });\n\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.intervalInMs);\n  }\n}\n\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst cancel: BlobBeginCopyFromURLPollOperation[\"cancel\"] = async function cancel(\n  this: BlobBeginCopyFromURLPollOperation,\n  options = {}\n) {\n  const state = this.state;\n  const { copyId } = state;\n  if (state.isCompleted) {\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  }\n\n  if (!copyId) {\n    state.isCancelled = true;\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  }\n\n  // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call\n  await state.blobClient.abortCopyFromURL(copyId, {\n    abortSignal: options.abortSignal,\n  });\n  state.isCancelled = true;\n\n  return makeBlobBeginCopyFromURLPollOperation(state);\n};\n\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst update: BlobBeginCopyFromURLPollOperation[\"update\"] = async function update(\n  this: BlobBeginCopyFromURLPollOperation,\n  options = {}\n): Promise<BlobBeginCopyFromURLPollOperation> {\n  const state = this.state;\n  const { blobClient, copySource, startCopyFromURLOptions } = state;\n\n  if (!state.isStarted) {\n    state.isStarted = true;\n    const result = await blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);\n\n    // copyId is needed to abort\n    state.copyId = result.copyId;\n    if (result.copyStatus === \"success\") {\n      state.result = result;\n      state.isCompleted = true;\n    }\n  } else if (!state.isCompleted) {\n    try {\n      const result = await state.blobClient.getProperties({ abortSignal: options.abortSignal });\n      const { copyStatus, copyProgress } = result;\n      const prevCopyProgress = state.copyProgress;\n      if (copyProgress) {\n        state.copyProgress = copyProgress;\n      }\n      if (\n        copyStatus === \"pending\" &&\n        copyProgress !== prevCopyProgress &&\n        typeof options.fireProgress === \"function\"\n      ) {\n        // trigger in setTimeout, or swallow error?\n        options.fireProgress(state);\n      } else if (copyStatus === \"success\") {\n        state.result = result;\n        state.isCompleted = true;\n      } else if (copyStatus === \"failed\") {\n        state.error = new Error(\n          `Blob copy failed with reason: \"${result.copyStatusDescription || \"unknown\"}\"`\n        );\n        state.isCompleted = true;\n      }\n    } catch (err: any) {\n      state.error = err;\n      state.isCompleted = true;\n    }\n  }\n\n  return makeBlobBeginCopyFromURLPollOperation(state);\n};\n\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst toString: BlobBeginCopyFromURLPollOperation[\"toString\"] = function toString(\n  this: BlobBeginCopyFromURLPollOperation\n) {\n  return JSON.stringify({ state: this.state }, (key, value) => {\n    // remove blobClient from serialized state since a client can't be hydrated from this info.\n    if (key === \"blobClient\") {\n      return undefined;\n    }\n    return value;\n  });\n};\n\n/**\n * Creates a poll operation given the provided state.\n * @hidden\n */\nfunction makeBlobBeginCopyFromURLPollOperation(\n  state: BlobBeginCopyFromUrlPollState\n): BlobBeginCopyFromURLPollOperation {\n  return {\n    state: { ...state },\n    cancel,\n    toString,\n    update,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}