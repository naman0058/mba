{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.\n *\n * @deprecated No longer used in the bearer authorization policy.\n */\nexport class AccessTokenRefresher {\n  constructor(credential, scopes) {\n    let requiredMillisecondsBeforeNewRefresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30000;\n    this.credential = credential;\n    this.scopes = scopes;\n    this.requiredMillisecondsBeforeNewRefresh = requiredMillisecondsBeforeNewRefresh;\n    this.lastCalled = 0;\n  }\n  /**\n   * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying\n   * that we are ready for a new refresh.\n   */\n\n\n  isReady() {\n    // We're only ready for a new refresh if the required milliseconds have passed.\n    return !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh;\n  }\n  /**\n   * Stores the time in which it is called,\n   * then requests a new token,\n   * then sets this.promise to undefined,\n   * then returns the token.\n   */\n\n\n  async getToken(options) {\n    this.lastCalled = Date.now();\n    const token = await this.credential.getToken(this.scopes, options);\n    this.promise = undefined;\n    return token || undefined;\n  }\n  /**\n   * Requests a new token if we're not currently waiting for a new token.\n   * Returns null if the required time between each call hasn't been reached.\n   */\n\n\n  refresh(options) {\n    if (!this.promise) {\n      this.promise = this.getToken(options);\n    }\n\n    return this.promise;\n  }\n\n}","map":{"version":3,"sources":["../../../src/credentials/accessTokenRefresher.ts"],"names":[],"mappings":"AAAA;AACA;;AAIA;;;;AAIG;AACH,OAAM,MAAO,oBAAP,CAA2B;AAI/B,EAAA,WAAA,CACU,UADV,EAEU,MAFV,EAG8D;AAAA,QAApD,oCAAoD,uEAAL,KAAK;AAFpD,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,oCAAA,GAAA,oCAAA;AALF,SAAA,UAAA,GAAa,CAAb;AAMJ;AAEJ;;;AAGG;;;AACI,EAAA,OAAO,GAAA;AACZ;AACA,WACE,CAAC,KAAK,UAAN,IAAoB,IAAI,CAAC,GAAL,KAAa,KAAK,UAAlB,GAA+B,KAAK,oCAD1D;AAGD;AAED;;;;;AAKG;;;AACmB,QAAR,QAAQ,CAAC,OAAD,EAAyB;AAC7C,SAAK,UAAL,GAAkB,IAAI,CAAC,GAAL,EAAlB;AACA,UAAM,KAAK,GAAG,MAAM,KAAK,UAAL,CAAgB,QAAhB,CAAyB,KAAK,MAA9B,EAAsC,OAAtC,CAApB;AACA,SAAK,OAAL,GAAe,SAAf;AACA,WAAO,KAAK,IAAI,SAAhB;AACD;AAED;;;AAGG;;;AACI,EAAA,OAAO,CAAC,OAAD,EAAyB;AACrC,QAAI,CAAC,KAAK,OAAV,EAAmB;AACjB,WAAK,OAAL,GAAe,KAAK,QAAL,CAAc,OAAd,CAAf;AACD;;AAED,WAAO,KAAK,OAAZ;AACD;;AA5C8B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\n\n/**\n * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.\n *\n * @deprecated No longer used in the bearer authorization policy.\n */\nexport class AccessTokenRefresher {\n  private promise: Promise<AccessToken | undefined> | undefined;\n  private lastCalled = 0;\n\n  constructor(\n    private credential: TokenCredential,\n    private scopes: string | string[],\n    private requiredMillisecondsBeforeNewRefresh: number = 30000\n  ) {}\n\n  /**\n   * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying\n   * that we are ready for a new refresh.\n   */\n  public isReady(): boolean {\n    // We're only ready for a new refresh if the required milliseconds have passed.\n    return (\n      !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh\n    );\n  }\n\n  /**\n   * Stores the time in which it is called,\n   * then requests a new token,\n   * then sets this.promise to undefined,\n   * then returns the token.\n   */\n  private async getToken(options: GetTokenOptions): Promise<AccessToken | undefined> {\n    this.lastCalled = Date.now();\n    const token = await this.credential.getToken(this.scopes, options);\n    this.promise = undefined;\n    return token || undefined;\n  }\n\n  /**\n   * Requests a new token if we're not currently waiting for a new token.\n   * Returns null if the required time between each call hasn't been reached.\n   */\n  public refresh(options: GetTokenOptions): Promise<AccessToken | undefined> {\n    if (!this.promise) {\n      this.promise = this.getToken(options);\n    }\n\n    return this.promise;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}