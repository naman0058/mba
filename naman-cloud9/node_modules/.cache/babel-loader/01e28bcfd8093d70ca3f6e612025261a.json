{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { Sanitizer } from \"../util/sanitizer\";\nimport { logger as coreLogger } from \"../log\";\n/**\n * Creates a policy that logs information about the outgoing request and the incoming responses.\n * @param loggingOptions - Logging options.\n * @returns An instance of the {@link LogPolicy}\n */\n\nexport function logPolicy() {\n  let loggingOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    create: (nextPolicy, options) => {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    }\n  };\n}\n/**\n * A policy that logs information about the outgoing request and the incoming responses.\n */\n\nexport class LogPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options) {\n    let {\n      logger = coreLogger.info,\n      allowedHeaderNames = [],\n      allowedQueryParameters = []\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(nextPolicy, options);\n    this.logger = logger;\n    this.sanitizer = new Sanitizer({\n      allowedHeaderNames,\n      allowedQueryParameters\n    });\n  }\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n\n\n  get allowedHeaderNames() {\n    return this.sanitizer.allowedHeaderNames;\n  }\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n\n\n  set allowedHeaderNames(allowedHeaderNames) {\n    this.sanitizer.allowedHeaderNames = allowedHeaderNames;\n  }\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n\n\n  get allowedQueryParameters() {\n    return this.sanitizer.allowedQueryParameters;\n  }\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n\n\n  set allowedQueryParameters(allowedQueryParameters) {\n    this.sanitizer.allowedQueryParameters = allowedQueryParameters;\n  }\n\n  sendRequest(request) {\n    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n    this.logRequest(request);\n    return this._nextPolicy.sendRequest(request).then(response => this.logResponse(response));\n  }\n\n  logRequest(request) {\n    this.logger(`Request: ${this.sanitizer.sanitize(request)}`);\n  }\n\n  logResponse(response) {\n    this.logger(`Response status code: ${response.status}`);\n    this.logger(`Headers: ${this.sanitizer.sanitize(response.headers)}`);\n    return response;\n  }\n\n}","map":{"version":3,"sources":["../../../src/policies/logPolicy.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SACE,iBADF,QAKO,iBALP;AAQA,SAAS,SAAT,QAA0B,mBAA1B;AAEA,SAAS,MAAM,IAAI,UAAnB,QAAqC,QAArC;AAiCA;;;;AAIG;;AACH,OAAM,SAAU,SAAV,GAAyD;AAAA,MAArC,cAAqC,uEAAF,EAAE;AAC7D,SAAO;AACL,IAAA,MAAM,EAAE,CAAC,UAAD,EAA4B,OAA5B,KAA6D;AACnE,aAAO,IAAI,SAAJ,CAAc,UAAd,EAA0B,OAA1B,EAAmC,cAAnC,CAAP;AACD;AAHI,GAAP;AAKD;AAED;;AAEG;;AACH,OAAM,MAAO,SAAP,SAAyB,iBAAzB,CAA0C;AA4C9C,EAAA,WAAA,CACE,UADF,EAEE,OAFF,EAO0B;AAAA,QAJxB;AACE,MAAA,MAAM,GAAG,UAAU,CAAC,IADtB;AAEE,MAAA,kBAAkB,GAAG,EAFvB;AAGE,MAAA,sBAAsB,GAAG;AAH3B,KAIwB,uEAAF,EAAE;AAExB,UAAM,UAAN,EAAkB,OAAlB;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,SAAL,GAAiB,IAAI,SAAJ,CAAc;AAAE,MAAA,kBAAF;AAAsB,MAAA;AAAtB,KAAd,CAAjB;AACD;AApDD;;;;;;AAMG;;;AAC0B,MAAlB,kBAAkB,GAAA;AAC3B,WAAO,KAAK,SAAL,CAAe,kBAAtB;AACD;AAED;;;;;;AAMG;;;AAC0B,MAAlB,kBAAkB,CAAC,kBAAD,EAAgC;AAC3D,SAAK,SAAL,CAAe,kBAAf,GAAoC,kBAApC;AACD;AAED;;;;AAIG;;;AAC8B,MAAtB,sBAAsB,GAAA;AAC/B,WAAO,KAAK,SAAL,CAAe,sBAAtB;AACD;AAED;;;;AAIG;;;AAC8B,MAAtB,sBAAsB,CAAC,sBAAD,EAAoC;AACnE,SAAK,SAAL,CAAe,sBAAf,GAAwC,sBAAxC;AACD;;AAgBM,EAAA,WAAW,CAAC,OAAD,EAAyB;AACzC,QAAI,CAAC,KAAK,MAAL,CAAY,OAAjB,EAA0B,OAAO,KAAK,WAAL,CAAiB,WAAjB,CAA6B,OAA7B,CAAP;AAE1B,SAAK,UAAL,CAAgB,OAAhB;AACA,WAAO,KAAK,WAAL,CAAiB,WAAjB,CAA6B,OAA7B,EAAsC,IAAtC,CAA4C,QAAD,IAAc,KAAK,WAAL,CAAiB,QAAjB,CAAzD,CAAP;AACD;;AAEO,EAAA,UAAU,CAAC,OAAD,EAAyB;AACzC,SAAK,MAAL,CAAY,YAAY,KAAK,SAAL,CAAe,QAAf,CAAwB,OAAxB,CAAgC,EAAxD;AACD;;AAEO,EAAA,WAAW,CAAC,QAAD,EAAgC;AACjD,SAAK,MAAL,CAAY,yBAAyB,QAAQ,CAAC,MAAM,EAApD;AACA,SAAK,MAAL,CAAY,YAAY,KAAK,SAAL,CAAe,QAAf,CAAwB,QAAQ,CAAC,OAAjC,CAAyC,EAAjE;AACA,WAAO,QAAP;AACD;;AAzE6C","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { Debugger } from \"@azure/logger\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Sanitizer } from \"../util/sanitizer\";\nimport { WebResourceLike } from \"../webResource\";\nimport { logger as coreLogger } from \"../log\";\n\n/**\n * Options to pass to the {@link logPolicy}.\n * By default only a set list of headers are logged, though this can be configured. Request and response bodies are never logged.\n */\nexport interface LogPolicyOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to:\n   * x-ms-client-request-id, x-ms-return-client-request-id, x-ms-useragent, x-ms-correlation-request-id,\n   * x-ms-request-id, client-request-id, ms-cv, return-client-request-id, traceparent, Access-Control-Allow-Credentials,\n   * Access-Control-Allow-Headers, Access-Control-Allow-Methods, Access-Control-Allow-Origin, Access-Control-Expose-Headers,\n   * Access-Control-Max-Age, Access-Control-Request-Headers, Access-Control-Request-Method, Origin, Accept, Accept-Encoding,\n   * Cache-Control, Connection, Content-Length, Content-Type, Date, ETag, Expires, If-Match, If-Modified-Since, If-None-Match,\n   * If-Unmodified-Since, Last-Modified, Pragma, Request-Id, Retry-After, Server, Transfer-Encoding, and User-Agent.\n   *\n   * Any headers specified in this field will be added to that list.\n   * Any other values will be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n\n  /**\n   * The Debugger (logger) instance to use for writing pipeline logs.\n   */\n  logger?: Debugger;\n}\n\n/**\n * Creates a policy that logs information about the outgoing request and the incoming responses.\n * @param loggingOptions - Logging options.\n * @returns An instance of the {@link LogPolicy}\n */\nexport function logPolicy(loggingOptions: LogPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    },\n  };\n}\n\n/**\n * A policy that logs information about the outgoing request and the incoming responses.\n */\nexport class LogPolicy extends BaseRequestPolicy {\n  logger: Debugger;\n  sanitizer: Sanitizer;\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedHeaderNames(): Set<string> {\n    return this.sanitizer.allowedHeaderNames;\n  }\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedHeaderNames(allowedHeaderNames: Set<string>) {\n    this.sanitizer.allowedHeaderNames = allowedHeaderNames;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedQueryParameters(): Set<string> {\n    return this.sanitizer.allowedQueryParameters;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedQueryParameters(allowedQueryParameters: Set<string>) {\n    this.sanitizer.allowedQueryParameters = allowedQueryParameters;\n  }\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    {\n      logger = coreLogger.info,\n      allowedHeaderNames = [],\n      allowedQueryParameters = [],\n    }: LogPolicyOptions = {}\n  ) {\n    super(nextPolicy, options);\n    this.logger = logger;\n    this.sanitizer = new Sanitizer({ allowedHeaderNames, allowedQueryParameters });\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n\n    this.logRequest(request);\n    return this._nextPolicy.sendRequest(request).then((response) => this.logResponse(response));\n  }\n\n  private logRequest(request: WebResourceLike): void {\n    this.logger(`Request: ${this.sanitizer.sanitize(request)}`);\n  }\n\n  private logResponse(response: HttpOperationResponse): HttpOperationResponse {\n    this.logger(`Response status code: ${response.status}`);\n    this.logger(`Headers: ${this.sanitizer.sanitize(response.headers)}`);\n    return response;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}