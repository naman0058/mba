{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { map, mergeMap, startWith, switchMap } from 'rxjs/operators';\nexport class BlobDeletesViewStateService {\n  get deleteQueue$() {\n    return this.deleteQueueInner$.asObservable();\n  }\n\n  constructor(blobStorage, blobState) {\n    this.blobStorage = blobStorage;\n    this.blobState = blobState;\n    this.deleteQueueInner$ = new Subject();\n    this.deletedItems$ = this.deleteQueue$.pipe(mergeMap(filename => this.deleteFile(filename)), this.blobState.scanEntries());\n\n    this.deleteFile = filename => this.blobState.getStorageOptionsWithContainer().pipe(switchMap(options => this.blobStorage.deleteBlobItem({ ...options,\n      filename\n    }).pipe(this.mapDeleteResponse(filename, options), this.blobState.finaliseBlobChange(options.containerName))));\n\n    this.mapDeleteResponse = (filename, options) => source => source.pipe(map(() => ({\n      filename,\n      containerName: options.containerName\n    })), startWith({\n      filename,\n      containerName: options.containerName\n    }));\n  }\n\n  deleteItem(filename) {\n    this.deleteQueueInner$.next(filename);\n  }\n\n}","map":{"version":3,"sources":["D:/naman-cloud9/naman-cloud9/src/pages/BlobDeletesViewState.ts"],"names":["Subject","map","mergeMap","startWith","switchMap","BlobDeletesViewStateService","deleteQueue$","deleteQueueInner$","asObservable","constructor","blobStorage","blobState","deletedItems$","pipe","filename","deleteFile","scanEntries","getStorageOptionsWithContainer","options","deleteBlobItem","mapDeleteResponse","finaliseBlobChange","containerName","source","deleteItem","next"],"mappings":"AACA,SAA2BA,OAA3B,QAA0C,MAA1C;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,SAAxB,EAAmCC,SAAnC,QAAoD,gBAApD;AAKA,OAAO,MAAMC,2BAAN,CAAkC;AAQvB,MAAZC,YAAY,GAAG;AACjB,WAAO,KAAKC,iBAAL,CAAuBC,YAAvB,EAAP;AACD;;AAEDC,EAAAA,WAAW,CACDC,WADC,EAEDC,SAFC,EAGT;AAAA,SAFQD,WAER,GAFQA,WAER;AAAA,SADQC,SACR,GADQA,SACR;AAAA,SAdMJ,iBAcN,GAd0B,IAAIP,OAAJ,EAc1B;AAAA,SAZFY,aAYE,GAZc,KAAKN,YAAL,CAAkBO,IAAlB,CACdX,QAAQ,CAACY,QAAQ,IAAI,KAAKC,UAAL,CAAgBD,QAAhB,CAAb,CADM,EAEd,KAAKH,SAAL,CAAeK,WAAf,EAFc,CAYd;;AAAA,SAMMD,UANN,GAMoBD,QAAD,IACnB,KAAKH,SAAL,CAAeM,8BAAf,GAAgDJ,IAAhD,CACET,SAAS,CAACc,OAAO,IACf,KAAKR,WAAL,CACGS,cADH,CACkB,EACd,GAAGD,OADW;AAEdJ,MAAAA;AAFc,KADlB,EAKGD,IALH,CAMI,KAAKO,iBAAL,CAAuBN,QAAvB,EAAiCI,OAAjC,CANJ,EAOI,KAAKP,SAAL,CAAeU,kBAAf,CAAkCH,OAAO,CAACI,aAA1C,CAPJ,CADO,CADX,CAPA;;AAAA,SAqBMF,iBArBN,GAqB0B,CAC1BN,QAD0B,EAE1BI,OAF0B,KAGyBK,MAAM,IACzDA,MAAM,CAACV,IAAP,CACEZ,GAAG,CAAC,OAAO;AACTa,MAAAA,QADS;AAETQ,MAAAA,aAAa,EAAEJ,OAAO,CAACI;AAFd,KAAP,CAAD,CADL,EAKEnB,SAAS,CAAC;AACRW,MAAAA,QADQ;AAERQ,MAAAA,aAAa,EAAEJ,OAAO,CAACI;AAFf,KAAD,CALX,CAzBA;AAAE;;AAEJE,EAAAA,UAAU,CAACV,QAAD,EAAyB;AACjC,SAAKP,iBAAL,CAAuBkB,IAAvB,CAA4BX,QAA5B;AACD;;AAnBsC","sourcesContent":["import { BlobDeleteResponse } from '@azure/storage-blob';\r\nimport { OperatorFunction, Subject } from 'rxjs';\r\nimport { map, mergeMap, startWith, switchMap } from 'rxjs/operators';\r\nimport { BlobContainerRequest, BlobItem } from './azure-storage';\r\nimport { BlobSharedViewStateService } from './BlobSharedViewState';\r\nimport { BlobStorageService } from './BlobStorageService';\r\n\r\nexport class BlobDeletesViewStateService {\r\n  private deleteQueueInner$ = new Subject<string>();\r\n\r\n  deletedItems$ = this.deleteQueue$.pipe(\r\n    mergeMap(filename => this.deleteFile(filename)),\r\n    this.blobState.scanEntries()\r\n  );\r\n\r\n  get deleteQueue$() {\r\n    return this.deleteQueueInner$.asObservable();\r\n  }\r\n\r\n  constructor(\r\n    private blobStorage: BlobStorageService,\r\n    private blobState: BlobSharedViewStateService\r\n  ) {}\r\n\r\n  deleteItem(filename: string): void {\r\n    this.deleteQueueInner$.next(filename);\r\n  }\r\n\r\n  private deleteFile = (filename: string) =>\r\n    this.blobState.getStorageOptionsWithContainer().pipe(\r\n      switchMap(options =>\r\n        this.blobStorage\r\n          .deleteBlobItem({\r\n            ...options,\r\n            filename\r\n          })\r\n          .pipe(\r\n            this.mapDeleteResponse(filename, options),\r\n            this.blobState.finaliseBlobChange(options.containerName)\r\n          )\r\n      )\r\n    );\r\n\r\n  private mapDeleteResponse = (\r\n    filename: string,\r\n    options: BlobContainerRequest\r\n  ): OperatorFunction<BlobDeleteResponse, BlobItem> => source =>\r\n    source.pipe(\r\n      map(() => ({\r\n        filename,\r\n        containerName: options.containerName\r\n      })),\r\n      startWith({\r\n        filename,\r\n        containerName: options.containerName\r\n      })\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}