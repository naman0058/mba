{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\n/**\n * By default, HTTP connections are maintained for future requests.\n */\n\nexport const DefaultKeepAliveOptions = {\n  enable: true\n};\n/**\n * Creates a policy that controls whether HTTP connections are maintained on future requests.\n * @param keepAliveOptions - Keep alive options. By default, HTTP connections are maintained for future requests.\n * @returns An instance of the {@link KeepAlivePolicy}\n */\n\nexport function keepAlivePolicy(keepAliveOptions) {\n  return {\n    create: (nextPolicy, options) => {\n      return new KeepAlivePolicy(nextPolicy, options, keepAliveOptions || DefaultKeepAliveOptions);\n    }\n  };\n}\n/**\n * KeepAlivePolicy is a policy used to control keep alive settings for every request.\n */\n\nexport class KeepAlivePolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param keepAliveOptions -\n   */\n  constructor(nextPolicy, options, keepAliveOptions) {\n    super(nextPolicy, options);\n    this.keepAliveOptions = keepAliveOptions;\n  }\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   * @returns\n   */\n\n\n  async sendRequest(request) {\n    request.keepAlive = this.keepAliveOptions.enable;\n    return this._nextPolicy.sendRequest(request);\n  }\n\n}","map":{"version":3,"sources":["../../../src/policies/keepAlivePolicy.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SACE,iBADF,QAKO,iBALP;AAqBA;;AAEG;;AACH,OAAO,MAAM,uBAAuB,GAAqB;AACvD,EAAA,MAAM,EAAE;AAD+C,CAAlD;AAIP;;;;AAIG;;AACH,OAAM,SAAU,eAAV,CAA0B,gBAA1B,EAA6D;AACjE,SAAO;AACL,IAAA,MAAM,EAAE,CAAC,UAAD,EAA4B,OAA5B,KAA6D;AACnE,aAAO,IAAI,eAAJ,CAAoB,UAApB,EAAgC,OAAhC,EAAyC,gBAAgB,IAAI,uBAA7D,CAAP;AACD;AAHI,GAAP;AAKD;AAED;;AAEG;;AACH,OAAM,MAAO,eAAP,SAA+B,iBAA/B,CAAgD;AACpD;;;;;;AAMG;AACH,EAAA,WAAA,CACE,UADF,EAEE,OAFF,EAGmB,gBAHnB,EAGqD;AAEnD,UAAM,UAAN,EAAkB,OAAlB;AAFiB,SAAA,gBAAA,GAAA,gBAAA;AAGlB;AAED;;;;;AAKG;;;AACqB,QAAX,WAAW,CAAC,OAAD,EAAyB;AAC/C,IAAA,OAAO,CAAC,SAAR,GAAoB,KAAK,gBAAL,CAAsB,MAA1C;AACA,WAAO,KAAK,WAAL,CAAiB,WAAjB,CAA6B,OAA7B,CAAP;AACD;;AAzBmD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Options for how HTTP connections should be maintained for future\n * requests.\n */\nexport interface KeepAliveOptions {\n  /**\n   * When true, connections will be kept alive for multiple requests.\n   * Defaults to true.\n   */\n  enable: boolean;\n}\n\n/**\n * By default, HTTP connections are maintained for future requests.\n */\nexport const DefaultKeepAliveOptions: KeepAliveOptions = {\n  enable: true,\n};\n\n/**\n * Creates a policy that controls whether HTTP connections are maintained on future requests.\n * @param keepAliveOptions - Keep alive options. By default, HTTP connections are maintained for future requests.\n * @returns An instance of the {@link KeepAlivePolicy}\n */\nexport function keepAlivePolicy(keepAliveOptions?: KeepAliveOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new KeepAlivePolicy(nextPolicy, options, keepAliveOptions || DefaultKeepAliveOptions);\n    },\n  };\n}\n\n/**\n * KeepAlivePolicy is a policy used to control keep alive settings for every request.\n */\nexport class KeepAlivePolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param keepAliveOptions -\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private readonly keepAliveOptions: KeepAliveOptions\n  ) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   * @returns\n   */\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    request.keepAlive = this.keepAliveOptions.enable;\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}